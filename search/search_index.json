{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iSCAPE Sensors Technical Documentation Link Introduction Link The project sensor platform builds on the legacy of previous Smart Citizen Kit generations to develop a new set of tools especially aimed at providing meaningful data insights on a low budget. That means this report documents new components, developed specifically for the project, but frames them inside the Smart Citizen ecosystem. We believe building modular and reusable hardware is critical towards optimizing the research and development effort. By increasing the technology readiness levels of existing technologies, we can drastically improve the project exploitation strategy. Environmental sensors play a critical role in the ISCAPE project the primary goals being: Engage local communities at the Living Labs to deploy and learn about sensors as a novel way to learn about their environment, in particular cities air pollution issues. Provide a sensor infrastructure to enable the different sites to monitor the performance of their interventions. To support this approach, we needed to accomplish three key requirements: Modularity: The sensor hardware operates as a platform where new sensor modules can be shipped and deployed by the Living Labs themselves when they are finished enabling faster iterations and upgrades even after the project finishes. Open design and documentation: All the components developed are released on open source license to foster the collaboration between different the stakeholders. That especially aims at involving the Living Labs on the design of new sensing strategies and technologies. Easy to use: The technology needs to be accessible to ensure users engagement, especially for those sensors targeting at citizens, but also to ensure the technology development is ready to be exploded commercially after the project. The following approach led the project to development of two sensor solutions: The Citizen Kit and the Living Lab Station .","title":"Home"},{"location":"#iscape-sensors-technical-documentation","text":"","title":"iSCAPE Sensors Technical Documentation"},{"location":"#introduction","text":"The project sensor platform builds on the legacy of previous Smart Citizen Kit generations to develop a new set of tools especially aimed at providing meaningful data insights on a low budget. That means this report documents new components, developed specifically for the project, but frames them inside the Smart Citizen ecosystem. We believe building modular and reusable hardware is critical towards optimizing the research and development effort. By increasing the technology readiness levels of existing technologies, we can drastically improve the project exploitation strategy. Environmental sensors play a critical role in the ISCAPE project the primary goals being: Engage local communities at the Living Labs to deploy and learn about sensors as a novel way to learn about their environment, in particular cities air pollution issues. Provide a sensor infrastructure to enable the different sites to monitor the performance of their interventions. To support this approach, we needed to accomplish three key requirements: Modularity: The sensor hardware operates as a platform where new sensor modules can be shipped and deployed by the Living Labs themselves when they are finished enabling faster iterations and upgrades even after the project finishes. Open design and documentation: All the components developed are released on open source license to foster the collaboration between different the stakeholders. That especially aims at involving the Living Labs on the design of new sensing strategies and technologies. Easy to use: The technology needs to be accessible to ensure users engagement, especially for those sensors targeting at citizens, but also to ensure the technology development is ready to be exploded commercially after the project. The following approach led the project to development of two sensor solutions: The Citizen Kit and the Living Lab Station .","title":"Introduction"},{"location":"Citizen Kit/Citizen Kit/","text":"What it is? Link The Citizen Kit, formerly known as the Low-Cost Sensor, is aimed at providing a low-cost environmental sensor solution non-technical users can easily deploy. The design developed for the project is a complete reiteration of the Smart Citizen Kit, a piece of hardware for citizen sensing already tested in other projects for more than five years. On this iteration, new sensors had been added, and all the electronic design has been redone from the ground up to improve the data accuracy and reduce the manufacturing costs. The design is built around two boards the Smart Citizen Data Board and the Smart Citizen Urban Sensor Board. The first board contains the data acquisition, the power management, and the communication unit. The second contains a set of sensors aimed at the outdoor urban environment including: Air Temperature, Relative Humidity, Noise Level, Ambient Light and Barometric Pressure. The board also features a section especially focused on Air Quality including a Air Particles, a Carbon Monoxide, and a Dioxide Nitrogen detectors. This sensor while not capable of offering precise measurements can be used to understand the behavior of different urban locations especially when they are calibrated on the field using certified equipment. Both boards are later described in detail on the Sensor Components section. From the non-technical user side, the sensor includes an easy to follow online setup process that guides the users on the whole install procedure: The Smart Citizen Onboarding. The sensor does not require to stay always powered but requires charging at least every two days. The charging is done using a standard USB adapter like on any Smartphone; a process already by many users familiar.","title":"Citizen Kit"},{"location":"Citizen Kit/Citizen Kit/#what-it-is","text":"The Citizen Kit, formerly known as the Low-Cost Sensor, is aimed at providing a low-cost environmental sensor solution non-technical users can easily deploy. The design developed for the project is a complete reiteration of the Smart Citizen Kit, a piece of hardware for citizen sensing already tested in other projects for more than five years. On this iteration, new sensors had been added, and all the electronic design has been redone from the ground up to improve the data accuracy and reduce the manufacturing costs. The design is built around two boards the Smart Citizen Data Board and the Smart Citizen Urban Sensor Board. The first board contains the data acquisition, the power management, and the communication unit. The second contains a set of sensors aimed at the outdoor urban environment including: Air Temperature, Relative Humidity, Noise Level, Ambient Light and Barometric Pressure. The board also features a section especially focused on Air Quality including a Air Particles, a Carbon Monoxide, and a Dioxide Nitrogen detectors. This sensor while not capable of offering precise measurements can be used to understand the behavior of different urban locations especially when they are calibrated on the field using certified equipment. Both boards are later described in detail on the Sensor Components section. From the non-technical user side, the sensor includes an easy to follow online setup process that guides the users on the whole install procedure: The Smart Citizen Onboarding. The sensor does not require to stay always powered but requires charging at least every two days. The charging is done using a standard USB adapter like on any Smartphone; a process already by many users familiar.","title":"What it is?"},{"location":"Citizen Kit/guides/Installation Guide/","text":"How to install? Link","title":"Installation Guide"},{"location":"Citizen Kit/guides/Installation Guide/#how-to-install","text":"","title":"How to install?"},{"location":"Components/Components/","text":"iSCAPE Sensors Technical Documentation Link Introduction Link The project sensor platform builds on the legacy of previous Smart Citizen Kit generations to develop a new set of tools especially aimed at providing meaningful data insights on a low budget. That means this report documents new components, developed specifically for the project, but frames them inside the Smart Citizen ecosystem. We believe building modular and reusable hardware is critical towards optimizing the research and development effort. By increasing the technology readiness levels of existing technologies, we can drastically improve the project exploitation strategy. The sensor hardware operates as a platform where new sensor modules can be shipped and deployed by the Living Labs themselves when they are finished enabling faster iterations and upgrades even after the project finishes.","title":"Components"},{"location":"Components/Components/#iscape-sensors-technical-documentation","text":"","title":"iSCAPE Sensors Technical Documentation"},{"location":"Components/Components/#introduction","text":"The project sensor platform builds on the legacy of previous Smart Citizen Kit generations to develop a new set of tools especially aimed at providing meaningful data insights on a low budget. That means this report documents new components, developed specifically for the project, but frames them inside the Smart Citizen ecosystem. We believe building modular and reusable hardware is critical towards optimizing the research and development effort. By increasing the technology readiness levels of existing technologies, we can drastically improve the project exploitation strategy. The sensor hardware operates as a platform where new sensor modules can be shipped and deployed by the Living Labs themselves when they are finished enabling faster iterations and upgrades even after the project finishes.","title":"Introduction"},{"location":"Components/Data Board/Data Board/","text":"Data Board Link The data board is powered by an ARM M0+ 32-bits at 48Mhz running the Smart Citizen 2.0 software, combining the low power consumption of the ARM M0 family with the power of a 32-bits processor with 32KB of RAM and 256KB FLASH memory. That offers enough program storage and memory space to support multiple auxiliary sensors and no expense. The Data Board connects to the sensor board providing power, analog and digital communications (12 bits ADC, GPIO, I2C, I2S, VCC). Moreover, it includes a Seeed Studio standard Grove connector where off the shelf modules from the same manufacturer can be connected. The external add-ons can be enabled or disabled from the board to save power. The connector supports an independent I2C bus by default, but it can be configured in software to support other uses (GPIO, I2C and UART). The Smart Citizen Gas and Smart Citizen PM sensor boards described above use this bus receive power and communications from the board. The board includes a battery management controller with a 2000mAh Lithium polymer cell capable of powering the device in standby for more than two weeks. On a normal operation, the battery will last for more than a week to one day, when all the sensors are enabled and recording every minute. The controller allows the batteries to be easily charged using the boards micro USB connector using any standard USB power adapter like the ones used on Smartphones. On remote areas, it can also be powered using a selection of PV Panels like Voltaics Systems 6W panel. LED Color codes Link Normal operation Link Red soft pulsing Apmode Blue soft pulsing wifi. Pink soft pulsing sdcard. Other color + Orange soft pulsing on battery. Other color + Green soft pulsing battery charging. SD Card Link https://hackmd.io/V41GoPhARay1XBMm7N6XIw# Guides Link Debugging the SCK Updating the Smartcitizen Kit 2.0 Developer guide: Building and flashing the Smartcitizen Kit firmware. :::info Dev notes 2.0 https://hackmd.io/0dPsKRCWQOyYB4au6itS5g#CO-and-NO2-Sensor-MICS-4514 ESP Notes https://hackmd.io/Gc8GT0I1QkaY487bIkfKMg :::","title":"Data Board"},{"location":"Components/Data Board/Data Board/#data-board","text":"The data board is powered by an ARM M0+ 32-bits at 48Mhz running the Smart Citizen 2.0 software, combining the low power consumption of the ARM M0 family with the power of a 32-bits processor with 32KB of RAM and 256KB FLASH memory. That offers enough program storage and memory space to support multiple auxiliary sensors and no expense. The Data Board connects to the sensor board providing power, analog and digital communications (12 bits ADC, GPIO, I2C, I2S, VCC). Moreover, it includes a Seeed Studio standard Grove connector where off the shelf modules from the same manufacturer can be connected. The external add-ons can be enabled or disabled from the board to save power. The connector supports an independent I2C bus by default, but it can be configured in software to support other uses (GPIO, I2C and UART). The Smart Citizen Gas and Smart Citizen PM sensor boards described above use this bus receive power and communications from the board. The board includes a battery management controller with a 2000mAh Lithium polymer cell capable of powering the device in standby for more than two weeks. On a normal operation, the battery will last for more than a week to one day, when all the sensors are enabled and recording every minute. The controller allows the batteries to be easily charged using the boards micro USB connector using any standard USB power adapter like the ones used on Smartphones. On remote areas, it can also be powered using a selection of PV Panels like Voltaics Systems 6W panel.","title":"Data Board"},{"location":"Components/Data Board/Data Board/#led-color-codes","text":"","title":"LED Color codes"},{"location":"Components/Data Board/Data Board/#normal-operation","text":"Red soft pulsing Apmode Blue soft pulsing wifi. Pink soft pulsing sdcard. Other color + Orange soft pulsing on battery. Other color + Green soft pulsing battery charging.","title":"Normal operation"},{"location":"Components/Data Board/Data Board/#sd-card","text":"https://hackmd.io/V41GoPhARay1XBMm7N6XIw#","title":"SD Card"},{"location":"Components/Data Board/Data Board/#guides","text":"Debugging the SCK Updating the Smartcitizen Kit 2.0 Developer guide: Building and flashing the Smartcitizen Kit firmware. :::info Dev notes 2.0 https://hackmd.io/0dPsKRCWQOyYB4au6itS5g#CO-and-NO2-Sensor-MICS-4514 ESP Notes https://hackmd.io/Gc8GT0I1QkaY487bIkfKMg :::","title":"Guides"},{"location":"Components/Gas Pro Sensor Board/","text":"Gases Pro Sensor Board Link The Gases Sensor Board is a custom, ultra-low noise, high-performance, low power, digital output driver for 3 Alphasense Ltd. Electrochemical Series B Gas Sensors specifically designed for the project from the ground up. The following characteristics have been considered for the sensor choice The driver's board designed includes a temperature and humidity sensor for calibrating the temperature dependence of the sensing subsystem. Same technology as the A4 series but more robust when exposed to outdoor environments 24/7. Designed for fixed site air quality networks which demand longer term reliability. Manufacturers provide the baseline resistance calibration values per sensor allowing corrections to be easily applied. Low power consumption The Alphasense EC Sensors were selected to provide a higher linearity, repeatability and resolution than the SGX MICS MO Gas Sensors found on the Urban Sensor Board. The final EC sensors selected were Alphasense Ltd. NO2B4 1 (Nitrogen Dioxide Sensor), O3B4 2 (Oxidising Gas Sensor Ozone + Nitrogen Dioxide) and COB4 3 (Carbon Monoxide). This selection was based on the academic references selected above. For a complete Low-Cost Sensors Evaluation see ISCAPE D1.5 Summary of air quality sensors and recommendations for application and the subsequent publication (Rai et al. 2017 . Both (Penza and EuNetAir Consortium 2014) and (Mead et al. 2013) test the Alphasense Ltd (UK) NO2A1-A3 against reference instruments, both in the laboratory and in the field, with well-correlated results. The former concluded that the Data Quality Objective for \"indicative measurements\" (European Parliament and Council of the European Union, 2008) are fulfilled, and the latter report sensitivity in the low ppb region with high linearity. (Jensen 2016) (Spinelle et al. 2015) tested the Alphasense NO2B4 and O3B4 in a field experiment, with various calibration approaches. The correlation with reference measurements was poor (R2 \\ 0.1 and R2 \\ 0.5 for NO 2 and O 3 , respectively) when using linear and multivariate linear calibration, and good (R2 around 0.9 and 0.6 for NO 2 and O 3 , respectively) when using artificial neural networks. The poor results for NO 2 are likely due to the experiments being in a rural setting with quite low NO 2 concentrations. (Jensen 2016) . A performance evaluation of the same sensors was performed later including a test on a wide range of performance parameters (e.g. response time, calibration function, repeatability, drift, hysteresis effect and matrix effect) (Spinelle et al. 2015) . The experiment gave very good correlation with reference instruments (R2 > 0.99) and identifies some cases with major hysteresis effect related to humidity. (Spinelle et al. 2014) did a detailed laboratory and field study of the Alphasense Ltd (UK) O3B4 O 3 sensor, reporting good linearity, while uncertainty is adequately low to meet the requirements for \\\"indicative measurements\\\" by the Data Quality Objective (European Parliament and Council of the European Union, 2008). (Jensen 2016) . In chamber conditions, the performances of the Alphasense CO-B4 was found to be excellent, with the R2 values being greater than 0.99 (Castell et al. 2017; Mead et al. 2013; Sun et al. 2016 . However, the field investigations report significant deterioration and variations in sensor performances as given in Table 6. Two field studies reported moderate to excellent R2 values (0.53--0.97) for the CO-B4 sensor (Borrego et al. 2016) ; (Castell et al. 2017; Mead et al. 2013; Sun et al. 2016) . However, two other field studies have reported significantly lower R2 values (0.17--0.45) for the CO-B4, when calibrating them with reference measurements Castell et al. 2017; Mead et al. 2013; Sun et al. 2016) (Spinelle et al. 2017) (Rai et al. 2017) (Spinelle et al. 2017) . ALPHASENSE NO2-B43F Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/NO2B43F.pdf ALPHASENSE OX-B431 Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/OX-B431.pdf ALPHASENSE CO-B4 B Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2015/04/COB41.pdf","title":"Index"},{"location":"Components/Gas Pro Sensor Board/#gases-pro-sensor-board","text":"The Gases Sensor Board is a custom, ultra-low noise, high-performance, low power, digital output driver for 3 Alphasense Ltd. Electrochemical Series B Gas Sensors specifically designed for the project from the ground up. The following characteristics have been considered for the sensor choice The driver's board designed includes a temperature and humidity sensor for calibrating the temperature dependence of the sensing subsystem. Same technology as the A4 series but more robust when exposed to outdoor environments 24/7. Designed for fixed site air quality networks which demand longer term reliability. Manufacturers provide the baseline resistance calibration values per sensor allowing corrections to be easily applied. Low power consumption The Alphasense EC Sensors were selected to provide a higher linearity, repeatability and resolution than the SGX MICS MO Gas Sensors found on the Urban Sensor Board. The final EC sensors selected were Alphasense Ltd. NO2B4 1 (Nitrogen Dioxide Sensor), O3B4 2 (Oxidising Gas Sensor Ozone + Nitrogen Dioxide) and COB4 3 (Carbon Monoxide). This selection was based on the academic references selected above. For a complete Low-Cost Sensors Evaluation see ISCAPE D1.5 Summary of air quality sensors and recommendations for application and the subsequent publication (Rai et al. 2017 . Both (Penza and EuNetAir Consortium 2014) and (Mead et al. 2013) test the Alphasense Ltd (UK) NO2A1-A3 against reference instruments, both in the laboratory and in the field, with well-correlated results. The former concluded that the Data Quality Objective for \"indicative measurements\" (European Parliament and Council of the European Union, 2008) are fulfilled, and the latter report sensitivity in the low ppb region with high linearity. (Jensen 2016) (Spinelle et al. 2015) tested the Alphasense NO2B4 and O3B4 in a field experiment, with various calibration approaches. The correlation with reference measurements was poor (R2 \\ 0.1 and R2 \\ 0.5 for NO 2 and O 3 , respectively) when using linear and multivariate linear calibration, and good (R2 around 0.9 and 0.6 for NO 2 and O 3 , respectively) when using artificial neural networks. The poor results for NO 2 are likely due to the experiments being in a rural setting with quite low NO 2 concentrations. (Jensen 2016) . A performance evaluation of the same sensors was performed later including a test on a wide range of performance parameters (e.g. response time, calibration function, repeatability, drift, hysteresis effect and matrix effect) (Spinelle et al. 2015) . The experiment gave very good correlation with reference instruments (R2 > 0.99) and identifies some cases with major hysteresis effect related to humidity. (Spinelle et al. 2014) did a detailed laboratory and field study of the Alphasense Ltd (UK) O3B4 O 3 sensor, reporting good linearity, while uncertainty is adequately low to meet the requirements for \\\"indicative measurements\\\" by the Data Quality Objective (European Parliament and Council of the European Union, 2008). (Jensen 2016) . In chamber conditions, the performances of the Alphasense CO-B4 was found to be excellent, with the R2 values being greater than 0.99 (Castell et al. 2017; Mead et al. 2013; Sun et al. 2016 . However, the field investigations report significant deterioration and variations in sensor performances as given in Table 6. Two field studies reported moderate to excellent R2 values (0.53--0.97) for the CO-B4 sensor (Borrego et al. 2016) ; (Castell et al. 2017; Mead et al. 2013; Sun et al. 2016) . However, two other field studies have reported significantly lower R2 values (0.17--0.45) for the CO-B4, when calibrating them with reference measurements Castell et al. 2017; Mead et al. 2013; Sun et al. 2016) (Spinelle et al. 2017) (Rai et al. 2017) (Spinelle et al. 2017) . ALPHASENSE NO2-B43F Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/NO2B43F.pdf ALPHASENSE OX-B431 Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/OX-B431.pdf ALPHASENSE CO-B4 B Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2015/04/COB41.pdf","title":"Gases Pro Sensor Board"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/","text":"Electrochemical Sensors - Baseline Correction Methodology Link This section describes the electrochemical sensors used in the iScape project and the algorithm used for the calculation of the gas measurements with a baseline correction methodology. Sensor working principle Link The electrochemical cells used are toxic gas sensors from alphasense that operate in an amperometric mode. That is, they generate a current that is linearly proportional to the fractional volume of the toxic gas in the environment: Image Source: Alphasense Ltd. These electrochemical sensors are comprised of four electrodes: Working electrode Auxiliary electrode Counter electrode Reference electrode The working electrode is where the oxidation (CO, H2S, NO, SO2) or reduction (NO2, Cl2) of the toxic gas to be measured takes place. This electrode is exposed to the outside air and directly exposed to all gases in the air including the gas to be measured. This electrode may as well be poisoned if it is exposed to certain gases that either adsorb onto the catalyst (such as acetylene onto CO sensors), or react, creating by-products which inhibit the catalyst (NO2 or aromatics onto H2S sensors). The auxiliary electrode is an electrode of the same characteristics to those of the working electrode, but it is buried inside an electrolite and, hence, it is not in contact with the target gas. Since it is isolated from external conditions that could affect the working electrode , it serves as a reference to the measurements provided by the latter. The counter electrode balances the reaction of the working electrode \u2013 if the working electrode oxidises the gas, then the counter electrode must reduce some other molecule to generate an equivalent current, in the opposite sense. For example, where carbon monoxide will be oxidised on the working electrode, oxygen will be reduced on the counter electrode. The reference electrode anchors the working electrode potential to ensure that it is always working in the right conditions. It is important that the reference electrode has a stable potential, keeping the working electrode at the right electrochemical potential to maintain a constant sensitivity, good linearity and minimum sensitivity to interfering gases. Therefore, while the sensor response is exposed to the target gas, it creates a current flowing from the working to the counter electrode or viceversa (depending on the oxidative or reductive nature of the target gas). This relationship can be characterised and follows a curve such as: Image source: Alphasense Ltd. When operating in the so called transport limited current plateau the measured current (IL) should be linearly dependent on the concentration or fractional volume of the toxic gas (CT) in the external environment: I_L = k C_T I_L = k C_T where k is a proportionality constant. This constant is provided by the manufacturer as Sensitivity and is explained below. Electronics design considerations A potentiostat circuit is built in order to ensure that the counter electrode is provided with as much current as it needs, also maintaining the working electrode at a fixed potential, irrespective of how hard it is working. Manufacturer data Link The manufacturer provides the calibration data in laboratory conditions for each of the electrochemical cells used. This data is listed below: - Sensor sensitivity : the sensor response in nA per each ppm of target pollutant in nominal conditions - Electrode zero current : the electrode reading in nA to zero air (pure air at 25degC). This is provided for both, working and auxiliary electrodes, in the case of 4-electrode sensors - Sensor response ( t_{90} t_{90} ) The manufacturer suggests using the following equation in order to determine the sensor's corrected reading in the presence of target gas: Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Where: I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) Where: * I_{PCBWE} I_{PCBWE} and I_{PCBAE} I_{PCBAE} are the electronic offsets for each electrode * n = {I_{0WE} \\over I_{0AE}} n = {I_{0WE} \\over I_{0AE}} , the ratio between alphasense's zero currents * k is a constant convertion factor ( ~ 6.36 in the case of the SCK Gas Pro Board electronics) Reduction vs Oxidation Electrochemical Sensor Link As mentioned above, the counter electrode is meant to balance the reaction of the working electrode. This determines the current direction within the board: whether it goes from the working electrode to the counter electrode or viceversa. Oxidation sensors, such as CO, provoke a positive current out of the working electrode and the larger the amount of CO present, the larger (positive) is this current. Reduction sensors, such as NO2, provoke a negative current, i.e: going into the sensor and the larger the amount of NO2 present, the larger (negative) is this current As an example, this is reflected in the different signs of the sensor sensitivity: NO2-B43F Average Batch Sensitivity: -347nA/ppm CO-B4F Average Batch Sensitivity: 588nA/ppm Although this is in principle directly related with the sensor itself, there are further signal transformations to be taken into account. For instance, the currents seen in the electrodes, if comparing between CO and NO2, should be different in sign, however, for both, CO and NO2 sensors, we see positive currents which grow positively with higher CO and NO2 concentrations: Hence, the sensor senstivity provided by the manufacturer should be considered in absolute terms ( abs(Sensitvity) abs(Sensitvity) ) for the calculations to yield always positive results in pollutant fractional volumes. Model description Link The model described in the following section is based on the findings of 1 . This study uses alphasense's 3-electrode sensors, and here it is further extended to the case of 4-electrode sensors, taking into account the auxiliary electrode. Baseline correction based on temperature Link The mentioned work described the correction method based on temperature using a baseline correction algorithm which is described in [2]. This is summarised below: For each day of gas working electrode readings, and for each point in the time series (i), the minimum value of the working electrode value that is contained within the interval (i- \\delta \\delta i i+ \\delta \\delta ) is determined, where \\delta \\delta is an interval ranging from 0 to a day length. The outcome of this procedure is an array where each column is a vector of minimum working electrode values calculated for each \\delta_i \\delta_i value (this is, from now on, baseline_{\\delta_i} baseline_{\\delta_i} ). The correlation between each baseline_{\\delta_i} baseline_{\\delta_i} and the temperature is calculated. Relative humidity is not considered in this study since it's generaly inversely correlated with the temperature. The correlation coefficients for each correlation ( R^2_{\\delta_i} R^2_{\\delta_i} ) are calculated. The maximum R^2 R^2 whith this array is obtained. For the equation at which the maximum R^2_{\\delta_i} R^2_{\\delta_i} is found, the temperature reading is used to calculate the corrected baseline. The corrected baseline is substracted from the actual working electrode reading The final pollutant concentration is calculated based on the corrected working electrode reading and the manufacturer's data. The readings are treated in a day-to-day basis in order to avoid non-stationary temperature trends over several days, but still to account for temperature variations within each day. Finally, a background pollutant concentration is assumed from [3] which is also summarised below for each pollutant. This background concentration is added to the final result. Background concentrations . Source 3 Application on 4-electrode sensors Link This algorithm can be used to correct temperature effects on the working electrode based on the temperature in 4-electrode sensors. The results are discussed below for tests validation campaigns performed within the iScape project. These tests are summarized below: University of Bologna : data collected from 23/January to 13/February. The measured pollutants with reference equipments were CO, NO2, NO, NOx and O3. Two prototype Living Lab Stations were deployed in two different sites, with two Citizen Kits. University College Dublin : data collected from 27/March to 17/April. The measured pollutants with reference equipments were NO, NO2 and NOX. One prototype Living Lab Station was deployed with two Citizen kits. The results found with this methodology in the reduction sensors (NO2, O3) are significant in a daily basis. Two examples of the variation of the correlation coefficient with respect to the delta used to calculate the baseline are shown below: The algorithm is set to apply the best performing correlation function from either a linear or an exponential fit, basing this decission on the one that yields better correlation coefficient. NO2 and O3 at high concentrations yield better results with an exponential fit, whilst lower concentrations reflect a linear trend: Furthermore, the study from which this methodology is drawn from states that oxidation sensors do not yield a proper baseline correlation methodology and so is validated. The result is indeed far better correlated with the reference measurement if using the manufacturer's methodology: This methodology reads as follows: Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Where: I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) Where: * I_{PCBWE} I_{PCBWE} and I_{PCBAE} I_{PCBAE} are the electronic offsets for each electrode * n = {I_{0WE} \\over I_{0AE}} n = {I_{0WE} \\over I_{0AE}} , the ratio between alphasense's zero currents * k is a constant convertion factor ( ~ 6.36 in the case of the SCK Gas Pro Board electronics) In the case of NO2, the results provided by this baseline correction algorithm yield better results: Both, CO and NO2 pollutants, using the best method for each calculation, are shown below: Finally, a comparison between the reference measurement results from both methods is detailed below: Manufacturer Method Baseline Method Pollutant RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 2 / 0.01 NO2 (ppb) 21-24 / 0.3-0.5 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-9 / 0.1 - 0.3 As seen above, the NO2 correlation with both methods yields significant results for non-corrected signals, whilst the RMSE values are higher in the case of the manufacturer's proposal. Therefore, for this pollutant, the selected methodology will be the baseline method. On the contrary, the CO measurements are highly uncorrelated with the baseline method, whilst the original manufacturer's proposal yields decent results. Finally, the O3 correlation levels are lower than the CO and NO2 measurements. This is possibly due to the O3 reference measurement equipment used in the Bologna campaing, since it shows an inverse relationship with NO2 which suggests a biased pollutant calculation in the reference equipment: As well, the results from UCD that are used as a reference for NO2, suggest a poor zero/span calibration of the equipment as it yields negative results that could spoil the NO2 correlation/model errors from those tests: Baseline correction based on auxiliary electrode Link As seen above, the results from applying this methodology to a low concentration, urban environment measurement with 4-electrode sensors yield significantly correlated results in the case of the reductive sensors. It was also seen that oxidation measurements are significantly correlated with the reference measurements while using the manufacturer's suggested method. However, as detailed in the following section, the use of the auxiliary electrode as the source of the correction yields better results due to: The auxiliary electrode is accounting for both, temperature and absolute humidity. The latter could be discarded if the relative humidity is not considered. Since data is treated in a day to day basis, variations of mean temperatures during different days could provoke significant correlations to be found at different timelapses. This provokes gaps in the prediction during night hours that are reduced by the use of the auxiliary electrode. Finally, it is preferrably to use data contained in a single sensor (such as the auxiliary electrode for the EC sensor) rather than including additional sensors in the algorithm. A comparison between the results using this proposed method and the reference measurement from both test campaigns is seen below: Manufacturer Method Baseline Method With Temperature Baseline Method With Auxiliary Electrode Pollutant RMSE / R2 RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 2 / 0.1 2 / 0.01 NO2 (ppb) 21-24 / 0.3-0.5 6-12/0.1-0.4 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-12 / 0.2 4-9 / 0.1 - 0.3 The use of electrochemical sensors for monitoring urban air quality in low-cost, high-density networks - M.I. Mead, O.A.M. Popoola, G.B. Stewart, P. Landshoff, M. Calleja, M. Hayesb, J.J. Baldovi, M.W. McLeod, T.F. Hodgson, J. Dicks, A. Lewis J. Cohen, R. Baron, J.R. Saffell, R.L. Jones Development of a baseline-temperature correction methodology for electrochemical sensors and its implications for long-term stability - Olalekan A.M. Popoola*, Gregor B. Stewart, Mohammed I. Mead, Roderic L. Jones Modelling atmospheric composition in urban street canyons - Vivien Bright, William Bloss and Xiaoming Cai","title":"Electrochemical Sensors"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#electrochemical-sensors-baseline-correction-methodology","text":"This section describes the electrochemical sensors used in the iScape project and the algorithm used for the calculation of the gas measurements with a baseline correction methodology.","title":"Electrochemical Sensors - Baseline Correction Methodology"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#sensor-working-principle","text":"The electrochemical cells used are toxic gas sensors from alphasense that operate in an amperometric mode. That is, they generate a current that is linearly proportional to the fractional volume of the toxic gas in the environment: Image Source: Alphasense Ltd. These electrochemical sensors are comprised of four electrodes: Working electrode Auxiliary electrode Counter electrode Reference electrode The working electrode is where the oxidation (CO, H2S, NO, SO2) or reduction (NO2, Cl2) of the toxic gas to be measured takes place. This electrode is exposed to the outside air and directly exposed to all gases in the air including the gas to be measured. This electrode may as well be poisoned if it is exposed to certain gases that either adsorb onto the catalyst (such as acetylene onto CO sensors), or react, creating by-products which inhibit the catalyst (NO2 or aromatics onto H2S sensors). The auxiliary electrode is an electrode of the same characteristics to those of the working electrode, but it is buried inside an electrolite and, hence, it is not in contact with the target gas. Since it is isolated from external conditions that could affect the working electrode , it serves as a reference to the measurements provided by the latter. The counter electrode balances the reaction of the working electrode \u2013 if the working electrode oxidises the gas, then the counter electrode must reduce some other molecule to generate an equivalent current, in the opposite sense. For example, where carbon monoxide will be oxidised on the working electrode, oxygen will be reduced on the counter electrode. The reference electrode anchors the working electrode potential to ensure that it is always working in the right conditions. It is important that the reference electrode has a stable potential, keeping the working electrode at the right electrochemical potential to maintain a constant sensitivity, good linearity and minimum sensitivity to interfering gases. Therefore, while the sensor response is exposed to the target gas, it creates a current flowing from the working to the counter electrode or viceversa (depending on the oxidative or reductive nature of the target gas). This relationship can be characterised and follows a curve such as: Image source: Alphasense Ltd. When operating in the so called transport limited current plateau the measured current (IL) should be linearly dependent on the concentration or fractional volume of the toxic gas (CT) in the external environment: I_L = k C_T I_L = k C_T where k is a proportionality constant. This constant is provided by the manufacturer as Sensitivity and is explained below. Electronics design considerations A potentiostat circuit is built in order to ensure that the counter electrode is provided with as much current as it needs, also maintaining the working electrode at a fixed potential, irrespective of how hard it is working.","title":"Sensor working principle"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#manufacturer-data","text":"The manufacturer provides the calibration data in laboratory conditions for each of the electrochemical cells used. This data is listed below: - Sensor sensitivity : the sensor response in nA per each ppm of target pollutant in nominal conditions - Electrode zero current : the electrode reading in nA to zero air (pure air at 25degC). This is provided for both, working and auxiliary electrodes, in the case of 4-electrode sensors - Sensor response ( t_{90} t_{90} ) The manufacturer suggests using the following equation in order to determine the sensor's corrected reading in the presence of target gas: Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Where: I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) Where: * I_{PCBWE} I_{PCBWE} and I_{PCBAE} I_{PCBAE} are the electronic offsets for each electrode * n = {I_{0WE} \\over I_{0AE}} n = {I_{0WE} \\over I_{0AE}} , the ratio between alphasense's zero currents * k is a constant convertion factor ( ~ 6.36 in the case of the SCK Gas Pro Board electronics)","title":"Manufacturer data"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#reduction-vs-oxidation-electrochemical-sensor","text":"As mentioned above, the counter electrode is meant to balance the reaction of the working electrode. This determines the current direction within the board: whether it goes from the working electrode to the counter electrode or viceversa. Oxidation sensors, such as CO, provoke a positive current out of the working electrode and the larger the amount of CO present, the larger (positive) is this current. Reduction sensors, such as NO2, provoke a negative current, i.e: going into the sensor and the larger the amount of NO2 present, the larger (negative) is this current As an example, this is reflected in the different signs of the sensor sensitivity: NO2-B43F Average Batch Sensitivity: -347nA/ppm CO-B4F Average Batch Sensitivity: 588nA/ppm Although this is in principle directly related with the sensor itself, there are further signal transformations to be taken into account. For instance, the currents seen in the electrodes, if comparing between CO and NO2, should be different in sign, however, for both, CO and NO2 sensors, we see positive currents which grow positively with higher CO and NO2 concentrations: Hence, the sensor senstivity provided by the manufacturer should be considered in absolute terms ( abs(Sensitvity) abs(Sensitvity) ) for the calculations to yield always positive results in pollutant fractional volumes.","title":"Reduction vs Oxidation Electrochemical Sensor"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#model-description","text":"The model described in the following section is based on the findings of 1 . This study uses alphasense's 3-electrode sensors, and here it is further extended to the case of 4-electrode sensors, taking into account the auxiliary electrode.","title":"Model description"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#baseline-correction-based-on-temperature","text":"The mentioned work described the correction method based on temperature using a baseline correction algorithm which is described in [2]. This is summarised below: For each day of gas working electrode readings, and for each point in the time series (i), the minimum value of the working electrode value that is contained within the interval (i- \\delta \\delta i i+ \\delta \\delta ) is determined, where \\delta \\delta is an interval ranging from 0 to a day length. The outcome of this procedure is an array where each column is a vector of minimum working electrode values calculated for each \\delta_i \\delta_i value (this is, from now on, baseline_{\\delta_i} baseline_{\\delta_i} ). The correlation between each baseline_{\\delta_i} baseline_{\\delta_i} and the temperature is calculated. Relative humidity is not considered in this study since it's generaly inversely correlated with the temperature. The correlation coefficients for each correlation ( R^2_{\\delta_i} R^2_{\\delta_i} ) are calculated. The maximum R^2 R^2 whith this array is obtained. For the equation at which the maximum R^2_{\\delta_i} R^2_{\\delta_i} is found, the temperature reading is used to calculate the corrected baseline. The corrected baseline is substracted from the actual working electrode reading The final pollutant concentration is calculated based on the corrected working electrode reading and the manufacturer's data. The readings are treated in a day-to-day basis in order to avoid non-stationary temperature trends over several days, but still to account for temperature variations within each day. Finally, a background pollutant concentration is assumed from [3] which is also summarised below for each pollutant. This background concentration is added to the final result. Background concentrations . Source 3","title":"Baseline correction based on temperature"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#application-on-4-electrode-sensors","text":"This algorithm can be used to correct temperature effects on the working electrode based on the temperature in 4-electrode sensors. The results are discussed below for tests validation campaigns performed within the iScape project. These tests are summarized below: University of Bologna : data collected from 23/January to 13/February. The measured pollutants with reference equipments were CO, NO2, NO, NOx and O3. Two prototype Living Lab Stations were deployed in two different sites, with two Citizen Kits. University College Dublin : data collected from 27/March to 17/April. The measured pollutants with reference equipments were NO, NO2 and NOX. One prototype Living Lab Station was deployed with two Citizen kits. The results found with this methodology in the reduction sensors (NO2, O3) are significant in a daily basis. Two examples of the variation of the correlation coefficient with respect to the delta used to calculate the baseline are shown below: The algorithm is set to apply the best performing correlation function from either a linear or an exponential fit, basing this decission on the one that yields better correlation coefficient. NO2 and O3 at high concentrations yield better results with an exponential fit, whilst lower concentrations reflect a linear trend: Furthermore, the study from which this methodology is drawn from states that oxidation sensors do not yield a proper baseline correlation methodology and so is validated. The result is indeed far better correlated with the reference measurement if using the manufacturer's methodology: This methodology reads as follows: Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Where: I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) Where: * I_{PCBWE} I_{PCBWE} and I_{PCBAE} I_{PCBAE} are the electronic offsets for each electrode * n = {I_{0WE} \\over I_{0AE}} n = {I_{0WE} \\over I_{0AE}} , the ratio between alphasense's zero currents * k is a constant convertion factor ( ~ 6.36 in the case of the SCK Gas Pro Board electronics) In the case of NO2, the results provided by this baseline correction algorithm yield better results: Both, CO and NO2 pollutants, using the best method for each calculation, are shown below: Finally, a comparison between the reference measurement results from both methods is detailed below: Manufacturer Method Baseline Method Pollutant RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 2 / 0.01 NO2 (ppb) 21-24 / 0.3-0.5 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-9 / 0.1 - 0.3 As seen above, the NO2 correlation with both methods yields significant results for non-corrected signals, whilst the RMSE values are higher in the case of the manufacturer's proposal. Therefore, for this pollutant, the selected methodology will be the baseline method. On the contrary, the CO measurements are highly uncorrelated with the baseline method, whilst the original manufacturer's proposal yields decent results. Finally, the O3 correlation levels are lower than the CO and NO2 measurements. This is possibly due to the O3 reference measurement equipment used in the Bologna campaing, since it shows an inverse relationship with NO2 which suggests a biased pollutant calculation in the reference equipment: As well, the results from UCD that are used as a reference for NO2, suggest a poor zero/span calibration of the equipment as it yields negative results that could spoil the NO2 correlation/model errors from those tests:","title":"Application on 4-electrode sensors"},{"location":"Components/Gas Pro Sensor Board/Electrochemical Sensors/#baseline-correction-based-on-auxiliary-electrode","text":"As seen above, the results from applying this methodology to a low concentration, urban environment measurement with 4-electrode sensors yield significantly correlated results in the case of the reductive sensors. It was also seen that oxidation measurements are significantly correlated with the reference measurements while using the manufacturer's suggested method. However, as detailed in the following section, the use of the auxiliary electrode as the source of the correction yields better results due to: The auxiliary electrode is accounting for both, temperature and absolute humidity. The latter could be discarded if the relative humidity is not considered. Since data is treated in a day to day basis, variations of mean temperatures during different days could provoke significant correlations to be found at different timelapses. This provokes gaps in the prediction during night hours that are reduced by the use of the auxiliary electrode. Finally, it is preferrably to use data contained in a single sensor (such as the auxiliary electrode for the EC sensor) rather than including additional sensors in the algorithm. A comparison between the results using this proposed method and the reference measurement from both test campaigns is seen below: Manufacturer Method Baseline Method With Temperature Baseline Method With Auxiliary Electrode Pollutant RMSE / R2 RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 2 / 0.1 2 / 0.01 NO2 (ppb) 21-24 / 0.3-0.5 6-12/0.1-0.4 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-12 / 0.2 4-9 / 0.1 - 0.3 The use of electrochemical sensors for monitoring urban air quality in low-cost, high-density networks - M.I. Mead, O.A.M. Popoola, G.B. Stewart, P. Landshoff, M. Calleja, M. Hayesb, J.J. Baldovi, M.W. McLeod, T.F. Hodgson, J. Dicks, A. Lewis J. Cohen, R. Baron, J.R. Saffell, R.L. Jones Development of a baseline-temperature correction methodology for electrochemical sensors and its implications for long-term stability - Olalekan A.M. Popoola*, Gregor B. Stewart, Mohammed I. Mead, Roderic L. Jones Modelling atmospheric composition in urban street canyons - Vivien Bright, William Bloss and Xiaoming Cai","title":"Baseline correction based on auxiliary electrode"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/","text":"Advanced development setup Link How to use it? Link Connect the board The alphaDelta board should be connected to the kit auxiliary groove connector and the tester board to the alphaDelta. In this way the kit will have acces to both boards writing values in tester board and reading them in the sensor board. The tester board should be connected between Electrodes A and W from the slot you want to test. Get the firmware You will need the latest version of SCK 2.0 Firmware. To enable tester board in firmware uncomment #define deltaTest in sckAux.h file compile and upload the firmware. Read the sensors Link read Alphadelta [wichSensor: temperature, humidity, 1A, 2A, 2A, 2W, 3A, 3W] SCK read alphadelta 1a AlphaDelta 1A: 8.22 Control digital potentiometers Link control alphadelta 1A set pot [value: 0-100,000] SCK control alphadelta 1a set pot 50000 AlphaDelta 1A: set pot 50000 Setting pot to: 50000 Ohms Actual value: 49803 Ohms Run the tests Link The tester board is enabled as a control command of Alphasense Delta sensors, so it must be called with the prefix control then the name of the sensor alpha (fuzzy match is supported) then the test keyword followed by the slot number we want to test: control alpha test 1 To complete the line we should select one of the two test modes: set followed by a nA value between -1400/+1400. This will instruct the tester board to output that current and verify the readings of the sensor. control alpha test set SCK control alpha test 1 set 500 AlphaDelta 1A: test 1 set 500 Setting test current to: 500 Tester Electrode W: 500 Alphadelta 1W: 78.87 Tester Electrode A: 500 Alphadelta 1A: 78.70 Testing finished! or full that will ouput a csv formated table with the values for both electrodes of the selected slot from -1400 nA to 1400 nA: control alpha test 1 full SCK control alpha test 1 full AlphaDelta 1A: test 1 full testW,readW,testA,readA -1400,-220.94,-1400,-220.58 -1399,-220.92,-1399,-220.52 -1398,-220.78,-1398,-220.37 -1397,-220.62,-1397,-220.25 -1396,-220.48,-1396,-220.09 ... How to run the validation? Link For validating the boards, we propose verifying that: each nA input can only yield a single output in mV in the ADC, at minimum gain (for each electrode). This means that for a test such as: control alpha test 1 full We should obtain an always positively growing value in the readW, readA channels. For this, we have to check that: \\delta[n] = readX[n]-readX[n-1] 0 \\delta[n] = readX[n]-readX[n-1]>0 If we plot all this results we see that they are normally over 0.1 for all the boards, so we use this value as a minimum threshold, instead of zero: \\delta[n] = readX[n]-readX[n-1] 0.1 \\delta[n] = readX[n]-readX[n-1]>0.1 Finally, this test is also valid for too high gains since once the signal is saturated the \\delta \\delta value is 0 (saturates in a flat plateau). .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Advanced setup"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/#advanced-development-setup","text":"","title":"Advanced development setup"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/#how-to-use-it","text":"Connect the board The alphaDelta board should be connected to the kit auxiliary groove connector and the tester board to the alphaDelta. In this way the kit will have acces to both boards writing values in tester board and reading them in the sensor board. The tester board should be connected between Electrodes A and W from the slot you want to test. Get the firmware You will need the latest version of SCK 2.0 Firmware. To enable tester board in firmware uncomment #define deltaTest in sckAux.h file compile and upload the firmware.","title":"How to use it?"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/#read-the-sensors","text":"read Alphadelta [wichSensor: temperature, humidity, 1A, 2A, 2A, 2W, 3A, 3W] SCK read alphadelta 1a AlphaDelta 1A: 8.22","title":"Read the sensors"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/#control-digital-potentiometers","text":"control alphadelta 1A set pot [value: 0-100,000] SCK control alphadelta 1a set pot 50000 AlphaDelta 1A: set pot 50000 Setting pot to: 50000 Ohms Actual value: 49803 Ohms","title":"Control digital potentiometers"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/#run-the-tests","text":"The tester board is enabled as a control command of Alphasense Delta sensors, so it must be called with the prefix control then the name of the sensor alpha (fuzzy match is supported) then the test keyword followed by the slot number we want to test: control alpha test 1 To complete the line we should select one of the two test modes: set followed by a nA value between -1400/+1400. This will instruct the tester board to output that current and verify the readings of the sensor. control alpha test set SCK control alpha test 1 set 500 AlphaDelta 1A: test 1 set 500 Setting test current to: 500 Tester Electrode W: 500 Alphadelta 1W: 78.87 Tester Electrode A: 500 Alphadelta 1A: 78.70 Testing finished! or full that will ouput a csv formated table with the values for both electrodes of the selected slot from -1400 nA to 1400 nA: control alpha test 1 full SCK control alpha test 1 full AlphaDelta 1A: test 1 full testW,readW,testA,readA -1400,-220.94,-1400,-220.58 -1399,-220.92,-1399,-220.52 -1398,-220.78,-1398,-220.37 -1397,-220.62,-1397,-220.25 -1396,-220.48,-1396,-220.09 ...","title":"Run the tests"},{"location":"Components/Gas Pro Sensor Board/guides/Advanced setup/#how-to-run-the-validation","text":"For validating the boards, we propose verifying that: each nA input can only yield a single output in mV in the ADC, at minimum gain (for each electrode). This means that for a test such as: control alpha test 1 full We should obtain an always positively growing value in the readW, readA channels. For this, we have to check that: \\delta[n] = readX[n]-readX[n-1] 0 \\delta[n] = readX[n]-readX[n-1]>0 If we plot all this results we see that they are normally over 0.1 for all the boards, so we use this value as a minimum threshold, instead of zero: \\delta[n] = readX[n]-readX[n-1] 0.1 \\delta[n] = readX[n]-readX[n-1]>0.1 Finally, this test is also valid for too high gains since once the signal is saturated the \\delta \\delta value is 0 (saturates in a flat plateau). .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"How to run the validation?"},{"location":"Components/PM Sensor Board/PM Sensor Board/","text":"PM Sensor Board Link The PM Sensor Board is based around Plantower PMS 5003 1 a digital particle concentration sensor that uses the Laser Scattering principle to obtain the number of suspended particles in the air. This includes a custom designed PCB with an MCU to provide I2C connectivity with the Data Board. The following characteristics have been considered for the sensor choice: Provides PM 2.5 and PM 10 measurements in ug/m\u00b3 Minimal distinguishable particle diameter of 0.3 am No need for external ADC or linearization circuits. The sensor includes an internal MCU capable of dealing with all the light emitting and sensing processing. All the communication is done using the I2C protocol. A dedicated driver has been designed for this. Ultra Low Cost when compared to other commercial solutions with similar performance Low Power The selection is based on the academic references selected above. For a complete Low-Cost Sensors Evaluation see ISCAPE D1.5 Summary of air quality sensors and recommendations for application and the subsequent publication (Rai et al. 2017) . Compliance with the NAAQS (US National Ambient Air Quality Standards) is based on 24-h PM mass concentrations [...] Both of the FEM instruments correlate with the 24-h PM2.5 mass measurements with an R2 > 0.99. The PMS PM2.5 concentrations are also well correlated with the 24-h mass average concentration (R2 > 0.88), which is slightly better than the GRIMM research-grade instrument (R2 1\u20444 0.7.). South Coast Air Quality Management District (SCAQMD) recently published preliminary comparisons of the PM2.5 measurements from three PMS 1003s and two FEMs, with high correlations (R2 > 0.9) over a 2-month period. This study demonstrated that the PMS 1003/3003 correlates well with FRMs, FEMs, and research-grade instrumentation under ambient conditions during a series of cold-air pools and in a wind-tunnel environment. Under ambient conditions, this sensor correlates better with an FRM than other low-cost sensors in similar studies. [...] these sensors are a promising tool for identifying relative increases or decreases in PM concentration, complementing sparsely distributed monitoring stations and for assessing and minimizing exposure to PM (Kelly et al. 2017) . PLANTOWER PMS5003 Technical Datasheet https://aqicn.org/air/view/sensor/spec/pms5003.pdf","title":"PM Sensor Board"},{"location":"Components/PM Sensor Board/PM Sensor Board/#pm-sensor-board","text":"The PM Sensor Board is based around Plantower PMS 5003 1 a digital particle concentration sensor that uses the Laser Scattering principle to obtain the number of suspended particles in the air. This includes a custom designed PCB with an MCU to provide I2C connectivity with the Data Board. The following characteristics have been considered for the sensor choice: Provides PM 2.5 and PM 10 measurements in ug/m\u00b3 Minimal distinguishable particle diameter of 0.3 am No need for external ADC or linearization circuits. The sensor includes an internal MCU capable of dealing with all the light emitting and sensing processing. All the communication is done using the I2C protocol. A dedicated driver has been designed for this. Ultra Low Cost when compared to other commercial solutions with similar performance Low Power The selection is based on the academic references selected above. For a complete Low-Cost Sensors Evaluation see ISCAPE D1.5 Summary of air quality sensors and recommendations for application and the subsequent publication (Rai et al. 2017) . Compliance with the NAAQS (US National Ambient Air Quality Standards) is based on 24-h PM mass concentrations [...] Both of the FEM instruments correlate with the 24-h PM2.5 mass measurements with an R2 > 0.99. The PMS PM2.5 concentrations are also well correlated with the 24-h mass average concentration (R2 > 0.88), which is slightly better than the GRIMM research-grade instrument (R2 1\u20444 0.7.). South Coast Air Quality Management District (SCAQMD) recently published preliminary comparisons of the PM2.5 measurements from three PMS 1003s and two FEMs, with high correlations (R2 > 0.9) over a 2-month period. This study demonstrated that the PMS 1003/3003 correlates well with FRMs, FEMs, and research-grade instrumentation under ambient conditions during a series of cold-air pools and in a wind-tunnel environment. Under ambient conditions, this sensor correlates better with an FRM than other low-cost sensors in similar studies. [...] these sensors are a promising tool for identifying relative increases or decreases in PM concentration, complementing sparsely distributed monitoring stations and for assessing and minimizing exposure to PM (Kelly et al. 2017) . PLANTOWER PMS5003 Technical Datasheet https://aqicn.org/air/view/sensor/spec/pms5003.pdf","title":"PM Sensor Board"},{"location":"Components/PM Sensor Board/Plantower PMS/","text":"Plantower PMS Link ON/OFF Correlation Tests Link The purpose of this test is to determine the time needed to obtain representative readings in a one-shot mode. For this, two kits V2.0 are used with several PM Boards and one PMS5003 connected to each of them: KIT1: Named OSCAR + 1xPMS5003 KIT2: Named TEST7 + 1xPMS5003 One of them is set in a continuous operation mode, while the other operates in on/off mode with different on-times. TEST : - 2018-07_INT_PMS5003_ON_OFF_LOW_PARTICLE - 2018-07_INT_PMS5003_ON_OFF_MID_PARTICLE Results Link 2018-07_INT_PMS5003_ON_OFF_MID_PARTICLE 30min logging with a candle under the sensors. Initial 3min in stabilised conditions: 2018-07_INT_PMS5003_ON_OFF_LOW_PARTICLE 30min logging with normal ambient air. Initial 3min in stabilised conditions Target errors Link The initial 3min are used to determine target errors on the stabilisation phase. For each dataset, they are below: High PN Average Std Deviation Relative_error_PM 1.0 0.15 0.17 Relative_error_PM 2.5 -0.02 0.16 Relative_error_PM 10.0 -0.10 0.20 Low PN Average Std Deviation Relative_error_PM 1.0 0.07 0.07 Relative_error_PM 2.5 0.01 0.07 Relative_error_PM 10.0 0.04 0.08 Measurement iterations Link The measurement iterations are plotted below, versus the wake up time: Assuming a confidence interval of 95%, the target value for the measurement mean is (\\mu - \\sigma \\mu \\mu + \\sigma) (\\mu - \\sigma<\\mu<\\mu + \\sigma) and the values for each period are extracted from the plots above: Target Time Low PN High PN PM 1.0 15s 4s PM 2.5 15s 5s PM 10.0 12s 5s Conclusion Link Although the PMS has a faster response at high PN, the variability and the measurement averages are higher as well. This can also be due to the measurement method uncertainty For low PN, the time required for stabilisation is between 12 and 15s, to achieve a level of 95% confidence with respect to that of stabilised levels The target time should be 15s, although lower values could be considered down to 12s if there are battery concerns 7003 vs 5003 Correlation Tests Link Tests were conducted over two weeks in Barcelona in order to compare both, PlanTower PMS7003 and PMS5003. Results are shown before for normal urban environment levels of exposure: :::warning Include graph ::: Average Level RMSE R2 PM 1.0 13.89 2.34 0.90 PM 2.5 19.40 3.78 0.88 PM 10.0 20.49 0.85 4.43 ## 7003 vs 5003 Power consumption tests Link PMS7003 Link Datasheet ![]( https://i.imgur.com/rfQGDPW.jpg =400x) (Check the adaptor position) Power consumption Link Power consmuption is around 50mA in average with peaks of 100mA PMS5003 Link ![]( https://i.imgur.com/i0CXOm8.jpg =400x) Power consumption! Link Power consumption is around 50mA in average with peaks of 94mA","title":"Plantower PMS"},{"location":"Components/PM Sensor Board/Plantower PMS/#plantower-pms","text":"","title":"Plantower PMS"},{"location":"Components/PM Sensor Board/Plantower PMS/#onoff-correlation-tests","text":"The purpose of this test is to determine the time needed to obtain representative readings in a one-shot mode. For this, two kits V2.0 are used with several PM Boards and one PMS5003 connected to each of them: KIT1: Named OSCAR + 1xPMS5003 KIT2: Named TEST7 + 1xPMS5003 One of them is set in a continuous operation mode, while the other operates in on/off mode with different on-times. TEST : - 2018-07_INT_PMS5003_ON_OFF_LOW_PARTICLE - 2018-07_INT_PMS5003_ON_OFF_MID_PARTICLE","title":"ON/OFF Correlation Tests"},{"location":"Components/PM Sensor Board/Plantower PMS/#results","text":"2018-07_INT_PMS5003_ON_OFF_MID_PARTICLE 30min logging with a candle under the sensors. Initial 3min in stabilised conditions: 2018-07_INT_PMS5003_ON_OFF_LOW_PARTICLE 30min logging with normal ambient air. Initial 3min in stabilised conditions","title":"Results"},{"location":"Components/PM Sensor Board/Plantower PMS/#target-errors","text":"The initial 3min are used to determine target errors on the stabilisation phase. For each dataset, they are below: High PN Average Std Deviation Relative_error_PM 1.0 0.15 0.17 Relative_error_PM 2.5 -0.02 0.16 Relative_error_PM 10.0 -0.10 0.20 Low PN Average Std Deviation Relative_error_PM 1.0 0.07 0.07 Relative_error_PM 2.5 0.01 0.07 Relative_error_PM 10.0 0.04 0.08","title":"Target errors"},{"location":"Components/PM Sensor Board/Plantower PMS/#measurement-iterations","text":"The measurement iterations are plotted below, versus the wake up time: Assuming a confidence interval of 95%, the target value for the measurement mean is (\\mu - \\sigma \\mu \\mu + \\sigma) (\\mu - \\sigma<\\mu<\\mu + \\sigma) and the values for each period are extracted from the plots above: Target Time Low PN High PN PM 1.0 15s 4s PM 2.5 15s 5s PM 10.0 12s 5s","title":"Measurement iterations"},{"location":"Components/PM Sensor Board/Plantower PMS/#conclusion","text":"Although the PMS has a faster response at high PN, the variability and the measurement averages are higher as well. This can also be due to the measurement method uncertainty For low PN, the time required for stabilisation is between 12 and 15s, to achieve a level of 95% confidence with respect to that of stabilised levels The target time should be 15s, although lower values could be considered down to 12s if there are battery concerns","title":"Conclusion"},{"location":"Components/PM Sensor Board/Plantower PMS/#7003-vs-5003-correlation-tests","text":"Tests were conducted over two weeks in Barcelona in order to compare both, PlanTower PMS7003 and PMS5003. Results are shown before for normal urban environment levels of exposure: :::warning Include graph ::: Average Level RMSE R2 PM 1.0 13.89 2.34 0.90 PM 2.5 19.40 3.78 0.88 PM 10.0 20.49 0.85 4.43","title":"7003 vs 5003 Correlation Tests"},{"location":"Components/PM Sensor Board/Plantower PMS/#7003-vs-5003-power-consumption-tests","text":"","title":"## 7003 vs 5003 Power consumption tests"},{"location":"Components/PM Sensor Board/Plantower PMS/#pms7003","text":"Datasheet ![]( https://i.imgur.com/rfQGDPW.jpg =400x) (Check the adaptor position)","title":"PMS7003"},{"location":"Components/PM Sensor Board/Plantower PMS/#power-consumption","text":"Power consmuption is around 50mA in average with peaks of 100mA","title":"Power consumption"},{"location":"Components/PM Sensor Board/Plantower PMS/#pms5003","text":"![]( https://i.imgur.com/i0CXOm8.jpg =400x)","title":"PMS5003"},{"location":"Components/PM Sensor Board/Plantower PMS/#power-consumption_1","text":"Power consumption is around 50mA in average with peaks of 94mA","title":"Power consumption!"},{"location":"Components/Urban Sensor Board/Audio/","text":"Inside the Noise Sensor Link Basic Concepts and theory Link Basics of MEMs I2S Microphone Link The new Smart Citizen Kit 2.0 comes with a digital MEMs I2S microphone . There is a wide range of possibilities in the market, and our pick was the INVENSENSE (now TDK) ICS43432 : a tiny digital MEMs microphone with I2S output. There is an extensive documentation at TDK's website coming from the former and we would recommend to review the nicely put documents for those interested in the topic. Image credit: Invensense ICS43432 To begin with, we'll talk about the microphone itself. The MEMs microphone comes with a transducer element which converts the sound pressure into electric signals. The sound pressure reaches the transducer through a hole drilled in the package and the transducer's signal is sent to an ADC which provides with a signal which can be pulse density modulated (PDM) or in I2S format. Since the ADC is already in the microphone, we have an all-digital audio capture path to the processor and it\u2019s less likely to pick up interferences from other RF, such as the WiFi, for example. The I2S has the advantage of a decimated output, and since the SAMD21 has an I2S port, this allows us to connect it directly to the microcontroller with no CODEC needed to decode the audio data. Additionally, there is a bandpass filter, which eliminates DC and low frequency components (i.e. at fs = 48kHz, the filter has -3dB corner at 3,7Hz) and high frequencies at 0,5\u00b7fs (-3dB cutoff). Both specifications are important to consider when analysing the data and discarding unusable frequencies. The microphone acoustic response has to be considered as well, with subsequent equalisation in the data treatment in order. We will review these points on dedicated sections. Image credit: ICS43432 Datasheet - TDK Invensense I2S Protocol Link The I2S protocol ( Inter-IC-Sound ) is a serial bus interface which consists of: a bit clock line or Serial Clock ( SCK ), a word clock line or Word Select ( WS ) and a multiplexed Serial Data line ( SD ). The SD is transmitted in two\u2019s complement with MSB first, with a 24-bit word length in the microphone we picked. The WS is used to indicate which channel is being transmitted (left or right). In the case of the ICS43432, there is an additional pin which corresponds with the L/R, allowing to use the left or right channel to output the signal and the use of stereo configurations. When set to left, the data follows WS\u2019s falling edge and when set to right, the WS\u2019s rising edge. For the SAMD21 processor, there is a well developed I2S library that will take control of this configuration. Image credit: I2S bus specification - Philips Semiconductors To finalise, we would like to highlight that the SD line of the I2S protocol is quite delicate at high frequencies and it is largely affected by noise in the path the line follows. If you want to try this at home (for example with an Arduino Zero and an I2S microphone like this one , it is important not to use cables in this line and to connect the output pin directly to the board, to avoid having interfaces throughout the SD line. One interesting way to see this is that every time the line sees a medium change, part of it will be reflected and part will be transmitted, just like any other wave. This means that introducing a cable for the line will provoke at least three medium changes and a potential signal quality loss much higher than a direct connection. Apart from this point, the I2S connection is pretty straight forward and it is reasonably easy to retrieve data from the line and start playing around with some FFT analysis. Basics of weighting and human hearing Link The world of acoustics and signal processing for audio analysis is worth several book-length discussions. We might as well try to give an insight of our intentions within this world since we introduced ourselves in it by picking a digital microphone with a quite nice range of capabilities. The very first thing we would like to do is to be able to perform weighting on the buffer we receive from the microphone through the I2S. To explain a bit further on what weighting is, it is no more than a transformation from the real-world sound pressure levels (SPL) travelling around in the air to what our ears can perceive. Just that. Image credit: Human hearing - DSP Guide There are several studies and models of what we actually perceive and depending on them, we have several types of the so called weighting functions . Some of them have been standarised for the purpose of SPL measurement, finding different types like A-weighting (the most common one), B-weighting, D (both in disuse) and others. In the frequency domain, they look like this: Image credit: A-weighting - Wikipedia This means that, even if the are high sound pressure levels floating around in the air, we might not hear them just because of the frequency they are at. Normally humans can hear from something around 20Hz to 20kHz, although most adults might not hear anything in out-of-laboratory conditions above 15kHz. Some animals though, can perceive a great range of frequencies , and for example mouses can hear up to 80kHz! So, now we know what this all is about, the I2S microphone is going to help us understand better how beluga whales communicate among themselves ... But also! The I2S microphone is interesting in order to understand sources of urban noise pollution since it provides us with a raw SPL buffer we can play with. As well, we can obtain dBA levels (SPL with a-weighting correction) by processing this buffer in several ways and calculate the RMS level of the resulting signal. In the Part II we will go through the mathematics of the signal processing itself and talk a bit about FFT, signal filtering and some other geeky stuff! RMS and FFT algorithm simplified Link In this paragraph we'll continue with some bits and pieces about acoustics and signal processing we started talking about in section 1.2. We are going to talk about the mathematics behind these applications and how we'll use them in the signal processing for obtaining our weighting for the SCK. In the previous section we introduced the concept of weighting and our interest on calculating the sound pressure level in different scales. Normally, SPL is expressed in RMS levels, or root mean square . This is nothing more than a modified arithmetic average, where each term of the expression is added in its square form. Therefore, to keep the same units, we then take the square root of all the average and we have: x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} The interesting thing about the RMS level, is that it expresses an average signal level throughout the signal, and it actually relates to the peak level of sinusoid wave by \u221a2. Therefore, it is a very interesting way to express average levels for signals and for that reason, it's the common standard used. Image credit: Sine wave parameters- Wikipedia Now that we know how to calculate the RMS level of our signal, let's go into something more interesting: how do we actually perform the weighting? Well, if you recall the previous section, when we talked about hearing, we were talking about the different hearing capabilities in terms of frequencies (in humans, mouses, beluga whales... ). Therefore, something interesting to know about our signal is its frequency content , so that we are able to perform the weighting. For this purpose, we have the FFT algorithm , which we won't tell you is easy, but we'll try to put it simply here. So FFT stands for Fast Fourier Transform , and it's an algorithm capable of performing a Fourier Transform in a simplified and efficient way (that's where the fast comes in). What it does in a detailed mathematical way is something quite complicated and we don't want to bore you and ourselves with the details; but being practical, it is basically a convertion between the signal in time domain and its frequency domain components. Interestingly, this process is reversible and the other way around it is called IFFT ( I for Inverse , obviously...). Image credit: Smart Citizen In the example above, things in the time domain get a bit messy, but in the frequency domain we can clearly see the composition of two sine waves of the same amplitude of roughly 40Hz and 120Hz. The FFT algorithm hence helps us digest the information contained in a signal in a more visually understandable way. We will cover more details about the process and it's implementation in future sections. For this introduction, let's move on to what we actually want to do: the much anticipated weighting . At this point, our task is fairly easy: we just have to multiply both: our signal in the frequency domain with the weighting function and that's it! If we have a look at the figure below, in the time and frequency domain, the signals look like this: Image credit: Smart Citizen This example shows how our ears are only capable of perceiving the signal in red, but the actual sound components are in blue -- being much higher in the amplitude spectrum. If you want to get into the thick of it, here you have the actual implementation in Matlab of the A-weighting function that we'll use in the SCK V2.0. And finally, to close, let's take a look at the whole chain of processing, where we will continue in future sections: st= start: Signal acquisition e= end: RMS calculation op= operation: Windowing op2= operation: FFT op3= operation: Spectrum Normalisation op4= operation: Equalisation op5= operation: A-weighting st- op- op2- op3- op4- op5- e Image credit: Smart Citizen This is the whole signal treatment process we use for the I2S microphone ICS43432. We will have a look at windowing and its use in future sections, as well as its implementation in the SAMD21 Cortex M0+ for our firmware. NB NB : Being mathematical purist, there is yet another possibility for this procedure using convolution in time domain, which we will cover in future sections. Pre/post processing: signal windowing and equalisation Link Signal windowing Link In this section we are going to describe how we have to pre-post process our signals in order to obtain the results in the manner we are expecting. These are very important steps in our processing chain, since the FFT algorithms -or convolution FIR Filters- won't be able to cope with our system's limitations. These limitations might not be obvious at the beginning, but you really don't want to ignore them while designing your system, since they'll invalidate many of your measurements. If this sounds greek to you, consider reading Part I and Part II in this forum before continuing with this post. The very first of these limitations, is the fact that our microphone is, in fact, taking discrete samples of the ambient noise surrounding it. This means that, from the very beginning, we are missing some pieces of information and we will never be able to process them. But it's OK! For the purpose of our analysis, we don't need to sample continuosly and this situation is easily bypassed. Image credit: NUTAQ - Signal processing Discrete sampling has two main consequences for us: the first one is that we are taking samples once every 1/f_s 1/f_s , where f_s f_s is the sampling frequency. Normal audio systems sample at 44,1kHz, but this number might vary depending on the application. If you remember this chart , you might be wondering why we have to sample at such a high frequency. Image credit: Signal acquisition - Adinstruments This is due to the Nyquist sampling criterion , which states that at a minimum, we have to sample at double the maximum frequency we want to analyse . Since humans hearing has a limited frequency range that goes up to 20kHz in some cases, it is reasonable to use something around 40kHz. With this, the Nyquist criterion solves the so called aliasing problem , in which several sinusoid signals could fit the same sampling pattern if the number of samples is too low: Image credit: Wikipedia - Aliasing The second of the discrete sampling limitation comes from the amount of samples we are able to handle at a time . Normally, this is due to memory limitations in the RAM, although we'll see in the future where to allocate them. Nevertheless, it is not useful to handle buffers that are too long , since at some point, the increase of buffer length does not provide any additional information. Buffer length requirements in our case come from the minimum frequency we want to sample, which is around 20Hz . Doing some quick math, we need 0,05s worth of sample buffer, which at 44,1kHz is roughly 2200 samples . This is equally too many samples, considering that each could be allocated as a uint8_t , taking up to 16kB just for the raw buffer! This is where signal windowing kicks in. Imagine that we have a very-low-frequency sinusoid and that we are not able to sample completely the whole sine wave, due to buffer limitations. By definition, our system is assuming that the discrete samples we measure are constantly being repeated in the environment, one after the other: Image credit: Smart Citizen When we take the FFT of this signal, we see undesired frequencies that make our frequency spectrum invalid. This is called spectral leakage and it's mitigated by the use of windows (math funcions, not the OS). These windows operate by smoothing the edges of our measurement and preventing the jumps in the signal helping the FFT algorithm to properly analyse the signals. Image credit: Smart Citizen With the use of signal windowing , more specifically with the use of the hamming window , we are then able to reduce the amount of samples needed to roughly 1000 samples. Now we are down to 50% of the memory allocation needed without windowing . You can see the effect on the RMS relative errors in the image below, where the trend of the Hann (another common window) and the Hamming treated buffers, with respect to the frequency tends to stabilise much more quickly than the raw buffers. Image credit: Smart Citizen There is a wide range of functions to use and the decision depends on your application. For audio applications, the most common ones are the Hann, Hamming, and Blackmann. We chose the Hamming because it's trend is to stabilise a bit more quickly than the rest, although the differencies are minimal. For your reference, there is a very interesting description of all these phenomena in this article , where you'll find a more mathematical approach. Equalisation Link :::info Talk about the microphone response and how to correct it. ::: 1.5 Filtering and convolution Link In this section we are going to talk about a different approach to the FFT Analysis we have seen in previous sections. What if we don't like the FFT algorithm and we only want to obtain a dBA or dBC results? There is a fairly simple solution to this problem, and it's called filtering . Filtering is a very common technique in signal acquisition that eliminates some frequency components of the raw signal. Examples of filters you very likely have heard of are low-pass, high-pass and band-pass filters . These only let pass the low, high or a defined interval range of frequencies, mostly cancelling out the rest. In the frequency domain, they basicly multiply the spectrum of our signal with its filter spectrum. Exactly what we have done with the weighting. Image credit: Norwegian Creations First, it is important to get a glimpse of the math behind the filters and why they do their magic. And for this, the most important thing we need to know is called convolution . Image credit: River Trail For the purpose of audio analysis , let's consider we have an input vector, a filter kernel and an output vector. Our input vector can be the raw audio signal we have captured, being the output signal the result of the convolution operation. The filter kernel is the characteristic of the filter and will be, for this example, a one dimension array. What the convolution operation is going to do, in a very very very simplified way , is to sweep through the input sample and multiply each component with it's corresponding filter kernel component, then sum the results and put them in the corresponding output sample. If we put some math notation and call x[n] to the input vector, h[n] to the filter kernel and y[n] to the output vector, it all ends up looking like this: Image credit: DSP Guide Now, the most interesting thing of all this theory is that convolution and multiplication are equivalent operations when we jump from the time to the frequency domain . This means that multiplication in time domain equals to convolution in frequency domain, and more importantly for us, convolution in the time domain, equals to multiplication in the frequency domain . To sum up, the relationship between both domains would look like: Image credit: SmartCitizen Therefore, what we could do is to define a custom filter function and apply it via convolution to our input buffer. This is basically a FIR filter , where FIR stands for Finite Impulse Response . There is another type of filters called IIR , where IIR stands for Infinite impulse response . The difference between them is that FIR uses convolution and IIR uses recursion . The concept of recursion is very simple and it's nothing else than a simplification of the convolution, given that in the convolution algorithm, there are many recursive operations that we repeat over an over and we can implement into a smarter algorithm. Normally, IIR filters are more efficient in terms of speed and memory , but we need to specify a series of coefficients, and it's tricky, if not impossible, to create a custom filter response. Image credit: DSP Guide So finally! How can we avoid using the FFT algorithm to extract the desired frequency content of a signal and recreate the signal without it? Sounds complex, but now we know that we can use a FIR filter , with a custom frequency response and apply it via convolution to our input buffer. As simple as that. The custom frequency response, with the proper math, can be optained by applying the IFFT algorithm to the desired frequency response (for example, the A-weighting function). You can have a look to this example if you want to create a custom filter function in octave , with A or C weighting and implement it to a FIR filter in C++. Image credit: SmartCitizen Also, if you are really into it, you can read more about convolution and other DSP topics, we would recommended to go through this fantastic guide . AFSK Analyser Link In this section we are going to talk about a new feature we are planning to introduce in the upcoming version of the SCK: a FSK communication protocol via Audio (A-FSK). You might have read about this technique and it\u2019s usage in the Amazon Dash configuration process, and on the post today we are going to describe very briefly the work in progress for this feature. So! FSK stands for Frequency Shift Keying, which is a form of transmission through frequency variations on the carrying waveforms. It\u2019s major counterpart is the so called ASK, or Amplitude Shift Keying, in which the transmission is carried out via amplitude variations. A very simple form of ASK is OOK, which stands for On-Off-Keying, in which the amplitude of the carrier wave oscillates between a value and nothingness: Image credit: Electric Stack Exchange As in many other situations, there is a trade off between the options on the table: ASK or FSK? Maybe another one? The main disadvantage of ASK it is said to have a higher probability of error with respect to FSK, since noise interference affects amplitude of the transmitted wave. FSK, on the other hand, it is said to have a lower bandwidth efficiency. However, since we have talked about FFT quite a lot now, we thought FSK would be our best bet and also, because maybe bandwidth is not such a big deal after all as we can see below. Then, the idea is to implement an algorithm that is able to identify if the sound transmitted from an emitter (i.e. a smartphone) contains a series of reference frequencies in certain known spots. Following this principle, our aim is to transmit a byte per sound wave, hence, in a sound wave containing up to 8 possible carrier frequencies that might or not be activated. The activation (or not) of these frequencies in the analysed spectrum will yield a 1 or a 0, that we can use on a bit mask and extract 8-bit ASCII characters codes : Image credit: Martin Melhus The emitter could be based on the Web Audio API, as the example from Martin Melhus above from his project on a Web Audio Modem. Finally, the receiver would be our beloved I2S Mems microphone that we have been talking about for so long now, doing a FFT algorithm and detecting the peaks in it, identifying the carrier frequencies activation. Configuration via sound Link :::info * Reverse engineering the amazon dash * MATLAB CODE * Web-based modem * ASK - Amplitude Shift Keying * DSP fundamentals * Hilbert transform ::: Firmware implementation Link SAMD21 Cortex M0+ implementation Link Two libraries: AudioI2S Base library, intented to be generic purpose audio analysis library for an I2S Microphone on the SAMD21 with: FFT Analysis FIR Analysis Custom window selection Custom weighting function selection Custom buffer size and custom fft bin size (in case of FFT analyser) Custom equalisation Octave auto generation of .h files for coefficients and so on smartcitizen-kit-audio Library intented for firmware implementation in the SmartCitizen kit 2.0, with a better usage of memory and SCK related functionalities: FFT analysis Selection of A or C weighting through LUT Two user cases: General audio analysis (sensorRead) with fixed buffer size and fixed FFT bins size (fs = 44,1kHz) Audio Communication with FSK - with information transfer via audio","title":"Audio"},{"location":"Components/Urban Sensor Board/Audio/#inside-the-noise-sensor","text":"","title":"Inside the Noise Sensor"},{"location":"Components/Urban Sensor Board/Audio/#basic-concepts-and-theory","text":"","title":"Basic Concepts and theory"},{"location":"Components/Urban Sensor Board/Audio/#basics-of-mems-i2s-microphone","text":"The new Smart Citizen Kit 2.0 comes with a digital MEMs I2S microphone . There is a wide range of possibilities in the market, and our pick was the INVENSENSE (now TDK) ICS43432 : a tiny digital MEMs microphone with I2S output. There is an extensive documentation at TDK's website coming from the former and we would recommend to review the nicely put documents for those interested in the topic. Image credit: Invensense ICS43432 To begin with, we'll talk about the microphone itself. The MEMs microphone comes with a transducer element which converts the sound pressure into electric signals. The sound pressure reaches the transducer through a hole drilled in the package and the transducer's signal is sent to an ADC which provides with a signal which can be pulse density modulated (PDM) or in I2S format. Since the ADC is already in the microphone, we have an all-digital audio capture path to the processor and it\u2019s less likely to pick up interferences from other RF, such as the WiFi, for example. The I2S has the advantage of a decimated output, and since the SAMD21 has an I2S port, this allows us to connect it directly to the microcontroller with no CODEC needed to decode the audio data. Additionally, there is a bandpass filter, which eliminates DC and low frequency components (i.e. at fs = 48kHz, the filter has -3dB corner at 3,7Hz) and high frequencies at 0,5\u00b7fs (-3dB cutoff). Both specifications are important to consider when analysing the data and discarding unusable frequencies. The microphone acoustic response has to be considered as well, with subsequent equalisation in the data treatment in order. We will review these points on dedicated sections. Image credit: ICS43432 Datasheet - TDK Invensense","title":"Basics of MEMs I2S Microphone"},{"location":"Components/Urban Sensor Board/Audio/#i2s-protocol","text":"The I2S protocol ( Inter-IC-Sound ) is a serial bus interface which consists of: a bit clock line or Serial Clock ( SCK ), a word clock line or Word Select ( WS ) and a multiplexed Serial Data line ( SD ). The SD is transmitted in two\u2019s complement with MSB first, with a 24-bit word length in the microphone we picked. The WS is used to indicate which channel is being transmitted (left or right). In the case of the ICS43432, there is an additional pin which corresponds with the L/R, allowing to use the left or right channel to output the signal and the use of stereo configurations. When set to left, the data follows WS\u2019s falling edge and when set to right, the WS\u2019s rising edge. For the SAMD21 processor, there is a well developed I2S library that will take control of this configuration. Image credit: I2S bus specification - Philips Semiconductors To finalise, we would like to highlight that the SD line of the I2S protocol is quite delicate at high frequencies and it is largely affected by noise in the path the line follows. If you want to try this at home (for example with an Arduino Zero and an I2S microphone like this one , it is important not to use cables in this line and to connect the output pin directly to the board, to avoid having interfaces throughout the SD line. One interesting way to see this is that every time the line sees a medium change, part of it will be reflected and part will be transmitted, just like any other wave. This means that introducing a cable for the line will provoke at least three medium changes and a potential signal quality loss much higher than a direct connection. Apart from this point, the I2S connection is pretty straight forward and it is reasonably easy to retrieve data from the line and start playing around with some FFT analysis.","title":"I2S Protocol"},{"location":"Components/Urban Sensor Board/Audio/#basics-of-weighting-and-human-hearing","text":"The world of acoustics and signal processing for audio analysis is worth several book-length discussions. We might as well try to give an insight of our intentions within this world since we introduced ourselves in it by picking a digital microphone with a quite nice range of capabilities. The very first thing we would like to do is to be able to perform weighting on the buffer we receive from the microphone through the I2S. To explain a bit further on what weighting is, it is no more than a transformation from the real-world sound pressure levels (SPL) travelling around in the air to what our ears can perceive. Just that. Image credit: Human hearing - DSP Guide There are several studies and models of what we actually perceive and depending on them, we have several types of the so called weighting functions . Some of them have been standarised for the purpose of SPL measurement, finding different types like A-weighting (the most common one), B-weighting, D (both in disuse) and others. In the frequency domain, they look like this: Image credit: A-weighting - Wikipedia This means that, even if the are high sound pressure levels floating around in the air, we might not hear them just because of the frequency they are at. Normally humans can hear from something around 20Hz to 20kHz, although most adults might not hear anything in out-of-laboratory conditions above 15kHz. Some animals though, can perceive a great range of frequencies , and for example mouses can hear up to 80kHz! So, now we know what this all is about, the I2S microphone is going to help us understand better how beluga whales communicate among themselves ... But also! The I2S microphone is interesting in order to understand sources of urban noise pollution since it provides us with a raw SPL buffer we can play with. As well, we can obtain dBA levels (SPL with a-weighting correction) by processing this buffer in several ways and calculate the RMS level of the resulting signal. In the Part II we will go through the mathematics of the signal processing itself and talk a bit about FFT, signal filtering and some other geeky stuff!","title":"Basics of weighting and human hearing"},{"location":"Components/Urban Sensor Board/Audio/#rms-and-fft-algorithm-simplified","text":"In this paragraph we'll continue with some bits and pieces about acoustics and signal processing we started talking about in section 1.2. We are going to talk about the mathematics behind these applications and how we'll use them in the signal processing for obtaining our weighting for the SCK. In the previous section we introduced the concept of weighting and our interest on calculating the sound pressure level in different scales. Normally, SPL is expressed in RMS levels, or root mean square . This is nothing more than a modified arithmetic average, where each term of the expression is added in its square form. Therefore, to keep the same units, we then take the square root of all the average and we have: x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} The interesting thing about the RMS level, is that it expresses an average signal level throughout the signal, and it actually relates to the peak level of sinusoid wave by \u221a2. Therefore, it is a very interesting way to express average levels for signals and for that reason, it's the common standard used. Image credit: Sine wave parameters- Wikipedia Now that we know how to calculate the RMS level of our signal, let's go into something more interesting: how do we actually perform the weighting? Well, if you recall the previous section, when we talked about hearing, we were talking about the different hearing capabilities in terms of frequencies (in humans, mouses, beluga whales... ). Therefore, something interesting to know about our signal is its frequency content , so that we are able to perform the weighting. For this purpose, we have the FFT algorithm , which we won't tell you is easy, but we'll try to put it simply here. So FFT stands for Fast Fourier Transform , and it's an algorithm capable of performing a Fourier Transform in a simplified and efficient way (that's where the fast comes in). What it does in a detailed mathematical way is something quite complicated and we don't want to bore you and ourselves with the details; but being practical, it is basically a convertion between the signal in time domain and its frequency domain components. Interestingly, this process is reversible and the other way around it is called IFFT ( I for Inverse , obviously...). Image credit: Smart Citizen In the example above, things in the time domain get a bit messy, but in the frequency domain we can clearly see the composition of two sine waves of the same amplitude of roughly 40Hz and 120Hz. The FFT algorithm hence helps us digest the information contained in a signal in a more visually understandable way. We will cover more details about the process and it's implementation in future sections. For this introduction, let's move on to what we actually want to do: the much anticipated weighting . At this point, our task is fairly easy: we just have to multiply both: our signal in the frequency domain with the weighting function and that's it! If we have a look at the figure below, in the time and frequency domain, the signals look like this: Image credit: Smart Citizen This example shows how our ears are only capable of perceiving the signal in red, but the actual sound components are in blue -- being much higher in the amplitude spectrum. If you want to get into the thick of it, here you have the actual implementation in Matlab of the A-weighting function that we'll use in the SCK V2.0. And finally, to close, let's take a look at the whole chain of processing, where we will continue in future sections: st= start: Signal acquisition e= end: RMS calculation op= operation: Windowing op2= operation: FFT op3= operation: Spectrum Normalisation op4= operation: Equalisation op5= operation: A-weighting st- op- op2- op3- op4- op5- e Image credit: Smart Citizen This is the whole signal treatment process we use for the I2S microphone ICS43432. We will have a look at windowing and its use in future sections, as well as its implementation in the SAMD21 Cortex M0+ for our firmware. NB NB : Being mathematical purist, there is yet another possibility for this procedure using convolution in time domain, which we will cover in future sections.","title":"RMS and FFT algorithm simplified"},{"location":"Components/Urban Sensor Board/Audio/#prepost-processing-signal-windowing-and-equalisation","text":"","title":"Pre/post processing: signal windowing and equalisation"},{"location":"Components/Urban Sensor Board/Audio/#signal-windowing","text":"In this section we are going to describe how we have to pre-post process our signals in order to obtain the results in the manner we are expecting. These are very important steps in our processing chain, since the FFT algorithms -or convolution FIR Filters- won't be able to cope with our system's limitations. These limitations might not be obvious at the beginning, but you really don't want to ignore them while designing your system, since they'll invalidate many of your measurements. If this sounds greek to you, consider reading Part I and Part II in this forum before continuing with this post. The very first of these limitations, is the fact that our microphone is, in fact, taking discrete samples of the ambient noise surrounding it. This means that, from the very beginning, we are missing some pieces of information and we will never be able to process them. But it's OK! For the purpose of our analysis, we don't need to sample continuosly and this situation is easily bypassed. Image credit: NUTAQ - Signal processing Discrete sampling has two main consequences for us: the first one is that we are taking samples once every 1/f_s 1/f_s , where f_s f_s is the sampling frequency. Normal audio systems sample at 44,1kHz, but this number might vary depending on the application. If you remember this chart , you might be wondering why we have to sample at such a high frequency. Image credit: Signal acquisition - Adinstruments This is due to the Nyquist sampling criterion , which states that at a minimum, we have to sample at double the maximum frequency we want to analyse . Since humans hearing has a limited frequency range that goes up to 20kHz in some cases, it is reasonable to use something around 40kHz. With this, the Nyquist criterion solves the so called aliasing problem , in which several sinusoid signals could fit the same sampling pattern if the number of samples is too low: Image credit: Wikipedia - Aliasing The second of the discrete sampling limitation comes from the amount of samples we are able to handle at a time . Normally, this is due to memory limitations in the RAM, although we'll see in the future where to allocate them. Nevertheless, it is not useful to handle buffers that are too long , since at some point, the increase of buffer length does not provide any additional information. Buffer length requirements in our case come from the minimum frequency we want to sample, which is around 20Hz . Doing some quick math, we need 0,05s worth of sample buffer, which at 44,1kHz is roughly 2200 samples . This is equally too many samples, considering that each could be allocated as a uint8_t , taking up to 16kB just for the raw buffer! This is where signal windowing kicks in. Imagine that we have a very-low-frequency sinusoid and that we are not able to sample completely the whole sine wave, due to buffer limitations. By definition, our system is assuming that the discrete samples we measure are constantly being repeated in the environment, one after the other: Image credit: Smart Citizen When we take the FFT of this signal, we see undesired frequencies that make our frequency spectrum invalid. This is called spectral leakage and it's mitigated by the use of windows (math funcions, not the OS). These windows operate by smoothing the edges of our measurement and preventing the jumps in the signal helping the FFT algorithm to properly analyse the signals. Image credit: Smart Citizen With the use of signal windowing , more specifically with the use of the hamming window , we are then able to reduce the amount of samples needed to roughly 1000 samples. Now we are down to 50% of the memory allocation needed without windowing . You can see the effect on the RMS relative errors in the image below, where the trend of the Hann (another common window) and the Hamming treated buffers, with respect to the frequency tends to stabilise much more quickly than the raw buffers. Image credit: Smart Citizen There is a wide range of functions to use and the decision depends on your application. For audio applications, the most common ones are the Hann, Hamming, and Blackmann. We chose the Hamming because it's trend is to stabilise a bit more quickly than the rest, although the differencies are minimal. For your reference, there is a very interesting description of all these phenomena in this article , where you'll find a more mathematical approach.","title":"Signal windowing"},{"location":"Components/Urban Sensor Board/Audio/#equalisation","text":":::info Talk about the microphone response and how to correct it. :::","title":"Equalisation"},{"location":"Components/Urban Sensor Board/Audio/#15-filtering-and-convolution","text":"In this section we are going to talk about a different approach to the FFT Analysis we have seen in previous sections. What if we don't like the FFT algorithm and we only want to obtain a dBA or dBC results? There is a fairly simple solution to this problem, and it's called filtering . Filtering is a very common technique in signal acquisition that eliminates some frequency components of the raw signal. Examples of filters you very likely have heard of are low-pass, high-pass and band-pass filters . These only let pass the low, high or a defined interval range of frequencies, mostly cancelling out the rest. In the frequency domain, they basicly multiply the spectrum of our signal with its filter spectrum. Exactly what we have done with the weighting. Image credit: Norwegian Creations First, it is important to get a glimpse of the math behind the filters and why they do their magic. And for this, the most important thing we need to know is called convolution . Image credit: River Trail For the purpose of audio analysis , let's consider we have an input vector, a filter kernel and an output vector. Our input vector can be the raw audio signal we have captured, being the output signal the result of the convolution operation. The filter kernel is the characteristic of the filter and will be, for this example, a one dimension array. What the convolution operation is going to do, in a very very very simplified way , is to sweep through the input sample and multiply each component with it's corresponding filter kernel component, then sum the results and put them in the corresponding output sample. If we put some math notation and call x[n] to the input vector, h[n] to the filter kernel and y[n] to the output vector, it all ends up looking like this: Image credit: DSP Guide Now, the most interesting thing of all this theory is that convolution and multiplication are equivalent operations when we jump from the time to the frequency domain . This means that multiplication in time domain equals to convolution in frequency domain, and more importantly for us, convolution in the time domain, equals to multiplication in the frequency domain . To sum up, the relationship between both domains would look like: Image credit: SmartCitizen Therefore, what we could do is to define a custom filter function and apply it via convolution to our input buffer. This is basically a FIR filter , where FIR stands for Finite Impulse Response . There is another type of filters called IIR , where IIR stands for Infinite impulse response . The difference between them is that FIR uses convolution and IIR uses recursion . The concept of recursion is very simple and it's nothing else than a simplification of the convolution, given that in the convolution algorithm, there are many recursive operations that we repeat over an over and we can implement into a smarter algorithm. Normally, IIR filters are more efficient in terms of speed and memory , but we need to specify a series of coefficients, and it's tricky, if not impossible, to create a custom filter response. Image credit: DSP Guide So finally! How can we avoid using the FFT algorithm to extract the desired frequency content of a signal and recreate the signal without it? Sounds complex, but now we know that we can use a FIR filter , with a custom frequency response and apply it via convolution to our input buffer. As simple as that. The custom frequency response, with the proper math, can be optained by applying the IFFT algorithm to the desired frequency response (for example, the A-weighting function). You can have a look to this example if you want to create a custom filter function in octave , with A or C weighting and implement it to a FIR filter in C++. Image credit: SmartCitizen Also, if you are really into it, you can read more about convolution and other DSP topics, we would recommended to go through this fantastic guide .","title":"1.5 Filtering and convolution"},{"location":"Components/Urban Sensor Board/Audio/#afsk-analyser","text":"In this section we are going to talk about a new feature we are planning to introduce in the upcoming version of the SCK: a FSK communication protocol via Audio (A-FSK). You might have read about this technique and it\u2019s usage in the Amazon Dash configuration process, and on the post today we are going to describe very briefly the work in progress for this feature. So! FSK stands for Frequency Shift Keying, which is a form of transmission through frequency variations on the carrying waveforms. It\u2019s major counterpart is the so called ASK, or Amplitude Shift Keying, in which the transmission is carried out via amplitude variations. A very simple form of ASK is OOK, which stands for On-Off-Keying, in which the amplitude of the carrier wave oscillates between a value and nothingness: Image credit: Electric Stack Exchange As in many other situations, there is a trade off between the options on the table: ASK or FSK? Maybe another one? The main disadvantage of ASK it is said to have a higher probability of error with respect to FSK, since noise interference affects amplitude of the transmitted wave. FSK, on the other hand, it is said to have a lower bandwidth efficiency. However, since we have talked about FFT quite a lot now, we thought FSK would be our best bet and also, because maybe bandwidth is not such a big deal after all as we can see below. Then, the idea is to implement an algorithm that is able to identify if the sound transmitted from an emitter (i.e. a smartphone) contains a series of reference frequencies in certain known spots. Following this principle, our aim is to transmit a byte per sound wave, hence, in a sound wave containing up to 8 possible carrier frequencies that might or not be activated. The activation (or not) of these frequencies in the analysed spectrum will yield a 1 or a 0, that we can use on a bit mask and extract 8-bit ASCII characters codes : Image credit: Martin Melhus The emitter could be based on the Web Audio API, as the example from Martin Melhus above from his project on a Web Audio Modem. Finally, the receiver would be our beloved I2S Mems microphone that we have been talking about for so long now, doing a FFT algorithm and detecting the peaks in it, identifying the carrier frequencies activation.","title":"AFSK Analyser"},{"location":"Components/Urban Sensor Board/Audio/#configuration-via-sound","text":":::info * Reverse engineering the amazon dash * MATLAB CODE * Web-based modem * ASK - Amplitude Shift Keying * DSP fundamentals * Hilbert transform :::","title":"Configuration via sound"},{"location":"Components/Urban Sensor Board/Audio/#firmware-implementation","text":"","title":"Firmware implementation"},{"location":"Components/Urban Sensor Board/Audio/#samd21-cortex-m0-implementation","text":"Two libraries: AudioI2S Base library, intented to be generic purpose audio analysis library for an I2S Microphone on the SAMD21 with: FFT Analysis FIR Analysis Custom window selection Custom weighting function selection Custom buffer size and custom fft bin size (in case of FFT analyser) Custom equalisation Octave auto generation of .h files for coefficients and so on smartcitizen-kit-audio Library intented for firmware implementation in the SmartCitizen kit 2.0, with a better usage of memory and SCK related functionalities: FFT analysis Selection of A or C weighting through LUT Two user cases: General audio analysis (sensorRead) with fixed buffer size and fixed FFT bins size (fs = 44,1kHz) Audio Communication with FSK - with information transfer via audio","title":"SAMD21 Cortex M0+ implementation"},{"location":"Components/Urban Sensor Board/MICS/","text":"Inside the MICS Metal Oxide sensors Link The SGX Mics is comprised of two main elements: A SNO2 substrate as a sensor element A heater element The SnO2 is a chemically sensitive metal oxide which can have interactions with molecules to be detected in the target gas. The reactions that can occur on SnO2 surface are adsorption and catalytic reactions . They take place at the so called active sites and at grain boundaries or at three phase boundaries (e.g. with metallic contacts or at metallic surface clusters). The metal oxide substrate is basically a collection of sites at which different molecules can be absorbed and therefore interact in various manners with the species present in the atmosphere: either through catalytic reaction, surface reaction, grain boundary reaction among others . [Source: Modelling of water adsorption on SnO2 Surface]. The sensor element is typically heated to a few hundred degrees (\u00baC) using a small resistive heater. There are many ways to descrbe the regions within the sensor, but it can be described as in [1]: the surface, which interacts with the gas, the bulk, which is unaffected by it, and the particle boundary, which lies in between these two . The particle boundary is situated at a distance from any material exposed to the atmosphere into the sensor that chemical electrostatic effects can propagate (the so called Debye length), and this is related to the material\u2019s physical properties. At high temperatures, oxygen atoms bond onto the boundary, extracting electrons in the process from the semiconductor\u2019s surface region. The oxygen either then directly reacts with ambient gases, or these gases also bond onto the sensor, which causes more charge carriers to be withdrawn or injected into the surface region. All these effects change the sensor resistance and it is measured accordingly: In the case of the SGX 4514, the detection of the pollution gases is achieved by measuring the sensing resistance of both sensors: RED sensor resistance decreases in the presence of CO and hydrocarbons. OX sensor resistance increases in the presence of NO2. Manufacturer considerations Link MiCs Datasheet MiCs FAQ SGX Metal Oxide Gas Sensors - How to use and how they perform Internal Reference Link Diagram of the various types of interaction between atmospheric gases and an MOS sensor surface. In the leftmost region, the sensor is unpowered (and exhibits the base resistance). The three other regions of the diagram describe different processes that actually occur simultaneously to varying degrees. The sensor\u2019s output is the resistance across the whole of the sensor material, which forms a resistor network with contributions from both the bulk and surface regions (although the non-sensitive surface will have similar properties to the bulk). This model of the sensor material also explains the wide variation in base resistance between individual sensors of the same type, as the random nature of the surface geometry means an equally random network of resistances . This diagram is a two-dimensional representation of a three-dimensional material; in an actual sensor, the sensitive region is spread into the surface with a distance dependent on the grain size and arrangement resulting from the sintering. Note on response The change in resistance with the change in gas concentration is not a linear response. The response can be measured and fitted to a polynomial relationship . Note on performance Because of this and other factors the sensors are best employed where the end user is looking to detect instances or trends of gas presence rather than seeking to obtain high accuracy such as that achieved by more sophisticated analytical type systems. For these \u2018event sensing \u2018applications the level of accuracy required is not great and there are unlikely to be safety related issues. Note on calibration Each sensor will have a different resistance in air and how much this resistance changes with concentrations of the target gas will also differ. Therefore to convert from resistance readings to concentration it is necessary to derive a calibration curve for each sensor . This will require measuring the resistances in air and at a number of gas concentrations over the desired range. It is important that the concentrations are in a background of air as Oxygen is needed for the sensor to work correctly . The more points the better the accuracy. Environmental Factors Effects: Temperature humidity effect are large Pressure effect is low Flow (and therefore temperature) effect is large: use of PTFE (teflon) filters to reduce it Lifetime Atmospheric effects Cross sensitivity (non-exclusivity) Poisoning Naisbitt et al.","title":"MICS"},{"location":"Components/Urban Sensor Board/MICS/#inside-the-mics-metal-oxide-sensors","text":"The SGX Mics is comprised of two main elements: A SNO2 substrate as a sensor element A heater element The SnO2 is a chemically sensitive metal oxide which can have interactions with molecules to be detected in the target gas. The reactions that can occur on SnO2 surface are adsorption and catalytic reactions . They take place at the so called active sites and at grain boundaries or at three phase boundaries (e.g. with metallic contacts or at metallic surface clusters). The metal oxide substrate is basically a collection of sites at which different molecules can be absorbed and therefore interact in various manners with the species present in the atmosphere: either through catalytic reaction, surface reaction, grain boundary reaction among others . [Source: Modelling of water adsorption on SnO2 Surface]. The sensor element is typically heated to a few hundred degrees (\u00baC) using a small resistive heater. There are many ways to descrbe the regions within the sensor, but it can be described as in [1]: the surface, which interacts with the gas, the bulk, which is unaffected by it, and the particle boundary, which lies in between these two . The particle boundary is situated at a distance from any material exposed to the atmosphere into the sensor that chemical electrostatic effects can propagate (the so called Debye length), and this is related to the material\u2019s physical properties. At high temperatures, oxygen atoms bond onto the boundary, extracting electrons in the process from the semiconductor\u2019s surface region. The oxygen either then directly reacts with ambient gases, or these gases also bond onto the sensor, which causes more charge carriers to be withdrawn or injected into the surface region. All these effects change the sensor resistance and it is measured accordingly: In the case of the SGX 4514, the detection of the pollution gases is achieved by measuring the sensing resistance of both sensors: RED sensor resistance decreases in the presence of CO and hydrocarbons. OX sensor resistance increases in the presence of NO2.","title":"Inside the MICS Metal Oxide sensors"},{"location":"Components/Urban Sensor Board/MICS/#manufacturer-considerations","text":"MiCs Datasheet MiCs FAQ SGX Metal Oxide Gas Sensors - How to use and how they perform","title":"Manufacturer considerations"},{"location":"Components/Urban Sensor Board/MICS/#internal-reference","text":"Diagram of the various types of interaction between atmospheric gases and an MOS sensor surface. In the leftmost region, the sensor is unpowered (and exhibits the base resistance). The three other regions of the diagram describe different processes that actually occur simultaneously to varying degrees. The sensor\u2019s output is the resistance across the whole of the sensor material, which forms a resistor network with contributions from both the bulk and surface regions (although the non-sensitive surface will have similar properties to the bulk). This model of the sensor material also explains the wide variation in base resistance between individual sensors of the same type, as the random nature of the surface geometry means an equally random network of resistances . This diagram is a two-dimensional representation of a three-dimensional material; in an actual sensor, the sensitive region is spread into the surface with a distance dependent on the grain size and arrangement resulting from the sintering. Note on response The change in resistance with the change in gas concentration is not a linear response. The response can be measured and fitted to a polynomial relationship . Note on performance Because of this and other factors the sensors are best employed where the end user is looking to detect instances or trends of gas presence rather than seeking to obtain high accuracy such as that achieved by more sophisticated analytical type systems. For these \u2018event sensing \u2018applications the level of accuracy required is not great and there are unlikely to be safety related issues. Note on calibration Each sensor will have a different resistance in air and how much this resistance changes with concentrations of the target gas will also differ. Therefore to convert from resistance readings to concentration it is necessary to derive a calibration curve for each sensor . This will require measuring the resistances in air and at a number of gas concentrations over the desired range. It is important that the concentrations are in a background of air as Oxygen is needed for the sensor to work correctly . The more points the better the accuracy. Environmental Factors Effects: Temperature humidity effect are large Pressure effect is low Flow (and therefore temperature) effect is large: use of PTFE (teflon) filters to reduce it Lifetime Atmospheric effects Cross sensitivity (non-exclusivity) Poisoning Naisbitt et al.","title":"Internal Reference"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/","text":"Urban Sensor Board Link The Urban Sensor Board contains a selection of sensors for the measuring the urban outdoor environment. The sensor selection is based on the recommendations provided by ISCAPE WP1 among the experience acquired from previous Smart Citizen Kit generations. A major effort has been carried out on this design to improve the accuracy of the data provided. The sensors on the board include: Air Temperature, Relative Humidity, Noise Level, Ambient Light and Barometric Pressure. The board also features a section especially focused on Air Quality including a Particles Matter, a Carbon Monoxide and a Dioxide Nitrogen detectors. The sensor density of the board design offers more than ten different environmental metrics at a cost below 50\u20ac and differentiates the design from other existing solutions. The following sections describe in detail each of the sensors available. Metal Oxide NO 2 and CO Sensor Link The SGX Sensortech (formerly e2v) MICS 4514 1 is a dual, robust MEMS sensor for the detection of pollution from automobile exhausts. It integrates on a single SMD package the more well-known SGX MICS 5525 for Carbon Monoxide detection and the SGX MICS 2710 for Dioxide Nitrogen detection. The sensor includes two sensor chips with independent heaters and sensitive layers. One sensor chip detects Oxidizing gases (OX) primarily NO 2 in a 0.05-10ppm, and the other sensor detects reducing gases (RED) primarily NO 2 in a 1-1000ppm. The following characteristics have been considered for the sensor choice: Combines in the same package both the CO and NO 2 sensors in a low-cost unit \\ 15\u20ac Low heating current, especially important since the sensor can be battery-powered. Wide range gas concentration detection. Extensive operational temperature range. Robust to vibrations and shocks. The MICS-4514 Carbon Monoxide detection performance was tested by (Rai et al. 2017; Spinelle et al. 2017) under field conditions. They reported good agreement (R2 = 0.76--0.78) between sensor response and reference measurements when it was calibrated by using simple or multiple linear regression models (Rai et al. 2017) The sensor integration on the Urban Sensor Board features an analog front-end different than those used by other products using the same sensor to achieve more precise and stable readings. That includes a dynamic gaining circuit and an adjustable heating system designed from the ground up for this application. However, the baseline resistance can vary a lot from sensor to sensor, and according to the measuring conditions, which is why the manufacturer recommends monitoring the sensitivity periodically. That mean re-calibration of the device after a few months might be required because the pairs of metal-oxide on the surface of the captor change their physical properties when exposed to the detectable gases. That is the primary reason the Living Lab Station include an extra Gas Sensor Board featuring three pre calibrated EC gas sensors to provide more precise and meaningful air quality data. :::info MICS Working principle ::: Noise Level Sensor Link The noise sensor is based on the INVENSENSE ICS-43432 2 high-performance, low power, digital output, omnidirectional MEMS microphone with a bottom port and I2S interface. The sensors are similar to the one found on some high-end smartphones. It delivers the information directly in a digital format to the MCU where a custom library has been developed to provide noise data in dB scales A, C and Z. The raw FFT is also accessible to support characterization of specific noise frequencies. The sensor has been calibrated specifically for the project on an anechoic chamber using standard microphone calibration procedures. A final performance and calibration report will be released as part of the T3.1 documentation. The following characteristics have been considered for the sensor choice High 65 dBA SNR with a \u221226 dB FS Sensitivity Low Sensitivity Tolerance \u00b11 dB Wide Frequency Response from 50Hz to 20kHz High Acoustic Overload Point 116 dB SPL Low Power :::info Audio analysis full documentation ::: Relative Humidity and Air Temperature Sensor Link Relative Humidity and Air Temperature Sensor are provided by a SENSIRION SHT21 3 module. The following characteristics have been considered for the sensor choice Calibrated, linearized sensor signals in digital, I2C format straight to the MCU where data is provided in degrees Celsius and Relative Humidity. Wide measurement range with high resolution. The relative humidity range of 0-100% RH with a 0.03% resolution and a repeatability of 0.1%, together with a temperature operating range from -40 to +125\u00b0C with a temperature resolution of 0.01 \u00baC and a repeatability of 0.1%. No need for calibration and long-term stability. Low power consumption Commonly found in many commercial weather stations as the Davis Vantage Pro. Ambient Light Sensor Link The Ambient Light Sensors is based around the ROHM BH1721FVC 4 which uses an LDR10 combined with an ADC and the corresponding circuit that allows communicating with the device with the I2C protocol. The following characteristics have been considered for the sensor choice: No need of external ADC or linearization circuits uses the well-known I2C protocol Measures ambient light data in a wide range from 1lx to 65528 lx a repeatability of 15% and a resolution of 8 lx. Possibility to adjust by an I2C command the kind of light that it should measure (visible or infrared). The infrared channel is not used in the current version, but it could be considered in future versions. Low power consumption. 50Hz/60Hz (electric network frequency) light rejection. Filtering the interference of most artificial light sources. Barometric Pressure Link The Barometric Pressure sensor is based around the NXP MPL3115A2 5 is a compact, piezoresistive, absolute pressure sensor with an I2C digital interface. The following characteristics have been considered for the sensor choice: Wide operating range of 20 kPa to 110 kPa. Temperature compensated utilizing an on-chip temperature sensor. No need for an external ADC or linearization circuits. The pressure and temperature data is fed into an internal high-resolution ADC to provide fully compensated and digitized outputs for pressure in Pascals and temperature in \u00b0C using the well-known I2C protocol Barometric pressure is also processed by the MCU as height above mean sea level (AMSL) helping to determine the location of the device. Low power consumption. Dust Particles Sensor Link The MAXIM MAX30105 6 is an integrated particle-sensing module. Is a high Sensitivity Optical Reflective Solution for detection of wide \u2029a variety of particle sizes. This sensor is aimed at measuring relative air dust levels. However, an algorithm is being developed to support PM 2.5 or PM 10 measurements. At the time the document is being written no data on the sensor lab tests can be provided. The following characteristics have been considered for the sensor choice: No need for external ADC or linearization circuits. The sensor includes an internal MCU capable of dealing with all the light emitting and sensing processing. All the communication is done using the I2C protocol. Robust Motion Artifact Resilience and -40\u00b0C to +85\u00b0C Operating Temperature Capable of Operating at High Ambient Levels with Excellent Ambient Rejection Capability Includes a temperature sensor for calibrating the temperature dependence of the particle sensing subsystem. Low power consumption External PM Sensor Link SGX MICS 4514 Technical Datasheet https://sgx.cdistore.com/datasheets/sgx/0278_Datasheet%20MiCS-4514%20rev%2017.pdf INVENSENSE 43432 Technical Datasheet https://www.invensense.com/wp-content/uploads/2015/02/ICS-43432-data-sheet-v1.3.pdf SENSIRION SHT21 Technical Datasheet https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/ ROHM BH1730 Technical Datasheet http://rohmfs.rohm.com/en/products/databook/datasheet/ic/sensor/light/bh1721fvc-e.pdf NXP MPL3115A2 Technical Datasheet http://www.nxp.com/docs/en/data-sheet/MPL3115A2.pdf MAXIM 30105 Technical Datasheet https://datasheets.maximintegrated.com/en/ds/MAX30105.pdf ALPHASENSE NO2-B43F Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/NO2B43F.pdf ALPHASENSE OX-B431 Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/OX-B431.pdf ALPHASENSE CO-B4 B Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2015/04/COB41.pdf PLANTOWER PMS1003 Technical Datasheet http://www.aqmd.gov/docs/default-source/aq-spec/resources-page/plantower-pms1003-manual_v2-5.pdf?sfvrsn=2","title":"Urban Sensor Board"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#urban-sensor-board","text":"The Urban Sensor Board contains a selection of sensors for the measuring the urban outdoor environment. The sensor selection is based on the recommendations provided by ISCAPE WP1 among the experience acquired from previous Smart Citizen Kit generations. A major effort has been carried out on this design to improve the accuracy of the data provided. The sensors on the board include: Air Temperature, Relative Humidity, Noise Level, Ambient Light and Barometric Pressure. The board also features a section especially focused on Air Quality including a Particles Matter, a Carbon Monoxide and a Dioxide Nitrogen detectors. The sensor density of the board design offers more than ten different environmental metrics at a cost below 50\u20ac and differentiates the design from other existing solutions. The following sections describe in detail each of the sensors available.","title":"Urban Sensor Board"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#metal-oxide-no2-and-co-sensor","text":"The SGX Sensortech (formerly e2v) MICS 4514 1 is a dual, robust MEMS sensor for the detection of pollution from automobile exhausts. It integrates on a single SMD package the more well-known SGX MICS 5525 for Carbon Monoxide detection and the SGX MICS 2710 for Dioxide Nitrogen detection. The sensor includes two sensor chips with independent heaters and sensitive layers. One sensor chip detects Oxidizing gases (OX) primarily NO 2 in a 0.05-10ppm, and the other sensor detects reducing gases (RED) primarily NO 2 in a 1-1000ppm. The following characteristics have been considered for the sensor choice: Combines in the same package both the CO and NO 2 sensors in a low-cost unit \\ 15\u20ac Low heating current, especially important since the sensor can be battery-powered. Wide range gas concentration detection. Extensive operational temperature range. Robust to vibrations and shocks. The MICS-4514 Carbon Monoxide detection performance was tested by (Rai et al. 2017; Spinelle et al. 2017) under field conditions. They reported good agreement (R2 = 0.76--0.78) between sensor response and reference measurements when it was calibrated by using simple or multiple linear regression models (Rai et al. 2017) The sensor integration on the Urban Sensor Board features an analog front-end different than those used by other products using the same sensor to achieve more precise and stable readings. That includes a dynamic gaining circuit and an adjustable heating system designed from the ground up for this application. However, the baseline resistance can vary a lot from sensor to sensor, and according to the measuring conditions, which is why the manufacturer recommends monitoring the sensitivity periodically. That mean re-calibration of the device after a few months might be required because the pairs of metal-oxide on the surface of the captor change their physical properties when exposed to the detectable gases. That is the primary reason the Living Lab Station include an extra Gas Sensor Board featuring three pre calibrated EC gas sensors to provide more precise and meaningful air quality data. :::info MICS Working principle :::","title":"Metal Oxide NO2 and CO Sensor"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#noise-level-sensor","text":"The noise sensor is based on the INVENSENSE ICS-43432 2 high-performance, low power, digital output, omnidirectional MEMS microphone with a bottom port and I2S interface. The sensors are similar to the one found on some high-end smartphones. It delivers the information directly in a digital format to the MCU where a custom library has been developed to provide noise data in dB scales A, C and Z. The raw FFT is also accessible to support characterization of specific noise frequencies. The sensor has been calibrated specifically for the project on an anechoic chamber using standard microphone calibration procedures. A final performance and calibration report will be released as part of the T3.1 documentation. The following characteristics have been considered for the sensor choice High 65 dBA SNR with a \u221226 dB FS Sensitivity Low Sensitivity Tolerance \u00b11 dB Wide Frequency Response from 50Hz to 20kHz High Acoustic Overload Point 116 dB SPL Low Power :::info Audio analysis full documentation :::","title":"Noise Level Sensor"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#relative-humidity-and-air-temperature-sensor","text":"Relative Humidity and Air Temperature Sensor are provided by a SENSIRION SHT21 3 module. The following characteristics have been considered for the sensor choice Calibrated, linearized sensor signals in digital, I2C format straight to the MCU where data is provided in degrees Celsius and Relative Humidity. Wide measurement range with high resolution. The relative humidity range of 0-100% RH with a 0.03% resolution and a repeatability of 0.1%, together with a temperature operating range from -40 to +125\u00b0C with a temperature resolution of 0.01 \u00baC and a repeatability of 0.1%. No need for calibration and long-term stability. Low power consumption Commonly found in many commercial weather stations as the Davis Vantage Pro.","title":"Relative Humidity and Air Temperature Sensor"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#ambient-light-sensor","text":"The Ambient Light Sensors is based around the ROHM BH1721FVC 4 which uses an LDR10 combined with an ADC and the corresponding circuit that allows communicating with the device with the I2C protocol. The following characteristics have been considered for the sensor choice: No need of external ADC or linearization circuits uses the well-known I2C protocol Measures ambient light data in a wide range from 1lx to 65528 lx a repeatability of 15% and a resolution of 8 lx. Possibility to adjust by an I2C command the kind of light that it should measure (visible or infrared). The infrared channel is not used in the current version, but it could be considered in future versions. Low power consumption. 50Hz/60Hz (electric network frequency) light rejection. Filtering the interference of most artificial light sources.","title":"Ambient Light Sensor"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#barometric-pressure","text":"The Barometric Pressure sensor is based around the NXP MPL3115A2 5 is a compact, piezoresistive, absolute pressure sensor with an I2C digital interface. The following characteristics have been considered for the sensor choice: Wide operating range of 20 kPa to 110 kPa. Temperature compensated utilizing an on-chip temperature sensor. No need for an external ADC or linearization circuits. The pressure and temperature data is fed into an internal high-resolution ADC to provide fully compensated and digitized outputs for pressure in Pascals and temperature in \u00b0C using the well-known I2C protocol Barometric pressure is also processed by the MCU as height above mean sea level (AMSL) helping to determine the location of the device. Low power consumption.","title":"Barometric Pressure"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#dust-particles-sensor","text":"The MAXIM MAX30105 6 is an integrated particle-sensing module. Is a high Sensitivity Optical Reflective Solution for detection of wide \u2029a variety of particle sizes. This sensor is aimed at measuring relative air dust levels. However, an algorithm is being developed to support PM 2.5 or PM 10 measurements. At the time the document is being written no data on the sensor lab tests can be provided. The following characteristics have been considered for the sensor choice: No need for external ADC or linearization circuits. The sensor includes an internal MCU capable of dealing with all the light emitting and sensing processing. All the communication is done using the I2C protocol. Robust Motion Artifact Resilience and -40\u00b0C to +85\u00b0C Operating Temperature Capable of Operating at High Ambient Levels with Excellent Ambient Rejection Capability Includes a temperature sensor for calibrating the temperature dependence of the particle sensing subsystem. Low power consumption","title":"Dust Particles Sensor"},{"location":"Components/Urban Sensor Board/Urban Sensor Board/#external-pm-sensor","text":"SGX MICS 4514 Technical Datasheet https://sgx.cdistore.com/datasheets/sgx/0278_Datasheet%20MiCS-4514%20rev%2017.pdf INVENSENSE 43432 Technical Datasheet https://www.invensense.com/wp-content/uploads/2015/02/ICS-43432-data-sheet-v1.3.pdf SENSIRION SHT21 Technical Datasheet https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/ ROHM BH1730 Technical Datasheet http://rohmfs.rohm.com/en/products/databook/datasheet/ic/sensor/light/bh1721fvc-e.pdf NXP MPL3115A2 Technical Datasheet http://www.nxp.com/docs/en/data-sheet/MPL3115A2.pdf MAXIM 30105 Technical Datasheet https://datasheets.maximintegrated.com/en/ds/MAX30105.pdf ALPHASENSE NO2-B43F Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/NO2B43F.pdf ALPHASENSE OX-B431 Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2017/07/OX-B431.pdf ALPHASENSE CO-B4 B Technical Datasheet http://www.alphasense.com/WEB1213/wp-content/uploads/2015/04/COB41.pdf PLANTOWER PMS1003 Technical Datasheet http://www.aqmd.gov/docs/default-source/aq-spec/resources-page/plantower-pms1003-manual_v2-5.pdf?sfvrsn=2","title":"External PM Sensor"},{"location":"Firmware/Firmware/","text":"Firmware Link The firmware is OOP and is entirely written in C++. Both processors the core ARM MCU and the ESP8266 WIFI are developed as part of the same framework integrating seemingly by using a set of bridge libraries that provide a unifies the RPC architecture. This software was partially developed by IAAC as part of the Making Sense project under the European Community's H2020 Programme Grant Agreement No. 688620. Firmware updates are done via the micro USB port using the Platform IO software available for Linux, Mac and Windows. Architecture Link ## SAM Definitions Pins Sensors Commands Sensors ReadLight ReadSound SckAux SckBase SckButton SckCharger SckLed SckUrban ## Shared Definitions Shared Config ## ESP SckESP Data management Link The board is capable of storing the recorded data offline on its internal dedicated flash memory of 8MB and later publish this over Wi-Fi connectivity provided by an Espressif ESP8266. Data is published using MQTT messages to the Smart Citizen Platform. NTP is used for syncing the built-in RTC. For long term offline storage, the board provides a standard microSD socket where card in the orders of GB can be employed. That ensures extended periods of data in the order of decades can be stored. Configuration Link The board firmware is fully customizable without requiring any changes to the core software. That includes enabling or disabling sensors, the sampling frequency of the sensors or the operation mode. There different configuration options: via the Serial Shell available when the board is connected over USB, editing the config.txt file when using a microSD card or over the network using MQTT messages (this mode is currently under development) Storage Link Devices Link Flash memory (8mb). SPIFFS file system seems to be a good option. SDcard Sdfat is the library we are using to manage sdcard filesystem. Support functions Link Detects when a card is inserted or removed, this function is called from an interrupt in CD_MMC pin. So we can react to card events. bool sdDetect() Selects and starts the device. bool sdBegin() bool flashBegin() Open a file (it takes care on selecting and starting the right device) File sdOpen(sckFile wichFile, uint8_t oflag) File flashOpen(sckFile wichFile, uint8_t oflag) ```=clike struct SckFile { char name[13]; File file; } uint8_t oflag O_READ - Open for reading. O_APPEND - If set, the file offset shall be set to the end of the file prior to each write. O_CREAT - We need to delete previous file before creating the new. ``` Stored information Link Configuration file CONFIG.TXT Link If this file doesn't exist it is generated by the kit with the factory defaults and after that it can be modified by both the user and the kit. SckBase :: resetConfigFile (); If the modification comes from the kit (sound, platform, etc) it should be saved to the flash and then to the SD. When the file is read from the SD if it is valid and different from the flash version the flash version should be updated. There is a problem in this approach: if the user insert and old scard with an old config without erasing it he can mess an newly configured kit. To solve this there is the possibility of having a first entry in the config file that is called something like user_modified and the user should modify this so the new config is loaded. If this flag is not true the sdcard config would be overwritten with the one in the flash. :::danger This file will be restored to default values in a factory reset event. ::: Readings file POST.CSV Link This file is generated and updated by the kit. When a SD is detected this file will be synced with the flash version as the correct one. For this to work we need a fast way to compare the files. We need to test if this is doable in terms of speed. Maybe only do this when it is requested via a command or user input. There should be a way to know if a post has been uploaded to the platform, so when the kit doesn't have a wifi connection it saves the readings and publish them as soon as a network connection is available. :::danger This file will be erased in a factory reset event. ::: Debug log file DEBUG.CSV Link The debug file is generated and updated by the kit, only if the debug mode is enabled on the configuration. When the debug mode is enabled the verbosity level of this file is defined by the outlevel ( normal, verbose or silent ). :::danger This file will be erased in a factory reset event. :::","title":"Firmware"},{"location":"Firmware/Firmware/#firmware","text":"The firmware is OOP and is entirely written in C++. Both processors the core ARM MCU and the ESP8266 WIFI are developed as part of the same framework integrating seemingly by using a set of bridge libraries that provide a unifies the RPC architecture. This software was partially developed by IAAC as part of the Making Sense project under the European Community's H2020 Programme Grant Agreement No. 688620. Firmware updates are done via the micro USB port using the Platform IO software available for Linux, Mac and Windows.","title":"Firmware"},{"location":"Firmware/Firmware/#architecture","text":"## SAM Definitions Pins Sensors Commands Sensors ReadLight ReadSound SckAux SckBase SckButton SckCharger SckLed SckUrban ## Shared Definitions Shared Config ## ESP SckESP","title":"Architecture"},{"location":"Firmware/Firmware/#data-management","text":"The board is capable of storing the recorded data offline on its internal dedicated flash memory of 8MB and later publish this over Wi-Fi connectivity provided by an Espressif ESP8266. Data is published using MQTT messages to the Smart Citizen Platform. NTP is used for syncing the built-in RTC. For long term offline storage, the board provides a standard microSD socket where card in the orders of GB can be employed. That ensures extended periods of data in the order of decades can be stored.","title":"Data management"},{"location":"Firmware/Firmware/#configuration","text":"The board firmware is fully customizable without requiring any changes to the core software. That includes enabling or disabling sensors, the sampling frequency of the sensors or the operation mode. There different configuration options: via the Serial Shell available when the board is connected over USB, editing the config.txt file when using a microSD card or over the network using MQTT messages (this mode is currently under development)","title":"Configuration"},{"location":"Firmware/Firmware/#storage","text":"","title":"Storage"},{"location":"Firmware/Firmware/#devices","text":"Flash memory (8mb). SPIFFS file system seems to be a good option. SDcard Sdfat is the library we are using to manage sdcard filesystem.","title":"Devices"},{"location":"Firmware/Firmware/#support-functions","text":"Detects when a card is inserted or removed, this function is called from an interrupt in CD_MMC pin. So we can react to card events. bool sdDetect() Selects and starts the device. bool sdBegin() bool flashBegin() Open a file (it takes care on selecting and starting the right device) File sdOpen(sckFile wichFile, uint8_t oflag) File flashOpen(sckFile wichFile, uint8_t oflag) ```=clike struct SckFile { char name[13]; File file; } uint8_t oflag O_READ - Open for reading. O_APPEND - If set, the file offset shall be set to the end of the file prior to each write. O_CREAT - We need to delete previous file before creating the new. ```","title":"Support functions"},{"location":"Firmware/Firmware/#stored-information","text":"","title":"Stored information"},{"location":"Firmware/Firmware/#configuration-file-configtxt","text":"If this file doesn't exist it is generated by the kit with the factory defaults and after that it can be modified by both the user and the kit. SckBase :: resetConfigFile (); If the modification comes from the kit (sound, platform, etc) it should be saved to the flash and then to the SD. When the file is read from the SD if it is valid and different from the flash version the flash version should be updated. There is a problem in this approach: if the user insert and old scard with an old config without erasing it he can mess an newly configured kit. To solve this there is the possibility of having a first entry in the config file that is called something like user_modified and the user should modify this so the new config is loaded. If this flag is not true the sdcard config would be overwritten with the one in the flash. :::danger This file will be restored to default values in a factory reset event. :::","title":"Configuration file CONFIG.TXT"},{"location":"Firmware/Firmware/#readings-file-postcsv","text":"This file is generated and updated by the kit. When a SD is detected this file will be synced with the flash version as the correct one. For this to work we need a fast way to compare the files. We need to test if this is doable in terms of speed. Maybe only do this when it is requested via a command or user input. There should be a way to know if a post has been uploaded to the platform, so when the kit doesn't have a wifi connection it saves the readings and publish them as soon as a network connection is available. :::danger This file will be erased in a factory reset event. :::","title":"Readings file POST.CSV"},{"location":"Firmware/Firmware/#debug-log-file-debugcsv","text":"The debug file is generated and updated by the kit, only if the debug mode is enabled on the configuration. When the debug mode is enabled the verbosity level of this file is defined by the outlevel ( normal, verbose or silent ). :::danger This file will be erased in a factory reset event. :::","title":"Debug log file DEBUG.CSV"},{"location":"Firmware/Guides/Debugging the firmware/","text":"Debugging the Firmware Link These are working notes about the process and the necessary components to work directly with the MCU flash memory and interactively debugging with a toolchain based on open hardware and software. Raspberry pi setup Link First download and copy Raspbian Lite to your SDcard, here are the installation docs . Add wifi configuration Create a file name wpa_supplicant.conf on the /boot partition of the SD card, the content of this file should looks like this: ```shell= ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"wifi_ssid\" psk=\"wifi_password\" } ``` Replacing wifi_ssid and wifi_password with your actual wifi network information. The wpa_supplicant.conf file will be copied to /etc/wpa_supplicant/ directory automatically once the Raspberry Pi is booted up. Enable SSH server. SSH access is disabled as default for security reasons. To enable the SSH server when Raspberry Pi is booted up for the first time: create a file called ssh with no file extension and no contents, and copy it to the /boot partition on the SD card. Find your raspberry on the network :::danger Corregir desde aqui ::: In order to find a raspberry pi over the network we can use commands like these: Linux ```shell= MY_IP_RANGE=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}') nmap -sn MY_IP_RANGE IP= MY_IP_RANGE && IP= (arp -na | grep b8:27:eb | grep -Eo '[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}') ssh $IP; **Mac** (To be reviewed) ```shell= MY_RANGE=$(ip addr | grep UP -A3 | grep 192 -A0 | awk {print $2} ) nmap -sn $MY_RANGE arp -na | grep b8:27:eb SSH login without password: Si nunca has generado RSA key: ssh-keygen sin poner nada en la passphrase. Copiar la clave a la raspberry: ssh-copy-id -i ~/.ssh/id_rsa.pub raspi-address Ya que est\u00e9 lista la raspberry con conectarla debe bootear y conectarse sola a la red, el commando que esta arriba ( MY_IP... ) la localiza y hace ssh login. Once you are logged to your raspberry pi and connected to the internet, do a system upgrade : ```shell= sudo apt-get install rpi-update sudo rpi-update sudo apt-get update sudo apt-get dist-upgrade Install some **dependencies**: ```shell= sudo apt-get install git autoconf libtool make pkg-config libusb-1.0-0 libusb-1.0-0-dev telnet sshfs Openocd installation Link Clon openocd repository and compile: shell=git clone git://git.code.sf.net/p/openocd/code openocd-codecd openocd-code./bootstrap./configure --enable-sysfsgpio --enable-bcm2835gpiomakesudo make install\u0002wzxhzdk:2\u0003You can store this file in OpenOCD scripts dir so it will auto find it shell= sudo mv sck.cfg /usr/local/share/openocd/scripts/ and then run the OpenOCD server with: ```shell= sudo openocd -f sck.cfg Then you can connect to OpenOCD, if you want to connect from an external computer, replace 127.0.0.1 with your Raspberry Pi IP address. ```shell= telnet 127.0.0.1 4444 :::info On a ***arduino zero*** go to the directory where the *.cfg is and: ```shell= openocd -f arduino_zero.cfg Open On-Chip Debugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport swd . To override use transport select transport . none separate adapter speed: 400 kHz cortex_m reset_config sysresetreq Info : CMSIS-DAP: SWD Supported Info : CMSIS-DAP: Interface Initialised (SWD) Info : CMSIS-DAP: FW Version = 02.01.0157 Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1 Info : CMSIS-DAP: Interface ready Info : clock speed 400 kHz Info : SWD DPIDR 0x0bc11477 Info : at91samd21g18.cpu: hardware has 4 breakpoints, 2 watchpoints ::: Using OpenOCD remotely from other computer Link We need to give the OpenOCD server access to your project files that are remotely stored. To do this you can mount your working directory remotely on the Raspberry Pi via SSH: ```shell= ssh pi@raspi_address pi$ mkdir working_dir pi$ sshfs user@computer_address:working_path working_dir pi$ cd working_dir pi$ sudo openocd -f sck.cfg Then you can connect to OpenOCD from your computer with: ```shell= telnet raspi_address 4444 Uploading Arduino original bootloader Link Get the bootloader file here and build it. Faltan instrucciones para compilar el bootloader Connect to OpenOCD server and run: ```shell= reset halt at91samd bootloader 0 at91samd chip-erase program samd21_sam_ba.bin verify at91samd bootloader 8192 reset run If you don t see any error youre done! ### Uploading SCK Firmware * Install platformio, download and build SCK firmware * Connect to OpenOCD server and run: ```shell= reset halt flash write_image firmware.bin 8192 verify_image firmware.bin 8192 reset run reset run Fixing USB Native Port Not Detected After Burn Bootloader bug Link :::danger ORGANIZAR ESTO!!!* Documentar aqui el bug que deja muerto el bootloader por watchdog loop y c\u00f3mo arreglarlo ::: Hay un bug que deja inutilizable al SCK . El Openocd borra el NVM user row y mete problemas con los fuses del watchDog y otras cosas, creo que la unica manera de reduperarlo sera con atmel studio. Un post del que implemento varios comandos especificos para el at91samd, en donde dice que seria facil agregar la capacidad de modificar el user row. http://yurovsky.github.io/2014/10/13/openocd-samd20-improvements/ y el codigo Esto lo arregla!!!!!!: Esto deshabilita la bootloader protection, borra todo el chip, programa el bootloader, programa un sketch que corrige los fuses cuando corre y vuelve a poner la protecci\u00f3n del bootlader este es el paso importante que no hace la IDE de Arduino por que si lo haces dos veces seguidas dejas el chip in\u00fatil por culpa del fuse de watchdog. Esta soluci\u00f3n usa el sketch para corregir el fuse una vez reseteado el SAM y as\u00ed queda con protecci\u00f3n y funcionando. Build this code and upload it to the SCK like this: ```shell= reset halt at91samd bootloader 0 at91samd chip-erase flash write_image samd21_sam_ba.bin 0 verify_image samd21_sam_ba.bin 0 flash write_image unbrickSCK.bin 8192 verify_image unbrickSCK.bin 8192 at91samd bootloader 8192 ### Working with registers * Hay que investigar las posibilidades ... * You can obtain a register description with the ` reg ` command * Here is a description of the registers on [ Atmel datasheet ]( http : //www.atmel.com/Images/Atmel-42181-SAM-D21_Datasheet.pdf#_OPENTOPIC_TOC_PROCESSING_d94e34017) [ OpenOCD manual ]( http : //openocd.org/doc/html/index.html) ## ![](https: //i.imgur.com/0iMkHRt.png) GDB ### General description The purpose of a debugger such as GDB is to allow you to see what is going on \u201c inside \u201d another program while it executes \u2014 or what another program was doing at the moment it crashed . GDB can do four main kinds of things ( plus other things in support of these ) to help you catch bugs in the act : * Start your program , specifying anything that might affect its behavior . * Make your program stop on specified conditions . * Examine what has happened , when your program has stopped . * Change things in your program , so you can experiment with correcting the effects of one bug and go on to learn about another . ### Debugging session with Raspberry Pi as the OpenOCD server Once your raspberry pi is setup with above instructions you can just do : ``` shell = ssh pi @ RaspberryAddress sudo openocd - f sck . cfg cd / platformio_project / path arm - none - eabi - gdb . / pioenvs / zeroUSB / firmware . elf ( gdb ) target remote RaspberryAddress : 3333 ( gdb ) monitor reset run If you are using platformio , you need to modify the compiling option to avoid optimisation with -0g message to the compiler. In case you are not using platformio , activate verbose compiling output at Arduino IDE and find your compiled .elf directory. [env:zeroUSB] platform = atmelsam board = zeroUSB framework = arduino build_flags = -Og Now we are all set and ready to go. The debugger is waiting for instructions on the execution, which we detail below. :::info Quick handy instructions inside GDB environment 1. (gdb) appears in every line and you don't have to type it each time 2. In case you need to exit GDB, just type in quit , but remember always killing the process before, should you have a target running ```shell= (gdb) kill (gdb) quit 3. `RET` repeats the previous command ::: ### GDB commands All commands in gdb during debugging are detailed in the GDB guide, chapter [GDB commands in detail (continue and stepping)](https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html) An **extract** of some useful commands are detailed below: #### Continuing and stepping `continue [ignore-count]` * Resumes program execution until next breakpoint. `[ignore-count]` argument allows to specify a further number of times to ingore a breakpoint. ```shell= (gdb) continue Continuing. Breakpoint 1, tick () at src/HOLA.cpp:9 9 void tick() { step count Continues running your program until control reaches a different source line , only availabe for source lines and functions compiled with debugging information. count is optional and states the number of steps to be performed before stopping, if no breakpoint arrives earlier. next [count] Continue to the next source line without going into functions . It has the same functionality as step, but it stays in the same stack frame. count works as in step count . As well, it understands jumps calls as in the end of for loops and return to the beginning of the loop. :::info set step-mode on/off sets the behaviour of (gdb) when stepping into a function with no debugging information. In the case of step-mode on , it inspects the first line of code of the function, whereas on step-mode off it skips the function completely. ::: finish Continue running until just after function in the selected stack frame returns . until Has the same behaviour as step , but it ignores the jumps between lines due to loops (for, whiles, etc), continuing to the next source code with incremental line number. Breakpoints Link info breakpoints Retrieve information about breakpoints ```shell= (gdb) info breakpoints Num Type Disp Enb ress What 1 breakpoint keep y 0x00002140 in tick() at src/HOLA.cpp:9 breakpoint already hit 15 times `break` * Set a breakpoint in a specific function ```shell= (gdb) break loop Set a breakpoint in a specific line (344) ```shell= (gdb) break main.cpp:344 :::info Use the **tbreak** command instead of break if you want to stop the program once, and then remove the breakpoint. More **breakpoint condition** options can be found [**here**](https://sourceware.org/gdb/current/onlinedocs/gdb/Conditions.html#Conditions) you can find conditions for the breakpoints (expressions, counters, etc). ::: `watchpoint` * Set a watchpoint [**watchpoint**](https://sourceware.org/gdb/current/onlinedocs/gdb/Set-Watchpoints.html#Set-Watchpoints) to only stop once a variable has a certain value. ```shell= (gdb) watch timer :::info Type in info watchpoints to get information about watchpoints. ::: commands Set a list of actions related to the breakpoint: ```shell= break main.cpp:50 commands silent printf \"count is %d\\n\",count cont end `delete` * Delete a breakpoint ```shell= (gdb) delete 1 (gdb) info breakpoints No breakpoints or watchpoints. Printing / setting variables and more Link loop Read what is around a certain function ``shell=(gdb) l loop25 //while (!Serial) {26 //; // wait for serial port to connect. Needed for native USB port only27 //}28 }2930 void loop() {31 // put your main code here, to run repeatedly:32 Serial.println( HOLA );33 tick();34 Serial.println(millis());\u0002wzxhzdk:13\u0003 set` Set variable to a certain value ```shell= (gdb) set timer = 0 #### Target commands (load) `load filename offset` * `Load` it is meant to make filename (an executable) available for debugging on the remote system\u2014by downloading it. `load` also records the filename symbol table in GDB, like the add-symbol-file command. The file is loaded at whatever address is specified in the executable, also into flash memory. --- :::danger Falta por explicar: * display * diferencia entre hw y sw breakpoints [info](http://web.mit.edu/gnu/doc/html/gdb_7.html) ::: ### Making changes in the code Anytime we make a change in the code, we don t need to reload the debugging session. We can easily do so by: 1. Compile the code: a. Define Shell build in Sublime Text and configure a build sytem with: ``` shell_cmd : cd .. pio run ``` Then, everytime you hit Ctrl+B (Cmd+B) and you use your custom build system, it will automatically use this option. b. Or hit `pio run` in another terminal located in your project root directory 2. In gdb, `load` file. This will reload the file defined at the beginning of your debugging session and upload it to the target ```shell= (gdb) load Loading section .text, size 0x2e50 lma 0x2000 Loading section .ramfunc, size 0x60 lma 0x4e50 Loading section .data, size 0x110 lma 0x4eb0 Start address 0x2910, load size 12224 Transfer rate: 3 KB/sec, 4074 bytes/write. Keep debugging GDB Console Link TUI Link GDB has a console GUI option available with the command line option --tui In the upper frame you can see the code that's being executed. GDB init file Link From this example dashboard we can generate a custom .gdbinit file for the SCK which will be placed in the HOME directory... (ON GOING) :::info Would be interesting to generate a custom option for production validation and one for internal debugging purposes ::: For references about where to locate the .gdbinit and more custom behaviour for gdb in general see here . GDB from Sublime Text Link Documentarlo aqui... (WIP) Setup Platformio project with sublime Text Setup sublimeGDB Reference Link General GDB references and examples Link Debugging with GDB - Book Debugging example from GDB and OpenOCD Arduino zero example Additional notes from Platformio documentation Link How to set other DEBUG FLAGS About project configuration with Platformio init Check here for building an *.ini file with custom build target for debugging and production. notas a agregar Link Hacer un extracto de la documentaci\u00f3n de openocd y de los espec\u00edficos para samd21: Link http://openocd.org/doc-release/html/Flash-Commands.html#flashprotect ```= Flash Driver: at91samd All members of the ATSAMD, ATSAMR, ATSAML and ATSAMC microcontroller families from Atmel include internal flash and use ARM\u2019s Cortex-M0+ core. This driver uses the same cmd names/syntax as See at91sam3. Command: at91samd chip-erase Issues a complete Flash erase via the Device Service Unit (DSU). This can be used to erase a chip back to its factory state and does not require the processor to be halted. Command: at91samd set-security Secures the Flash via the Set Security Bit (SSB) command. This prevents access to the Flash and can only be undone by using the chip-erase command which erases the Flash contents and turns off the security bit. Warning: at this time, openocd will not be able to communicate with a secured chip and it is therefore not possible to chip-erase it without using another tool. at91samd set-security enable Command: at91samd eeprom Shows or sets the EEPROM emulation size configuration, stored in the User Row of the Flash. When setting, the EEPROM size must be specified in bytes and it must be one of the permitted sizes according to the datasheet. Settings are written immediately but only take effect on MCU reset. EEPROM emulation requires additional firmware support and the minumum EEPROM size may not be the same as the minimum that the hardware supports. Set the EEPROM size to 0 in order to disable this feature. at91samd eeprom at91samd eeprom 1024 Command: at91samd bootloader Shows or sets the bootloader size configuration, stored in the User Row of the Flash. This is called the BOOTPROT region. When setting, the bootloader size must be specified in bytes and it must be one of the permitted sizes according to the datasheet. Settings are written immediately but only take effect on MCU reset. Setting the bootloader size to 0 disables bootloader protection. at91samd bootloader at91samd bootloader 16384 Command: at91samd dsu_reset_deassert This command releases internal reset held by DSU and prepares reset vector catch in case of reset halt. Command is used internally in event event reset-deassert-post. ``` links a revisar de tutoriales para openocd-gdb http://starter-kit.nettigo.eu/2015/debug-sketch-on-arduino-zero-pro-with-gdb-and-openocd/ http://www.blackmesaeast.com.pl/linux/openocd/ http://electronicdesign.com/memory/understanding-onboard-flash-programming https://learn.adafruit.com/debugging-the-samd21-with-gdb/software-installation :::success TODO Link Preparar una imagen para raspi lo m\u00e1s peque\u00f1a posible con todo lo necesario de manera que cada vez que agregue una feature se pueda actualizar automaticamente. Poner un lcd a la pi para automatizar todo headless de cara a hacer una estaci\u00f3n automatizada de fix/test SCK. Pensar como hacer diagn\u00f3stico remoto de los kits que requieran support. Una consola a traves de internet, se podr\u00eda con ssh tunneling? o con una interfaz html? pensarlo... ::: And what about the ESP8266? Link Starting to investigate the posiblities of debugging the ESP8266 part of the firmware, still we need to read a lot!. Some first clues: * https://hackaday.com/2015/12/12/squash-your-esp-8266-bugs-with-esp-gdbstub/ * GDBStub (via serial port) https://github.com/espressif/esp-gdbstub * https://github.com/sysprogs/esp8266-openocd * https://github.com/projectgus/openocd (seems dead) *[SCK]: Smart Citizen Kit *[SWD]: Serial Wire Debug *[GDB]: The GNU Project Debugger *[OpenOCD]: Open On-Chip Debugger Post Forum - Open Debugging for the SCK Link Hey everyone! Today we are going to take a pause on the audio development posts and talk about something we have been working on for a while now: an open source debugging toolchain for the Smart Citizen Kit. Sometimes (many times actually), our code won't do what we want it to do and we need to take a look at what it's doing. By using a debugger we will be able to see what is going on inside another program while it executes or even crashes. This is fairly straight forward when you code for a modern day computer, since most IDEs have a proper interface integrated for it. However, debugging a chip like the SAMD21 can sometimes be tricky and here is where it's interesting to use a debugging kit. Image Credit: XKCD To keep it simple: our final target is to be able to interact with the SAMD21 (or the chip) while it's executing the program and tell it to pause the execution, give us the value of some variables and then continue. We will release a fairly extensive report with documentation on this process, but for those interested in reading an overview on how to debug, this post can be a short introduction. So, here we go! The first item we need is the Open On-Chip Debugger (OpenOCD) which provides debugging with the assistance of a debug adapter . This adapter is a small hardware module which helps provide the right kind of electrical signaling to the target being debugged. These are required since the debug host, on which OpenOCD runs (i.e. your computer, a Raspberry PI...) won\u2019t usually have native support for such signaling, or the connector needed to hook up to the target. Image Credit: Smart Citizen These adapters are sometimes packaged as discrete dongles, which may generically be called hardware interface dongles (and are quite expensive). Some development boards also integrate them directly, which may let the development board connect directly to the debug host over USB (and sometimes also to power it over USB, like the Arduino Genuino Zero ). In the case of the Smart Citizen Kit , we have a SWD Adapter that supports Serial Wire Debug signaling to communicate with the ARM core . In our approach, using a complete open toolchain , OpenOCD is be running on a Raspberry Pi, and communicating with the SCK's SWD through the GPIO pins of the Pi. sequenceGDB- OpenOCD: Let s debug the SCKOpenOCD- GDB: OK!OpenOCD- SCK: We are debugging youNote right of SCK: SCK thinksSCK- OpenOCD: OK!GDB- OpenOCD: Load firmwareGDB- OpenOCD: Set BreakpointsOpenOCD- SCK: Do it!OpenOCD- SCK: Run!Note right of SCK: SCK runsNote right of SCK: SCK hits a breakpointSCK- GDB: Temperature sensor reading is 500\u00baCNote left of GDB: Oh, oh... Finally, to be able to actually see what is going on inside our firmware while it executes , we need something that is able to read and understand the machine code and hand it over to a human understandable interface. This is where GDB kicks in and helps us by: Starting our program, specifying anything that might affect its behavior. Make our program stop on specified conditions. Examine what has happened when our program has stopped. Change things in our program, so we can experiment with correcting the effects of one bug and go on to learn about another. GDB and OpenOCD will be running in a Raspberry Pi hooked up to the SWD interface of the SCK, and we will see what's going on in them from our computer's terminal via SSH. Fairly simple , right? Now, we can make some changes to our code, make GDB flash it to the SCK and keep debugging in a completely open toolchain!","title":"Debugging the firmware"},{"location":"Firmware/Guides/Debugging the firmware/#debugging-the-firmware","text":"These are working notes about the process and the necessary components to work directly with the MCU flash memory and interactively debugging with a toolchain based on open hardware and software.","title":"Debugging the Firmware"},{"location":"Firmware/Guides/Debugging the firmware/#raspberry-pi-setup","text":"First download and copy Raspbian Lite to your SDcard, here are the installation docs . Add wifi configuration Create a file name wpa_supplicant.conf on the /boot partition of the SD card, the content of this file should looks like this: ```shell= ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"wifi_ssid\" psk=\"wifi_password\" } ``` Replacing wifi_ssid and wifi_password with your actual wifi network information. The wpa_supplicant.conf file will be copied to /etc/wpa_supplicant/ directory automatically once the Raspberry Pi is booted up. Enable SSH server. SSH access is disabled as default for security reasons. To enable the SSH server when Raspberry Pi is booted up for the first time: create a file called ssh with no file extension and no contents, and copy it to the /boot partition on the SD card. Find your raspberry on the network :::danger Corregir desde aqui ::: In order to find a raspberry pi over the network we can use commands like these: Linux ```shell= MY_IP_RANGE=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}') nmap -sn MY_IP_RANGE IP= MY_IP_RANGE && IP= (arp -na | grep b8:27:eb | grep -Eo '[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}') ssh $IP; **Mac** (To be reviewed) ```shell= MY_RANGE=$(ip addr | grep UP -A3 | grep 192 -A0 | awk {print $2} ) nmap -sn $MY_RANGE arp -na | grep b8:27:eb SSH login without password: Si nunca has generado RSA key: ssh-keygen sin poner nada en la passphrase. Copiar la clave a la raspberry: ssh-copy-id -i ~/.ssh/id_rsa.pub raspi-address Ya que est\u00e9 lista la raspberry con conectarla debe bootear y conectarse sola a la red, el commando que esta arriba ( MY_IP... ) la localiza y hace ssh login. Once you are logged to your raspberry pi and connected to the internet, do a system upgrade : ```shell= sudo apt-get install rpi-update sudo rpi-update sudo apt-get update sudo apt-get dist-upgrade Install some **dependencies**: ```shell= sudo apt-get install git autoconf libtool make pkg-config libusb-1.0-0 libusb-1.0-0-dev telnet sshfs","title":"Raspberry pi setup"},{"location":"Firmware/Guides/Debugging the firmware/#openocd-installation","text":"Clon openocd repository and compile: shell=git clone git://git.code.sf.net/p/openocd/code openocd-codecd openocd-code./bootstrap./configure --enable-sysfsgpio --enable-bcm2835gpiomakesudo make install\u0002wzxhzdk:2\u0003You can store this file in OpenOCD scripts dir so it will auto find it shell= sudo mv sck.cfg /usr/local/share/openocd/scripts/ and then run the OpenOCD server with: ```shell= sudo openocd -f sck.cfg Then you can connect to OpenOCD, if you want to connect from an external computer, replace 127.0.0.1 with your Raspberry Pi IP address. ```shell= telnet 127.0.0.1 4444 :::info On a ***arduino zero*** go to the directory where the *.cfg is and: ```shell= openocd -f arduino_zero.cfg Open On-Chip Debugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport swd . To override use transport select transport . none separate adapter speed: 400 kHz cortex_m reset_config sysresetreq Info : CMSIS-DAP: SWD Supported Info : CMSIS-DAP: Interface Initialised (SWD) Info : CMSIS-DAP: FW Version = 02.01.0157 Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1 Info : CMSIS-DAP: Interface ready Info : clock speed 400 kHz Info : SWD DPIDR 0x0bc11477 Info : at91samd21g18.cpu: hardware has 4 breakpoints, 2 watchpoints :::","title":"Openocd installation"},{"location":"Firmware/Guides/Debugging the firmware/#using-openocd-remotely-from-other-computer","text":"We need to give the OpenOCD server access to your project files that are remotely stored. To do this you can mount your working directory remotely on the Raspberry Pi via SSH: ```shell= ssh pi@raspi_address pi$ mkdir working_dir pi$ sshfs user@computer_address:working_path working_dir pi$ cd working_dir pi$ sudo openocd -f sck.cfg Then you can connect to OpenOCD from your computer with: ```shell= telnet raspi_address 4444","title":"Using OpenOCD remotely from other computer"},{"location":"Firmware/Guides/Debugging the firmware/#uploading-arduino-original-bootloader","text":"Get the bootloader file here and build it. Faltan instrucciones para compilar el bootloader Connect to OpenOCD server and run: ```shell= reset halt at91samd bootloader 0 at91samd chip-erase program samd21_sam_ba.bin verify at91samd bootloader 8192 reset run If you don t see any error youre done! ### Uploading SCK Firmware * Install platformio, download and build SCK firmware * Connect to OpenOCD server and run: ```shell= reset halt flash write_image firmware.bin 8192 verify_image firmware.bin 8192 reset run reset run","title":"Uploading Arduino original bootloader"},{"location":"Firmware/Guides/Debugging the firmware/#fixing-usb-native-port-not-detected-after-burn-bootloader-bug","text":":::danger ORGANIZAR ESTO!!!* Documentar aqui el bug que deja muerto el bootloader por watchdog loop y c\u00f3mo arreglarlo ::: Hay un bug que deja inutilizable al SCK . El Openocd borra el NVM user row y mete problemas con los fuses del watchDog y otras cosas, creo que la unica manera de reduperarlo sera con atmel studio. Un post del que implemento varios comandos especificos para el at91samd, en donde dice que seria facil agregar la capacidad de modificar el user row. http://yurovsky.github.io/2014/10/13/openocd-samd20-improvements/ y el codigo Esto lo arregla!!!!!!: Esto deshabilita la bootloader protection, borra todo el chip, programa el bootloader, programa un sketch que corrige los fuses cuando corre y vuelve a poner la protecci\u00f3n del bootlader este es el paso importante que no hace la IDE de Arduino por que si lo haces dos veces seguidas dejas el chip in\u00fatil por culpa del fuse de watchdog. Esta soluci\u00f3n usa el sketch para corregir el fuse una vez reseteado el SAM y as\u00ed queda con protecci\u00f3n y funcionando. Build this code and upload it to the SCK like this: ```shell= reset halt at91samd bootloader 0 at91samd chip-erase flash write_image samd21_sam_ba.bin 0 verify_image samd21_sam_ba.bin 0 flash write_image unbrickSCK.bin 8192 verify_image unbrickSCK.bin 8192 at91samd bootloader 8192 ### Working with registers * Hay que investigar las posibilidades ... * You can obtain a register description with the ` reg ` command * Here is a description of the registers on [ Atmel datasheet ]( http : //www.atmel.com/Images/Atmel-42181-SAM-D21_Datasheet.pdf#_OPENTOPIC_TOC_PROCESSING_d94e34017) [ OpenOCD manual ]( http : //openocd.org/doc/html/index.html) ## ![](https: //i.imgur.com/0iMkHRt.png) GDB ### General description The purpose of a debugger such as GDB is to allow you to see what is going on \u201c inside \u201d another program while it executes \u2014 or what another program was doing at the moment it crashed . GDB can do four main kinds of things ( plus other things in support of these ) to help you catch bugs in the act : * Start your program , specifying anything that might affect its behavior . * Make your program stop on specified conditions . * Examine what has happened , when your program has stopped . * Change things in your program , so you can experiment with correcting the effects of one bug and go on to learn about another . ### Debugging session with Raspberry Pi as the OpenOCD server Once your raspberry pi is setup with above instructions you can just do : ``` shell = ssh pi @ RaspberryAddress sudo openocd - f sck . cfg cd / platformio_project / path arm - none - eabi - gdb . / pioenvs / zeroUSB / firmware . elf ( gdb ) target remote RaspberryAddress : 3333 ( gdb ) monitor reset run If you are using platformio , you need to modify the compiling option to avoid optimisation with -0g message to the compiler. In case you are not using platformio , activate verbose compiling output at Arduino IDE and find your compiled .elf directory. [env:zeroUSB] platform = atmelsam board = zeroUSB framework = arduino build_flags = -Og Now we are all set and ready to go. The debugger is waiting for instructions on the execution, which we detail below. :::info Quick handy instructions inside GDB environment 1. (gdb) appears in every line and you don't have to type it each time 2. In case you need to exit GDB, just type in quit , but remember always killing the process before, should you have a target running ```shell= (gdb) kill (gdb) quit 3. `RET` repeats the previous command ::: ### GDB commands All commands in gdb during debugging are detailed in the GDB guide, chapter [GDB commands in detail (continue and stepping)](https://sourceware.org/gdb/onlinedocs/gdb/Continuing-and-Stepping.html) An **extract** of some useful commands are detailed below: #### Continuing and stepping `continue [ignore-count]` * Resumes program execution until next breakpoint. `[ignore-count]` argument allows to specify a further number of times to ingore a breakpoint. ```shell= (gdb) continue Continuing. Breakpoint 1, tick () at src/HOLA.cpp:9 9 void tick() { step count Continues running your program until control reaches a different source line , only availabe for source lines and functions compiled with debugging information. count is optional and states the number of steps to be performed before stopping, if no breakpoint arrives earlier. next [count] Continue to the next source line without going into functions . It has the same functionality as step, but it stays in the same stack frame. count works as in step count . As well, it understands jumps calls as in the end of for loops and return to the beginning of the loop. :::info set step-mode on/off sets the behaviour of (gdb) when stepping into a function with no debugging information. In the case of step-mode on , it inspects the first line of code of the function, whereas on step-mode off it skips the function completely. ::: finish Continue running until just after function in the selected stack frame returns . until Has the same behaviour as step , but it ignores the jumps between lines due to loops (for, whiles, etc), continuing to the next source code with incremental line number.","title":"Fixing USB Native Port Not Detected After Burn Bootloader bug"},{"location":"Firmware/Guides/Debugging the firmware/#breakpoints","text":"info breakpoints Retrieve information about breakpoints ```shell= (gdb) info breakpoints Num Type Disp Enb ress What 1 breakpoint keep y 0x00002140 in tick() at src/HOLA.cpp:9 breakpoint already hit 15 times `break` * Set a breakpoint in a specific function ```shell= (gdb) break loop Set a breakpoint in a specific line (344) ```shell= (gdb) break main.cpp:344 :::info Use the **tbreak** command instead of break if you want to stop the program once, and then remove the breakpoint. More **breakpoint condition** options can be found [**here**](https://sourceware.org/gdb/current/onlinedocs/gdb/Conditions.html#Conditions) you can find conditions for the breakpoints (expressions, counters, etc). ::: `watchpoint` * Set a watchpoint [**watchpoint**](https://sourceware.org/gdb/current/onlinedocs/gdb/Set-Watchpoints.html#Set-Watchpoints) to only stop once a variable has a certain value. ```shell= (gdb) watch timer :::info Type in info watchpoints to get information about watchpoints. ::: commands Set a list of actions related to the breakpoint: ```shell= break main.cpp:50 commands silent printf \"count is %d\\n\",count cont end `delete` * Delete a breakpoint ```shell= (gdb) delete 1 (gdb) info breakpoints No breakpoints or watchpoints.","title":"Breakpoints"},{"location":"Firmware/Guides/Debugging the firmware/#printing-setting-variables-and-more","text":"loop Read what is around a certain function ``shell=(gdb) l loop25 //while (!Serial) {26 //; // wait for serial port to connect. Needed for native USB port only27 //}28 }2930 void loop() {31 // put your main code here, to run repeatedly:32 Serial.println( HOLA );33 tick();34 Serial.println(millis());\u0002wzxhzdk:13\u0003 set` Set variable to a certain value ```shell= (gdb) set timer = 0 #### Target commands (load) `load filename offset` * `Load` it is meant to make filename (an executable) available for debugging on the remote system\u2014by downloading it. `load` also records the filename symbol table in GDB, like the add-symbol-file command. The file is loaded at whatever address is specified in the executable, also into flash memory. --- :::danger Falta por explicar: * display * diferencia entre hw y sw breakpoints [info](http://web.mit.edu/gnu/doc/html/gdb_7.html) ::: ### Making changes in the code Anytime we make a change in the code, we don t need to reload the debugging session. We can easily do so by: 1. Compile the code: a. Define Shell build in Sublime Text and configure a build sytem with: ``` shell_cmd : cd .. pio run ``` Then, everytime you hit Ctrl+B (Cmd+B) and you use your custom build system, it will automatically use this option. b. Or hit `pio run` in another terminal located in your project root directory 2. In gdb, `load` file. This will reload the file defined at the beginning of your debugging session and upload it to the target ```shell= (gdb) load Loading section .text, size 0x2e50 lma 0x2000 Loading section .ramfunc, size 0x60 lma 0x4e50 Loading section .data, size 0x110 lma 0x4eb0 Start address 0x2910, load size 12224 Transfer rate: 3 KB/sec, 4074 bytes/write. Keep debugging","title":"Printing / setting variables and more"},{"location":"Firmware/Guides/Debugging the firmware/#gdb-console","text":"","title":"GDB Console"},{"location":"Firmware/Guides/Debugging the firmware/#tui","text":"GDB has a console GUI option available with the command line option --tui In the upper frame you can see the code that's being executed.","title":"TUI"},{"location":"Firmware/Guides/Debugging the firmware/#gdb-init-file","text":"From this example dashboard we can generate a custom .gdbinit file for the SCK which will be placed in the HOME directory... (ON GOING) :::info Would be interesting to generate a custom option for production validation and one for internal debugging purposes ::: For references about where to locate the .gdbinit and more custom behaviour for gdb in general see here .","title":"GDB init file"},{"location":"Firmware/Guides/Debugging the firmware/#gdb-from-sublime-text","text":"Documentarlo aqui... (WIP) Setup Platformio project with sublime Text Setup sublimeGDB","title":"GDB from Sublime Text"},{"location":"Firmware/Guides/Debugging the firmware/#reference","text":"","title":"Reference"},{"location":"Firmware/Guides/Debugging the firmware/#general-gdb-references-and-examples","text":"Debugging with GDB - Book Debugging example from GDB and OpenOCD Arduino zero example","title":"General GDB references and examples"},{"location":"Firmware/Guides/Debugging the firmware/#additional-notes-from-platformio-documentation","text":"How to set other DEBUG FLAGS About project configuration with Platformio init Check here for building an *.ini file with custom build target for debugging and production.","title":"Additional notes from Platformio documentation"},{"location":"Firmware/Guides/Debugging the firmware/#notas-a-agregar","text":"","title":"notas a agregar"},{"location":"Firmware/Guides/Debugging the firmware/#hacer-un-extracto-de-la-documentacion-de-openocd-y-de-los-especificos-para-samd21","text":"http://openocd.org/doc-release/html/Flash-Commands.html#flashprotect ```= Flash Driver: at91samd All members of the ATSAMD, ATSAMR, ATSAML and ATSAMC microcontroller families from Atmel include internal flash and use ARM\u2019s Cortex-M0+ core. This driver uses the same cmd names/syntax as See at91sam3. Command: at91samd chip-erase Issues a complete Flash erase via the Device Service Unit (DSU). This can be used to erase a chip back to its factory state and does not require the processor to be halted. Command: at91samd set-security Secures the Flash via the Set Security Bit (SSB) command. This prevents access to the Flash and can only be undone by using the chip-erase command which erases the Flash contents and turns off the security bit. Warning: at this time, openocd will not be able to communicate with a secured chip and it is therefore not possible to chip-erase it without using another tool. at91samd set-security enable Command: at91samd eeprom Shows or sets the EEPROM emulation size configuration, stored in the User Row of the Flash. When setting, the EEPROM size must be specified in bytes and it must be one of the permitted sizes according to the datasheet. Settings are written immediately but only take effect on MCU reset. EEPROM emulation requires additional firmware support and the minumum EEPROM size may not be the same as the minimum that the hardware supports. Set the EEPROM size to 0 in order to disable this feature. at91samd eeprom at91samd eeprom 1024 Command: at91samd bootloader Shows or sets the bootloader size configuration, stored in the User Row of the Flash. This is called the BOOTPROT region. When setting, the bootloader size must be specified in bytes and it must be one of the permitted sizes according to the datasheet. Settings are written immediately but only take effect on MCU reset. Setting the bootloader size to 0 disables bootloader protection. at91samd bootloader at91samd bootloader 16384 Command: at91samd dsu_reset_deassert This command releases internal reset held by DSU and prepares reset vector catch in case of reset halt. Command is used internally in event event reset-deassert-post. ``` links a revisar de tutoriales para openocd-gdb http://starter-kit.nettigo.eu/2015/debug-sketch-on-arduino-zero-pro-with-gdb-and-openocd/ http://www.blackmesaeast.com.pl/linux/openocd/ http://electronicdesign.com/memory/understanding-onboard-flash-programming https://learn.adafruit.com/debugging-the-samd21-with-gdb/software-installation :::success","title":"Hacer un extracto de la documentaci\u00f3n de openocd y de los espec\u00edficos para samd21:"},{"location":"Firmware/Guides/Debugging the firmware/#todo","text":"Preparar una imagen para raspi lo m\u00e1s peque\u00f1a posible con todo lo necesario de manera que cada vez que agregue una feature se pueda actualizar automaticamente. Poner un lcd a la pi para automatizar todo headless de cara a hacer una estaci\u00f3n automatizada de fix/test SCK. Pensar como hacer diagn\u00f3stico remoto de los kits que requieran support. Una consola a traves de internet, se podr\u00eda con ssh tunneling? o con una interfaz html? pensarlo... :::","title":"TODO"},{"location":"Firmware/Guides/Debugging the firmware/#and-what-about-the-esp8266","text":"Starting to investigate the posiblities of debugging the ESP8266 part of the firmware, still we need to read a lot!. Some first clues: * https://hackaday.com/2015/12/12/squash-your-esp-8266-bugs-with-esp-gdbstub/ * GDBStub (via serial port) https://github.com/espressif/esp-gdbstub * https://github.com/sysprogs/esp8266-openocd * https://github.com/projectgus/openocd (seems dead) *[SCK]: Smart Citizen Kit *[SWD]: Serial Wire Debug *[GDB]: The GNU Project Debugger *[OpenOCD]: Open On-Chip Debugger","title":"And what about the ESP8266?"},{"location":"Firmware/Guides/Debugging the firmware/#post-forum-open-debugging-for-the-sck","text":"Hey everyone! Today we are going to take a pause on the audio development posts and talk about something we have been working on for a while now: an open source debugging toolchain for the Smart Citizen Kit. Sometimes (many times actually), our code won't do what we want it to do and we need to take a look at what it's doing. By using a debugger we will be able to see what is going on inside another program while it executes or even crashes. This is fairly straight forward when you code for a modern day computer, since most IDEs have a proper interface integrated for it. However, debugging a chip like the SAMD21 can sometimes be tricky and here is where it's interesting to use a debugging kit. Image Credit: XKCD To keep it simple: our final target is to be able to interact with the SAMD21 (or the chip) while it's executing the program and tell it to pause the execution, give us the value of some variables and then continue. We will release a fairly extensive report with documentation on this process, but for those interested in reading an overview on how to debug, this post can be a short introduction. So, here we go! The first item we need is the Open On-Chip Debugger (OpenOCD) which provides debugging with the assistance of a debug adapter . This adapter is a small hardware module which helps provide the right kind of electrical signaling to the target being debugged. These are required since the debug host, on which OpenOCD runs (i.e. your computer, a Raspberry PI...) won\u2019t usually have native support for such signaling, or the connector needed to hook up to the target. Image Credit: Smart Citizen These adapters are sometimes packaged as discrete dongles, which may generically be called hardware interface dongles (and are quite expensive). Some development boards also integrate them directly, which may let the development board connect directly to the debug host over USB (and sometimes also to power it over USB, like the Arduino Genuino Zero ). In the case of the Smart Citizen Kit , we have a SWD Adapter that supports Serial Wire Debug signaling to communicate with the ARM core . In our approach, using a complete open toolchain , OpenOCD is be running on a Raspberry Pi, and communicating with the SCK's SWD through the GPIO pins of the Pi. sequenceGDB- OpenOCD: Let s debug the SCKOpenOCD- GDB: OK!OpenOCD- SCK: We are debugging youNote right of SCK: SCK thinksSCK- OpenOCD: OK!GDB- OpenOCD: Load firmwareGDB- OpenOCD: Set BreakpointsOpenOCD- SCK: Do it!OpenOCD- SCK: Run!Note right of SCK: SCK runsNote right of SCK: SCK hits a breakpointSCK- GDB: Temperature sensor reading is 500\u00baCNote left of GDB: Oh, oh... Finally, to be able to actually see what is going on inside our firmware while it executes , we need something that is able to read and understand the machine code and hand it over to a human understandable interface. This is where GDB kicks in and helps us by: Starting our program, specifying anything that might affect its behavior. Make our program stop on specified conditions. Examine what has happened when our program has stopped. Change things in our program, so we can experiment with correcting the effects of one bug and go on to learn about another. GDB and OpenOCD will be running in a Raspberry Pi hooked up to the SWD interface of the SCK, and we will see what's going on in them from our computer's terminal via SSH. Fairly simple , right? Now, we can make some changes to our code, make GDB flash it to the SCK and keep debugging in a completely open toolchain!","title":"Post Forum - Open Debugging for the SCK"},{"location":"Firmware/Guides/Developers Guide/","text":"Building and flashing the Smartcitizen Kit firmware Link The data board of your Smartcitizen Kit is runned by two microcontrolers : The main one is an Atmel SAMD21 , this chip is in charge of all the normal tasks like reading the sensors, saving data, interacting with the user, etc. For this chip we need two software components the bootloader and the main firmware. For communications the SCK has an ESP8266 microcontroler with Wifi capabilities , this chip receives instructions from the SAMD21 via serial port and takes care of publishing the collected data through the network. This chip needs a main firmware and a filesystem that stores the web pages for the setup mode server. Development enviroment Link The Smartcitizen Kit Firmware is on our repository on github so you will need git software installed . To build the Smartcitizen Kit firmware you need a linux computer with platformio installed, you don't need the full IDE installation (Atom). You can follow this instructions to install only the console version. For bootloader upload you also need OpenOCD somewhere in your PATH. You can use platformIO provided binary, normally it is located in ~/.platformio/packages/tool-openocd . Getting the firmware Link To get the firmware just run: ```=bash git clone --recursive https://github.com/fablabbcn/smartcitizen-kit-20 The bootloader repository is a [submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules) of the main firmware so you must do a `--recursive` clone to get it. :::info I you download manually (with the _clone or download_ button on github) you will **not** get the bootloader code, but you can get it from [here](https://github.com/fablabbcn/uf2-samdx1/tree/88aa54c1afab2647904aaccbe1a6b960c02fdb24). ::: ## SAMD21 bootloader If your kit doesn t have the bootloader already flashed (all the kits that we ship come with it) you will need an [ATMEL-ICE](https://www.digikey.es/en/product-highlight/a/atmel/atmel-ice-programmer-debugger) programmer. This process can also be done with a Raspberry Pi computer and the proper [connector](https://www.adafruit.com/product/2094) and cables, we are preparing the documentation for this process. ![](https://i.imgur.com/wSVxBMB.png) Connect the Atmel-ICE programmer to the 10 pin SWD connector and to your computer. Power the SCK via USB, you can use any USB charger or even your computer. Open a terminal, go to the folder where you cloned the firmware repository and run: ```=bash cd smartcitizen-kit-20 ./build.sh boot If you have everything connected click any key to continue, you will see a lot of output when compiling, the led on the SCK should breath in green and you should see an output similar to this: You are ready for the next step, just remember to disconnect the Atmel-ICE programmer and connect the SCK to your computer with a USB cable. SAMD21 firmware Link The bootloader we just flashed allows a very simple way of uploading the SCK firmware based on the UF2 format, when you double-click the reset button of your kit it will expose a MSD interface to your computer and a new drive will popup where you can just drag the compiled firmware file (converted to UF2 format). Build script Link You can use the same script used to flash the bootloader ( build.sh ) that will do everything for you: compile the firmware, convert the binary to UF2 format and upload it to the kit: ```=bash ./build.sh sam ![](https://i.imgur.com/OtsQ3WZ.png) If you haven t already, **double-click the reset button of your kit** an click any key. If this is your first time building the software, platformio will take a while installing all the needed dependencies, be patient. If there are no errors you should see an output similar to this: ![](https://i.imgur.com/dojcKGy.png) The script will leave a copy of the compiled software in UF2 format called _SAM_firmware.uf2_ you can use this file to reflash your kit without compiling it again. ### Manual install If you want to install the firmware manually (or you had some problem with the build script) just follow this steps: ```=bash cd sam pio run At the end you should see some output similar to this: then do: ```=bash cd .. tools/uf2conv.py -o SAM_firmware.uf2 sam/.pioenvs/sck2/firmware.bin you should see: ![](https://i.imgur.com/O148osW.png) don t worry about the _NO DEVICE WAS FLASHED_ message, we are doing it manually. Now **double-click the reset button of your kit** open your favorite file browser and drag the file you just created to the _SCK-2.0_ drive. The kit will reset and run the new firmware. ![](https://i.imgur.com/AbYTUjc.png) :::info Keep in mind that if your computer is not configured to automount new drives you will need to mount your sck manually ([as any other USB drive](https://linuxconfig.org/howto-mount-usb-drive-in-linux)). ::: ## ESP8266 firmware Just like the other parts of the process this is also covered by our `build.sh` script. So you can just do: ```=bash ./build.sh esp As before, if this is the first time you do it, it will take a while on downloading dependecies and building the firmware. In this case the upload process is different, since the ESP8266 chip is not connected to the USB interface the data must be uploadded through the SAMD21 chip. Our upload script takes care of searching for a SCK on the USB bus, sending a command to the kit so it put's himself in what we call bridge mode (white led) and uploading the firmware. This is the expected output: :::info Sometimes the ESP8266 and the uploader software don't get synced and the upload fails. Normally if you try again it will work. ::: ESP8266 filesystem Link This process is very similar to the previous one you just need to add the letters fs , and wait a little longer ;) =bash./build.sh espfs that's all! tags: guides devdocs docs Link *[SCK]: Smartcitizen Kit *[SWD]: Serial Wire Debug *[MSD]: Massive Storage Device","title":"Developers Guide"},{"location":"Firmware/Guides/Developers Guide/#building-and-flashing-the-smartcitizen-kit-firmware","text":"The data board of your Smartcitizen Kit is runned by two microcontrolers : The main one is an Atmel SAMD21 , this chip is in charge of all the normal tasks like reading the sensors, saving data, interacting with the user, etc. For this chip we need two software components the bootloader and the main firmware. For communications the SCK has an ESP8266 microcontroler with Wifi capabilities , this chip receives instructions from the SAMD21 via serial port and takes care of publishing the collected data through the network. This chip needs a main firmware and a filesystem that stores the web pages for the setup mode server.","title":"Building and flashing the Smartcitizen Kit firmware"},{"location":"Firmware/Guides/Developers Guide/#development-enviroment","text":"The Smartcitizen Kit Firmware is on our repository on github so you will need git software installed . To build the Smartcitizen Kit firmware you need a linux computer with platformio installed, you don't need the full IDE installation (Atom). You can follow this instructions to install only the console version. For bootloader upload you also need OpenOCD somewhere in your PATH. You can use platformIO provided binary, normally it is located in ~/.platformio/packages/tool-openocd .","title":"Development enviroment"},{"location":"Firmware/Guides/Developers Guide/#getting-the-firmware","text":"To get the firmware just run: ```=bash git clone --recursive https://github.com/fablabbcn/smartcitizen-kit-20 The bootloader repository is a [submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules) of the main firmware so you must do a `--recursive` clone to get it. :::info I you download manually (with the _clone or download_ button on github) you will **not** get the bootloader code, but you can get it from [here](https://github.com/fablabbcn/uf2-samdx1/tree/88aa54c1afab2647904aaccbe1a6b960c02fdb24). ::: ## SAMD21 bootloader If your kit doesn t have the bootloader already flashed (all the kits that we ship come with it) you will need an [ATMEL-ICE](https://www.digikey.es/en/product-highlight/a/atmel/atmel-ice-programmer-debugger) programmer. This process can also be done with a Raspberry Pi computer and the proper [connector](https://www.adafruit.com/product/2094) and cables, we are preparing the documentation for this process. ![](https://i.imgur.com/wSVxBMB.png) Connect the Atmel-ICE programmer to the 10 pin SWD connector and to your computer. Power the SCK via USB, you can use any USB charger or even your computer. Open a terminal, go to the folder where you cloned the firmware repository and run: ```=bash cd smartcitizen-kit-20 ./build.sh boot If you have everything connected click any key to continue, you will see a lot of output when compiling, the led on the SCK should breath in green and you should see an output similar to this: You are ready for the next step, just remember to disconnect the Atmel-ICE programmer and connect the SCK to your computer with a USB cable.","title":"Getting the firmware"},{"location":"Firmware/Guides/Developers Guide/#samd21-firmware","text":"The bootloader we just flashed allows a very simple way of uploading the SCK firmware based on the UF2 format, when you double-click the reset button of your kit it will expose a MSD interface to your computer and a new drive will popup where you can just drag the compiled firmware file (converted to UF2 format).","title":"SAMD21 firmware"},{"location":"Firmware/Guides/Developers Guide/#build-script","text":"You can use the same script used to flash the bootloader ( build.sh ) that will do everything for you: compile the firmware, convert the binary to UF2 format and upload it to the kit: ```=bash ./build.sh sam ![](https://i.imgur.com/OtsQ3WZ.png) If you haven t already, **double-click the reset button of your kit** an click any key. If this is your first time building the software, platformio will take a while installing all the needed dependencies, be patient. If there are no errors you should see an output similar to this: ![](https://i.imgur.com/dojcKGy.png) The script will leave a copy of the compiled software in UF2 format called _SAM_firmware.uf2_ you can use this file to reflash your kit without compiling it again. ### Manual install If you want to install the firmware manually (or you had some problem with the build script) just follow this steps: ```=bash cd sam pio run At the end you should see some output similar to this: then do: ```=bash cd .. tools/uf2conv.py -o SAM_firmware.uf2 sam/.pioenvs/sck2/firmware.bin you should see: ![](https://i.imgur.com/O148osW.png) don t worry about the _NO DEVICE WAS FLASHED_ message, we are doing it manually. Now **double-click the reset button of your kit** open your favorite file browser and drag the file you just created to the _SCK-2.0_ drive. The kit will reset and run the new firmware. ![](https://i.imgur.com/AbYTUjc.png) :::info Keep in mind that if your computer is not configured to automount new drives you will need to mount your sck manually ([as any other USB drive](https://linuxconfig.org/howto-mount-usb-drive-in-linux)). ::: ## ESP8266 firmware Just like the other parts of the process this is also covered by our `build.sh` script. So you can just do: ```=bash ./build.sh esp As before, if this is the first time you do it, it will take a while on downloading dependecies and building the firmware. In this case the upload process is different, since the ESP8266 chip is not connected to the USB interface the data must be uploadded through the SAMD21 chip. Our upload script takes care of searching for a SCK on the USB bus, sending a command to the kit so it put's himself in what we call bridge mode (white led) and uploading the firmware. This is the expected output: :::info Sometimes the ESP8266 and the uploader software don't get synced and the upload fails. Normally if you try again it will work. :::","title":"Build script"},{"location":"Firmware/Guides/Developers Guide/#esp8266-filesystem","text":"This process is very similar to the previous one you just need to add the letters fs , and wait a little longer ;) =bash./build.sh espfs that's all!","title":"ESP8266 filesystem"},{"location":"Firmware/Guides/Developers Guide/#tags-guides-devdocs-docs","text":"*[SCK]: Smartcitizen Kit *[SWD]: Serial Wire Debug *[MSD]: Massive Storage Device","title":"tags: guides devdocs docs"},{"location":"Firmware/Guides/Firmware updates/","text":"Updating the Smartcitizen Kit 2.0 Link When new features are developed or bugs are fixed we will release new versions of the SCK firmware. updating your kit is very simple: Connect your kit with a micro USB cable to your computer. Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser. Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser. Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer. :::info You can backup your current firmware version just saving the file called CURRENT.UF2 . ::: Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version. After the update you just done, when your SCK gets connected to the network it will check for an updated versi\u00f3n of the wifi chip (ESP8266) firmware . If there is a new version your SCK will update automatically.","title":"Firmware updates"},{"location":"Firmware/Guides/Firmware updates/#updating-the-smartcitizen-kit-20","text":"When new features are developed or bugs are fixed we will release new versions of the SCK firmware. updating your kit is very simple: Connect your kit with a micro USB cable to your computer. Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser. Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser. Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer. :::info You can backup your current firmware version just saving the file called CURRENT.UF2 . ::: Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version. After the update you just done, when your SCK gets connected to the network it will check for an updated versi\u00f3n of the wifi chip (ESP8266) firmware . If there is a new version your SCK will update automatically.","title":"Updating the Smartcitizen Kit 2.0"},{"location":"Living Lab Station/Living Lab Station/","text":"Control digital potentiometers Link The Living Lab Station, formerly known as the High-End Sensors, is aimed at providing the Living Labs with a system for monitoring the performance of their interventions. The Station aims at providing a solution that can be used by the Living Labs not just from a scientific point of view but also as a tool to engage local communities on air pollution related issues. The station is designed with a modular principle where sensors can be added easily added expanding the capabilities of the installation or replaced when they are damaged or the sensors lifetime is over. From a costs perspective while being more expensive than the Citizen Kit it is also conceived as a low-cost solution. That allows to guarantee at least four stations will be available for each Living Lab to increase the spatial resolution and reliability of the measurements. The design builds on top of the Citizen Kit adding an extra set of more accurate sensors especially aimed at measuring air pollutants. The sensors include the Gas Sensor Board, featuring EC Carbon Monoxide, Dioxide Nitrogen and Ozone sensors and the PM Sensor Board, featuring a PM 2.5 / PM 10 sensor. With all the sensor together this Kit provides information on Air Temperature, Relative Humidity, Noise Level, Ambient Light, Barometric Pressure, Particles Matter (PM 2.5 / 10), Carbon Monoxide, Dioxide Nitrogen and Ozone. The sensors are later described in detail in the document at the Sensor Components section.","title":"Living Lab Station"},{"location":"Living Lab Station/Living Lab Station/#control-digital-potentiometers","text":"The Living Lab Station, formerly known as the High-End Sensors, is aimed at providing the Living Labs with a system for monitoring the performance of their interventions. The Station aims at providing a solution that can be used by the Living Labs not just from a scientific point of view but also as a tool to engage local communities on air pollution related issues. The station is designed with a modular principle where sensors can be added easily added expanding the capabilities of the installation or replaced when they are damaged or the sensors lifetime is over. From a costs perspective while being more expensive than the Citizen Kit it is also conceived as a low-cost solution. That allows to guarantee at least four stations will be available for each Living Lab to increase the spatial resolution and reliability of the measurements. The design builds on top of the Citizen Kit adding an extra set of more accurate sensors especially aimed at measuring air pollutants. The sensors include the Gas Sensor Board, featuring EC Carbon Monoxide, Dioxide Nitrogen and Ozone sensors and the PM Sensor Board, featuring a PM 2.5 / PM 10 sensor. With all the sensor together this Kit provides information on Air Temperature, Relative Humidity, Noise Level, Ambient Light, Barometric Pressure, Particles Matter (PM 2.5 / 10), Carbon Monoxide, Dioxide Nitrogen and Ozone. The sensors are later described in detail in the document at the Sensor Components section.","title":"Control digital potentiometers"},{"location":"Living Lab Station/guides/Installation Guide/","text":"How to install? Link Living Lab Station Installation Guide Link What's on the Kit? Sensors Link 2x iSCAPE Living Lab Stations v2.0 iSCAPE Living Lab Station Urban Board 2.0 Data Board 2.0 PM Board 2.0 + 2 PM sensors Gas Pro Board 2.0 with 3 EC sensors 6Ah Battery Accessories MicroSD card 512MB USB Charger MicroSD to SD card adapter USB Power Supply 2m 3 Wire 220V cable Mounting brackets and screws Mounting tools (1x Wrench + 2 Allen Keys) Please read the documentation carefully if you have any question contact us at support@smartcitizen.me Sensor naming and reference Link Both Kits are setup to log data every 60 seconds on the sdcard. The target pollutants measured will be, per station are: Electrochemical Sensor : CO: AlphaSense CO-B4 NO2: AlphaSense NO2-B43F O3: AlphaSense OX-B431 Particle Sensors : PM1 , PM2.5 , PM10 : 2 x PlanTowerPMS5003 For tracking purposes these will be the sensor references: Electrochemical Sensors | | CO-B4 (slot 1) | NO2-B43F (slot 2) | OX-B431 (slot 3) | | :--------: | :--------: | :--------: | :--------: | | Citizen 2 | 162581717 | 202160410 | 204160162 | | Citizen 3 | 162581725 | 202160407 | 204160154 | PM Sensors | | PMS5003#1 | PMS5003#2 | | :--------: | :--------: | :--------: | | Citizen 2 | 2017122902980 | 2017122902941 | | Citizen 2 | 2017122902976 | 2017122902977 | Sensor assembly Link The sensors are already assembled and we strongly require to not swap any of the sensors among them. We keep track internally of all sensor deployments and it is very important to keep the KITS as they are in order to avoid calibration data mismatch. Station Setup Link You have to follow some simple steps to setup your SCK to capture data and store it on an SD card: Remove the 3 protective stickers covering the Gas Sensors. Use the small allen key to unscrew the 3 screw on top. Remove the top cover Use the big allen to remove the 3 screw and pull the cover up. Make sure the SD card is inserted in the kit. :::danger The configuration of enabled/disabled sensors is stored on the SDcard so the cards shouldn't be swaped between kits. ::: :::warning If you have problems with a SD Card be sure to format it with FAT32 filesystem and don't copy any configuration file before inserting it on the kit, the kit will re-save the last valid configuration on the new sdcard. ::: Connect the battery to your SCK. The led should turn pink indicating SD card logging. The SCK will try to start immediately, but since the clock is not yet configured it will blink for 5 seconds and the led will turn red (setup mode). Syncronize the RTC (Real Time Clock) of the SCK with UTC time . The simplest way of doing this is to join to your SCK WiFi network: With your computer or smartphone search for a wifi network named SmartCitizenXXXX (The exact name should come in a sticker in the back of your kit). Once you join the network a Network Login screen should appear, if this doesn't happen open your browser and type 192.168.1.1 as the URL. Go to SD Card Mode Once the time it's sync the led should turn pink again and your sensor will start logging data to the SD card. Congratulations! You are ready close the enclosure and start capturing data. :::success TURN OFF Done for today? Every time you want to stop the Kit from logging simply press the button for 5 seconds. The led should stop bliking and your Kit will be OFF . To turn it ON simply press the button again. ::: :::info GET THE DATA Download the data from the SD card First turn off your Kit by pressing the button for 5 seconds. Then remove the micro SD card and plug the card on your computer using a Micro SD card reader. You will find inside a YYYY-MM-DD.CSV with all the data. Check the SD card file description section for more info. Data processing The collected data requires a custom and complex data processing using the iScape Sensor Analysis Framework The process will be fully documented here on the next few weeks. ::: :::warning FACTORY RESET Is your Kit not working properly? This will fully reset the Kit and should help you fix any issues you might have. Disconnect and connect the battery without any USB cable being connected. Then press the button until the light goes off and on again (around 15 sec). ::: Sensor data collection Link The data will be collected in SD card mode during this deployment. NB: we are currently developing a direct CSV upload to the Smart Citizen platform that will be available in the following weeks. SD card file description Link The data logged to sdcard will be saved in a CSV comma separated value file. The header of the data will be written at the top of the file and every time a sensor is enabled or disabled . The posible values are: Time The time at wich the readings were taken in ISO UTC Combined date and time format. Each sensor could have its own reading interval and they are grouped in 15 seconds intervals, so it is posible (if a sensor has longer reading interval) that there are some columns without a reading for each line. Battery-% Noise-dBc Humidity-% Temperature-C Light-Lux Gases Board 1A-mV Gas Pro Board Carbon Monoxide auxilliary electrode. Gases Board 1W-mV Gas Pro Board Carbon Monoxide working electrode. Gases Board 2A-mV Gas Pro Board Nitrogen Dioxide auxilliary electrode. Gases Board 2W-mV Gas Pro Board Nitrogen Dioxide working electrode. Gases Board 3A-mV Gas Pro Board Ozone + Nitrogen Dioxide auxilliary electrode. Gases Board 3W-mV Gas Pro Board Ozone + Nitrogen Dioxide working electrode. PM1.0 PM1.0 in ug/m3 PM2.5 PM2.5 in ug/m3 PM10.0 PM10.0 in ug/m3 Sensor considerations Link Electrochemical sensor The electrochemical sensors need stabilisation time under the testing conditions they will be at. It is important to set and power the sensors with sufficient time (1-2 days) on the test environment for them to adapt. The newer the sensor, the more stabilisation time it requires. For this deployment, you will be receiving brand new sensors. Humidity and temperature extremes will require of further sensor adaptation, in order to dry out or absorb the necessary humidity for their proper functioning. :::danger Do not extract/attach the sensor capsule from the base board while powered, this could irreversibly damage the sensor. ::: Particle Sensor The particle sensors measurements are delivered as averages of the two sensors with periodic validity checks. We are currently developing one-shot strategies for battery life improvement, but in the meantime, please make sure the sensor has reliable energy supply if you will use these sensors permanently. For more information about the working principle of the alphasense electrochemical sensors, please email oscar@smartcitizen.me . Sensor data processing Link We have developed an algorithm that ingests the data from either the platform or the local csv and processes electrochemical sensor sensor data. This algorithm is in validation stage and will be included in the online platform flow from Smart Citizen once validated. For this deployment , we would require you to send the data from reference sensor and the SmartCitizen sensors for us to process them and validate the workflow. If the above mentioned algorithm is sucessful, it will be included in the online data processing flow and, obviously, shared with the processed data. Please, send the data back to oscar@smartcitizen.me and we will postprocess the readings for you. Outdoor installation Link Use the perforated steel tape and the M6 provided to mount the Station on any street light or pole. The Pack also includes the required wrench. Setup the internal power supply Link The Station can be directly powered at 220V AC (Consumption MAX 33W). :::warning BATTERIES The Living Lab Station has a higher consumption, mostly due to the fans on the two PM sensors. That means the internal battery last just for 20h, and it is only aimed at providing backup power. For example, we can connect the station on the street light electric line, so the Station gets charged during the night when the lights are on. ::: :::info SOLAR PANEL Unfortunately, we are having some problems with the PV Solar Panel system to power the Station independently. The system is currently under tests, and it will be available in the next few months. ::: Remove the two covers using the allen keys as explained on the setup instructions. Remove the USB cable and bring inside the 220V power cable. Connect the cable wires with the power supply. Remove the third cover and place the power adapter as seen on the picture. Close the cover and run the Setup process again Understanding LED colors Link Red: The Station is in Setup Mode, this means that it is waiting to be configured. The Station will enter this mode (after blinking) when there is an error and some user action is required (ej. no SD card) once the problem is solved it will return to the original mode. You can enter this mode manually by clicking the button if you want to change configuration parameters. Pink Breathing: The Station is logging data to SD card. Everything it's all right! Blinking: The Station is trying to log data to SD card but there is a problem. You should try the setup process again. Battery feedback: When the Station is working on batteries the led will be on only when reading sensors or saving data. The rest of the time it will show a little blink every 2 seconds as a heartbeat. On low battery (less than 10%) the led will do a triple orange blink . If the Station is connected and charging the battery it will do a little orange blink every two seconds. When the battery is fully charged (or no battery is connected) this blink will turn green.","title":"Installation Guide"},{"location":"Living Lab Station/guides/Installation Guide/#how-to-install","text":"","title":"How to install?"},{"location":"Living Lab Station/guides/Installation Guide/#living-lab-station-installation-guide","text":"What's on the Kit?","title":"Living Lab Station Installation Guide"},{"location":"Living Lab Station/guides/Installation Guide/#sensors","text":"2x iSCAPE Living Lab Stations v2.0 iSCAPE Living Lab Station Urban Board 2.0 Data Board 2.0 PM Board 2.0 + 2 PM sensors Gas Pro Board 2.0 with 3 EC sensors 6Ah Battery Accessories MicroSD card 512MB USB Charger MicroSD to SD card adapter USB Power Supply 2m 3 Wire 220V cable Mounting brackets and screws Mounting tools (1x Wrench + 2 Allen Keys) Please read the documentation carefully if you have any question contact us at support@smartcitizen.me","title":"Sensors"},{"location":"Living Lab Station/guides/Installation Guide/#sensor-naming-and-reference","text":"Both Kits are setup to log data every 60 seconds on the sdcard. The target pollutants measured will be, per station are: Electrochemical Sensor : CO: AlphaSense CO-B4 NO2: AlphaSense NO2-B43F O3: AlphaSense OX-B431 Particle Sensors : PM1 , PM2.5 , PM10 : 2 x PlanTowerPMS5003 For tracking purposes these will be the sensor references: Electrochemical Sensors | | CO-B4 (slot 1) | NO2-B43F (slot 2) | OX-B431 (slot 3) | | :--------: | :--------: | :--------: | :--------: | | Citizen 2 | 162581717 | 202160410 | 204160162 | | Citizen 3 | 162581725 | 202160407 | 204160154 | PM Sensors | | PMS5003#1 | PMS5003#2 | | :--------: | :--------: | :--------: | | Citizen 2 | 2017122902980 | 2017122902941 | | Citizen 2 | 2017122902976 | 2017122902977 |","title":"Sensor naming and reference"},{"location":"Living Lab Station/guides/Installation Guide/#sensor-assembly","text":"The sensors are already assembled and we strongly require to not swap any of the sensors among them. We keep track internally of all sensor deployments and it is very important to keep the KITS as they are in order to avoid calibration data mismatch.","title":"Sensor assembly"},{"location":"Living Lab Station/guides/Installation Guide/#station-setup","text":"You have to follow some simple steps to setup your SCK to capture data and store it on an SD card: Remove the 3 protective stickers covering the Gas Sensors. Use the small allen key to unscrew the 3 screw on top. Remove the top cover Use the big allen to remove the 3 screw and pull the cover up. Make sure the SD card is inserted in the kit. :::danger The configuration of enabled/disabled sensors is stored on the SDcard so the cards shouldn't be swaped between kits. ::: :::warning If you have problems with a SD Card be sure to format it with FAT32 filesystem and don't copy any configuration file before inserting it on the kit, the kit will re-save the last valid configuration on the new sdcard. ::: Connect the battery to your SCK. The led should turn pink indicating SD card logging. The SCK will try to start immediately, but since the clock is not yet configured it will blink for 5 seconds and the led will turn red (setup mode). Syncronize the RTC (Real Time Clock) of the SCK with UTC time . The simplest way of doing this is to join to your SCK WiFi network: With your computer or smartphone search for a wifi network named SmartCitizenXXXX (The exact name should come in a sticker in the back of your kit). Once you join the network a Network Login screen should appear, if this doesn't happen open your browser and type 192.168.1.1 as the URL. Go to SD Card Mode Once the time it's sync the led should turn pink again and your sensor will start logging data to the SD card. Congratulations! You are ready close the enclosure and start capturing data. :::success TURN OFF Done for today? Every time you want to stop the Kit from logging simply press the button for 5 seconds. The led should stop bliking and your Kit will be OFF . To turn it ON simply press the button again. ::: :::info GET THE DATA Download the data from the SD card First turn off your Kit by pressing the button for 5 seconds. Then remove the micro SD card and plug the card on your computer using a Micro SD card reader. You will find inside a YYYY-MM-DD.CSV with all the data. Check the SD card file description section for more info. Data processing The collected data requires a custom and complex data processing using the iScape Sensor Analysis Framework The process will be fully documented here on the next few weeks. ::: :::warning FACTORY RESET Is your Kit not working properly? This will fully reset the Kit and should help you fix any issues you might have. Disconnect and connect the battery without any USB cable being connected. Then press the button until the light goes off and on again (around 15 sec). :::","title":"Station Setup"},{"location":"Living Lab Station/guides/Installation Guide/#sensor-data-collection","text":"The data will be collected in SD card mode during this deployment. NB: we are currently developing a direct CSV upload to the Smart Citizen platform that will be available in the following weeks.","title":"Sensor data collection"},{"location":"Living Lab Station/guides/Installation Guide/#sd-card-file-description","text":"The data logged to sdcard will be saved in a CSV comma separated value file. The header of the data will be written at the top of the file and every time a sensor is enabled or disabled . The posible values are: Time The time at wich the readings were taken in ISO UTC Combined date and time format. Each sensor could have its own reading interval and they are grouped in 15 seconds intervals, so it is posible (if a sensor has longer reading interval) that there are some columns without a reading for each line. Battery-% Noise-dBc Humidity-% Temperature-C Light-Lux Gases Board 1A-mV Gas Pro Board Carbon Monoxide auxilliary electrode. Gases Board 1W-mV Gas Pro Board Carbon Monoxide working electrode. Gases Board 2A-mV Gas Pro Board Nitrogen Dioxide auxilliary electrode. Gases Board 2W-mV Gas Pro Board Nitrogen Dioxide working electrode. Gases Board 3A-mV Gas Pro Board Ozone + Nitrogen Dioxide auxilliary electrode. Gases Board 3W-mV Gas Pro Board Ozone + Nitrogen Dioxide working electrode. PM1.0 PM1.0 in ug/m3 PM2.5 PM2.5 in ug/m3 PM10.0 PM10.0 in ug/m3","title":"SD card file description"},{"location":"Living Lab Station/guides/Installation Guide/#sensor-considerations","text":"Electrochemical sensor The electrochemical sensors need stabilisation time under the testing conditions they will be at. It is important to set and power the sensors with sufficient time (1-2 days) on the test environment for them to adapt. The newer the sensor, the more stabilisation time it requires. For this deployment, you will be receiving brand new sensors. Humidity and temperature extremes will require of further sensor adaptation, in order to dry out or absorb the necessary humidity for their proper functioning. :::danger Do not extract/attach the sensor capsule from the base board while powered, this could irreversibly damage the sensor. ::: Particle Sensor The particle sensors measurements are delivered as averages of the two sensors with periodic validity checks. We are currently developing one-shot strategies for battery life improvement, but in the meantime, please make sure the sensor has reliable energy supply if you will use these sensors permanently. For more information about the working principle of the alphasense electrochemical sensors, please email oscar@smartcitizen.me .","title":"Sensor considerations"},{"location":"Living Lab Station/guides/Installation Guide/#sensor-data-processing","text":"We have developed an algorithm that ingests the data from either the platform or the local csv and processes electrochemical sensor sensor data. This algorithm is in validation stage and will be included in the online platform flow from Smart Citizen once validated. For this deployment , we would require you to send the data from reference sensor and the SmartCitizen sensors for us to process them and validate the workflow. If the above mentioned algorithm is sucessful, it will be included in the online data processing flow and, obviously, shared with the processed data. Please, send the data back to oscar@smartcitizen.me and we will postprocess the readings for you.","title":"Sensor data processing"},{"location":"Living Lab Station/guides/Installation Guide/#outdoor-installation","text":"Use the perforated steel tape and the M6 provided to mount the Station on any street light or pole. The Pack also includes the required wrench.","title":"Outdoor installation"},{"location":"Living Lab Station/guides/Installation Guide/#setup-the-internal-power-supply","text":"The Station can be directly powered at 220V AC (Consumption MAX 33W). :::warning BATTERIES The Living Lab Station has a higher consumption, mostly due to the fans on the two PM sensors. That means the internal battery last just for 20h, and it is only aimed at providing backup power. For example, we can connect the station on the street light electric line, so the Station gets charged during the night when the lights are on. ::: :::info SOLAR PANEL Unfortunately, we are having some problems with the PV Solar Panel system to power the Station independently. The system is currently under tests, and it will be available in the next few months. ::: Remove the two covers using the allen keys as explained on the setup instructions. Remove the USB cable and bring inside the 220V power cable. Connect the cable wires with the power supply. Remove the third cover and place the power adapter as seen on the picture. Close the cover and run the Setup process again","title":"Setup the internal power supply"},{"location":"Living Lab Station/guides/Installation Guide/#understanding-led-colors","text":"Red: The Station is in Setup Mode, this means that it is waiting to be configured. The Station will enter this mode (after blinking) when there is an error and some user action is required (ej. no SD card) once the problem is solved it will return to the original mode. You can enter this mode manually by clicking the button if you want to change configuration parameters. Pink Breathing: The Station is logging data to SD card. Everything it's all right! Blinking: The Station is trying to log data to SD card but there is a problem. You should try the setup process again. Battery feedback: When the Station is working on batteries the led will be on only when reading sensors or saving data. The rest of the time it will show a little blink every 2 seconds as a heartbeat. On low battery (less than 10%) the led will do a triple orange blink . If the Station is connected and charging the battery it will do a little orange blink every two seconds. When the battery is fully charged (or no battery is connected) this blink will turn green.","title":"Understanding LED colors"},{"location":"MK/reference/","text":"Welcome to MkDocs Link For full documentation visit mkdocs.org . Commands Link mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout Link mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Features Link Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf PyMdown Extensions Link PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation Link The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde Usage Link Arithmatex MathJax Link Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Blocks Link Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Inline Link Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} BetterEm Link BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Caret Link Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Critic Link Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Details Link Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes. Emoji Link Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. InlineHilite Link InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js . MagicLink Link MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses. Mark Link Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols Link SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...). SuperFences Link SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs . Tasklist Link Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde Link Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Welcome to MkDocs"},{"location":"MK/reference/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"MK/reference/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"MK/reference/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"MK/reference/#features","text":"Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf","title":"Features"},{"location":"MK/reference/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"MK/reference/#installation","text":"The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Installation"},{"location":"MK/reference/#usage","text":"","title":"Usage"},{"location":"MK/reference/#arithmatex-mathjax","text":"Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Arithmatex MathJax"},{"location":"MK/reference/#blocks","text":"Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Blocks"},{"location":"MK/reference/#inline","text":"Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Inline"},{"location":"MK/reference/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"MK/reference/#caret","text":"Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"MK/reference/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"MK/reference/#details","text":"Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes.","title":"Details"},{"location":"MK/reference/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"MK/reference/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"},{"location":"MK/reference/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses.","title":"MagicLink"},{"location":"MK/reference/#mark","text":"Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"MK/reference/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...).","title":"SmartSymbols"},{"location":"MK/reference/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs .","title":"SuperFences"},{"location":"MK/reference/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"MK/reference/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"},{"location":"Sensor Analysis Framework/","text":"Introduction Link For full documentation visit mkdocs.org . Commands Link mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout Link mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Features Link Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf PyMdown Extensions Link PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation Link The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde Usage Link Arithmatex MathJax Link Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Blocks Link Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Inline Link Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} BetterEm Link BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Caret Link Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Critic Link Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Details Link Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes. Emoji Link Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. InlineHilite Link InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js . MagicLink Link MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses. Mark Link Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols Link SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...). SuperFences Link SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs . Tasklist Link Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde Link Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Introduction"},{"location":"Sensor Analysis Framework/#introduction","text":"For full documentation visit mkdocs.org .","title":"Introduction"},{"location":"Sensor Analysis Framework/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"Sensor Analysis Framework/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Sensor Analysis Framework/#features","text":"Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf","title":"Features"},{"location":"Sensor Analysis Framework/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"Sensor Analysis Framework/#installation","text":"The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Installation"},{"location":"Sensor Analysis Framework/#usage","text":"","title":"Usage"},{"location":"Sensor Analysis Framework/#arithmatex-mathjax","text":"Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Arithmatex MathJax"},{"location":"Sensor Analysis Framework/#blocks","text":"Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Blocks"},{"location":"Sensor Analysis Framework/#inline","text":"Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Inline"},{"location":"Sensor Analysis Framework/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"Sensor Analysis Framework/#caret","text":"Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"Sensor Analysis Framework/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"Sensor Analysis Framework/#details","text":"Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes.","title":"Details"},{"location":"Sensor Analysis Framework/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"Sensor Analysis Framework/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"},{"location":"Sensor Analysis Framework/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses.","title":"MagicLink"},{"location":"Sensor Analysis Framework/#mark","text":"Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"Sensor Analysis Framework/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...).","title":"SmartSymbols"},{"location":"Sensor Analysis Framework/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs .","title":"SuperFences"},{"location":"Sensor Analysis Framework/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"Sensor Analysis Framework/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"},{"location":"Sensor Analysis Framework/Calibration/","text":"Introduction to Low Cost Air Quality Calibration Link Section under development The following section is currently a work in progress. Testing methodologies and calibration models Link 1.1. Field calibration of a cluster of low-cost available sensors for air quality monitoring. Part A: Ozone and nitrogen dioxide - Link Note on evaluation of calibration method The evaluation of sensor performances took into account hourly values. It was carried out using only values predicted by each calibration method. For each one, regression and difference-based analysis were conducted to evaluate their performance. These included the calculation of the coefficient of determination (R2),comparing the slope and intercept of the regression line with objective values of 1 and 0 respectively. The mean bias error (MBE)and the root mean squared error (RMSE) standardized with the standard deviation of the reference measurements were used to draw a target diagram [38].To assess the performance of each calibration method at individual air pollutant levels, we have also calculated the measurement uncertainty using orthogonal regression of the estimated outputs against reference data. This uncertainty was compared to the DQO for indicative method that corresponds to a rela-tive expanded uncertainty of 30% for O3 and 25% for NO2 at the limit value set by the European Directive. The estimation method of the uncertainty, which corresponds to the relative expanded uncertainty Ur, was carried out using Eq. (1) where b0 and b1 are the slope and intercept of the orthogonal regression and RSS the sum of square of residuals is calculated using Eq. (2). Note on correlation : An important aspect of the dataset is the lack of independence between parameters. Usually, O3 is highly correlated with temperature and anti-correlated with relative humidity and CO2 and to alower extent with CO and NO2. As a consequence, it will be difficult to estimate O3 correctly using temperature, relative humidity and CO2 as estimators. Note on field deployment Theses multi-sensors were either calibrated against standard gas mixtures or using artificial neural network under field conditions. The latter method resulted in mixed results either satisfactory for short periods or generally weak for longer data series . Note on drift over time Finally the drift over time of each calibration methods was plot-ted in order to evidence general trends. To ease the detection ofpossible patterns by filtering noise, the daily residuals were plottedbetween reference measurements and sensor predictions ratherthan the hourly ones. Note for number of sensors : One shall remember that implementing the ANN-MLR requires a set of 7 sensors, of which 2 NO2 MOx and 2 NO2 electrochemical sensors, 1 O3 electrochemical sensor, 1 CO electrochemical sensor and absolute humidity(therefore temperature and relative humidity sensor). Moreover,all gas sensors were previously calibrated using correction models (Table 2) including reference measurements for O3. 1.2. Field calibration of a cluster of low-cost commercially availablesensors for air quality monitoring. Part B: NO, CO and CO2 - Link Note on target diagram and stats Better explained below (06) Fig. 3 gives the target diagram for LR, MLR and ANNs calibration methods for NO (green), CO (red) and CO2(black). The target diagram is used for evaluating sensor data against reference measurements. This diagram is an evolution of the Taylor diagram, which was based on the geometrical relation between the Centred Root Mean Square Error (CRMSE) and the standard deviation of both reference (RM) and sensor data (S). The target diagram allows to extend the notion of the Taylor diagram by distinguishing the root Mean Square Error (RMSE) within the contributions from (a) the Mean Bias Error (MBE) and (b) the CRMSE (see Eqs. (1)\u2013(3)).MBE and CRMSE values are gathered in Tables 4 and 5. This plot represents the normalised RMSE as the quadratic sum of the normalised MBE on the Y-axis versus the normalised CRMSE on the x-axis. The distance between each point and the origin represents the normalised RMSE for each platform sensor. Furthermore, target scores are plotted in the left quadrant of the diagram when the standard deviation of the sensor responses is lower than the one of the references measurements and conversely. In the original approach of the target diagram, RMSE, MBE and CRMSE can be normalised using the standard deviation of the reference measurements (RM). Sensors with random error equivalent to the variance of the observations stand in the circle area of radius 1. Target scores inside this circle indicate a variance of the residuals between sensor and reference measurement equal or lower than the variance of the reference measurements. In fact, sensors within the target circle are better predictors for the reference measurements than mean concentrations over the whole sampling period. Note on measurement span For the CO sensors, even though ANNs methods were found by far to be the most efficient methods, all calibration methods produced RMSEs falling outside the target circle. This evidenced a lack of agreement between CO sensor values and reference measurements . Our first guess is that this situation was primarily caused by the limited range of CO level at the test site (50% of data in a range of less than 0.2 umol/mol) which did not allow a correct fit of the calibration function. 2. Sensors 2017, 17, 1653 - Link Notes on baseline resistance spread The consequence of this model is that the sensor\u2019s response is only partially a function of the amount of gas to which the surface is exposed. Instead, the sensor will have a baseline resistance that is related to the bulk and particle boundary resistance. Because of the random geometry of the granular sensor surface, the baseline resistance will vary between individual sensors . Notes on cross-sensitivity Although the deployment of multiple different sensors can compensate for the cross-sensitivity issues in calibration, it cannot eliminate it. MOS sensors can thus be used only in situations where any interfering species can either be measured by other means, or they must be calibrated regularly and used in locations where the background varies in concentration slowly compared with the target gases . Notes on target accuracy The target accuracy at 95% confidence is 20\u03bcg/m3 for both NO_2 NO_2 European directives define target and absolute maximum thresholds for the concentration of both these gases. For NO_2 NO_2 , the maximum average yearly concentration is 40 \u03bcg/m3 and hourly concentrations must not exceed 200 \u03bcg/m3 more than eighteen times a year. For O_3 O_3 , the daily 8-h mean must not exceed 120 \u03bcg/m3 more than 25 times over three years. Urban environments frequently experience NO2 levels that exceed the yearly target. An accuracy of 20\u03bcg/m3 would provide enough resolution to make these sensors a useful supplement to modelling and satellite campaigns, in the context of these targets. Notes on mounting and flow (we have reproduced this issue) An important practical consideration with any in situ air quality sensor design is ensuring adequate flow of sampling air through the device. Stale air inside a casing will produce unrepresentative results , and even sensors mounted outside a casing might not get a properly-mixed sample. Note on calibration time and fit selection Even with the use of these techniques, the phenomenon of sensor drift was not corrected for here, and it truncated trustworthy results to data to within four months from calibration. This is a similar scale as has been reported by Spinelle et al. and Masson et al. and somewhat of an improvement over the results described in the former. An analytical approach to counteracting this drift might be \"merging calibrations\", where a sensor is calibrated at the start and end of a four-month campaign, and the coefficients gradually change from one end of the experiment run to the other. Notes on ageing Further to this, it is clear that there are two major factors in the longevity of a sensor\u2019s calibration. The first is the natural degradation of the heater element, which becomes hotter over prolonged use [15] and causes the sensor\u2019s response profile to vary. The second is the effect of slowly-varying interfering gases, which over the course of months shift the sensor\u2019s baseline. The first problem may have an engineering solution, but the second will involve taking the results of the tests in an artificial atmosphere, identifying the most critical species and either measuring or possibly modelling their likely concentrations during deployments. Note on packaging testing The calibration setup for the sensors is not currently optimal, but the strong correlation of sensor voltages within the same housing suggests a solution in ensuring that the same packet of air reaches the MOS sensors as the reference instrument, in as little time as possible . The rapid rate at which NOx compounds evolve and the sensitivity of the Leighton system to sunlight means that the representativity of the calibration environment is even more critical than it would be for more specific sensors. 3. Christian Kj\u00e6r Jensen - Assessing the applicability of low-cost electrochemical gas sensors for urban air quality monitoring. Master\u2019s thesis. January 2016 4. Practical field calibration of electrochemical NO2 sensors for urban air quality applications Note on influence of T-H O3 on AlphaSense As all electrochemical NO2 sensors, the Alphasense NO2-B4 sensor is not very selective to the target gas. The sensor response can best be explained as a linear combination of NO2, O3, temperature and humidity signals ( R^2\u2248 0.9 R^2\u2248 0.9 ). As a consequence, a linear combination of the Working Electrode and the Auxiliary Electrode alone give poor indication of ambient NO2 concentrations. The accuracy varies greatly between different sensors ( R^2 R^2 between 0.3 and 0.7). For the Urban AirQ campaign, temperature and relative humidity were included in a multilinear regression approach. The results improve significantly with R^2 R^2 values typically around 0.8. This corresponds well with the findings of Jiao et al. (2016), who find an adjusted R^2=0.82 R^2=0.82 for the best performing electrochemical NO2 sensor in their evaluation, when including T and RH. Best results are obtained by also including ozone measurements in the calibration model: R2 increases to 0.9. Spinelle et al. (2015b) used a similar regression and found R^2 R^2 ranging from 0.35 to 0.77 for 4 electrochemical NO2 sensors during a two week calibration period, but dropping to 0.03\u20140.08 when applied to a successive 5-month validation period. Low NO2 values at their semi-rural site partly explains this poor performance, but most likely also unaccounted effects such as changing sensor sensitivity and signal drift. 5. Mobile sensor network noise reduction and recalibration using a Bayesian network The related work can be placed in three categories: colocated sensor calibration, sensor abnormality detection, and Bayesian network based approaches. Colocated : Those techniques require that the co-located sensors are of the same type and thus should have the same response from the physical environment. In contrast to the previous work, our technique can work on mobile sensing devices containing various types of metal oxide sensors. Sensor Abnormality : crap Bayesian Networks : Mola Other readings Link Masson, N.; Piedrahita, R.; Hannigan, M. Approach for quantification of metal oxide type semiconductor gas sensors used for ambient air quality monitoring. Sens. Actuators B Chem. 2015, 208, 339\u2013345. Piedrahita, R.; Xiang, Y.; Masson, N.; Ortega, J.; Collier, A.; Jiang, Y.; Li, K.; Dick, R.; Lv, Q.; Hannigan, M.; et al. The next generation of low-cost personal air quality sensors for quantitative exposure monitoring. Atmos. Meas. Tech. 2014, 7, 3325\u20133336. Assessment of air quality microsensors versus reference methods: The EuNetAir joint exercise - Link GUIDE TO THE DEMONSTRATION OF EQUIVALENCE OF AMBIENT AIR MONITORING METHODS - Link Testing and calibration Link We can split the sensor testing into this sequence (for both mics and alphasense ): 1. Characterisation : Base testing for assessing general sensor response, stabilisation time or operational modes 2. Calibration : Assess actual concentration functions once we know how to operate the sensor itself. Include other factors such as environmental effects, cross-sensitivity, etc. Note : sensor calibrations from alphasense is all in here . Characterisation Testing Link Mics Link Basic - Sensor response - Sensor limits (baseline and max reading) - Heating time and stabilisation time Advanced - Humidity and temperature (probably not to be donee on the chamber) - Pulse Mode operation Alphasense Link Questions to answer: Is the Sensitivity varying with temperature (YES) - Ask alphasense for data. Is the reading varying with temperature (WDK) - Ask alphasense and calibrate on our own Do we want to input the zero currents measured as offset on our boards? Furthermore - Do they change with time / temperature / humidity? (NO/NO/NO) Basic Measure Zero currents and check if n is the same with what alphasense's giving us Measure convertion factor between nA/mV with Jano's tester board Ask alphasense for: Sensitivity variation over time Sensitvity variation with temperature/humidity Zero currents / offset variation with temperature/humidity Advanced - Long term deployment with colocation in: - Barcelona? - Alphasense? - iScape? Calibration Link We could divide it in two stages, depending on how the results turn out to be: 1. chamber testing* for determining f functions and 2. outdoor testing* for checking g and h functions: Concentration = f(SensorParams, T, H) + g(T,H) + h(Others) Concentration = f(SensorParams, T, H) + g(T,H) + h(Others) Chamber testing Link Mics We need to characterise several sensor parameters. The sensor response is apparently something like: log_{10}(Concentration) = f(Rs, Ro) = \\beta_1+\\beta_2 log_{10}(Rs/Ro) log_{10}(Concentration) = f(Rs, Ro) = \\beta_1+\\beta_2 log_{10}(Rs/Ro) Where: - Rs is the sensor response - Ro is the baseline resistance, normally at Zero air - \\beta \\beta s are log linear correlation coefficients (from SGX AAN) :::info This is based on SGX datasheet: ::: The f function must be calibrated and the baseline resistance needs to be monitored through the sensor sensitivity. SGX defines the sensitivity as: Sensitivity_{CO} = {Ro_{pure-air} \\over Rs_{60ppm-CO}} Sensitivity_{CO} = {Ro_{pure-air} \\over Rs_{60ppm-CO}} Sensitivity_{NO_2} = {Rs_{0.25ppm-NO_2} \\over Ro_{pure-air}} Sensitivity_{NO_2} = {Rs_{0.25ppm-NO_2} \\over Ro_{pure-air}} With CO measured at 23\u00baC 50%RH and NO2 at 23\u00baC and 5%RH. However, due to hardware and testing limitations, we could monitor our own sensitivity defined as: Sensitivity_{CO} = {Rs_{pure-air} \\over Rs_{50ppm-CO}} Sensitivity_{CO} = {Rs_{pure-air} \\over Rs_{50ppm-CO}} Sensitivity_{NO_2} = {Rs_{10ppm-NO_2} \\over Rs_{pure-air}} Sensitivity_{NO_2} = {Rs_{10ppm-NO_2} \\over Rs_{pure-air}} Both at 23\u00baC and 50%RH. With this, we should be able to monitor the sensor sensitivity in controlled conditions so that we can assess the shape of the f(Rs,Ro) component of the calibration. Define pre and post exposure tests in order to find what the Sensitivity variation is and re-calculate gas concentrations based on Rs readings. Alphasense NA : If alphasense provides us with all this data , we could skip this characterisation: although we should verify some of the data with random batches. After having characterised PCB settings, we need to obtain the factor n in this formula: Concentration = {I_{WE}-n(I_{AE}) \\over Sensitivity(T,H)} + g(T,H) + h(Others) Concentration = {I_{WE}-n(I_{AE}) \\over Sensitivity(T,H)} + g(T,H) + h(Others) For this we need to test for the relationship between working and auxiliary electrodes currents relationship with zero air testing : 20min good flow of zero air for all three sensors. Also, ideally, the sensor current is directly proportional to: I_L = k C_T I_L = k C_T In controlled conditions. Therefore, we need to assess this value and with it the f function. Combined testing Link For both sensors, it would be desirable to assess the models including sensor reading, T, H and other sensor data for cross-sensitivity and their uncertainty. These are the g and h functions and they should be based on additional sensor data for reference. Reference sensor possibilities: outdoor with other reference sensors iScape sensing campaigns or more indoor testing with more calibrated gas bottles (expensive, not a good approach) We also need to check how the sensor behaves in a temporal manner : Repeteability Short term drift Long term drift Proposal: Inchamber - Outdoor testing sequences Using any of the above references, perform in-chamber with bottles + outdoor exposure with reference , in-chamber with bottles testing. Vary exposure time to uncontrolled pollutants and conditions and recenter data with calibration bottles to understand: - How the sensor drifts in short and long term - What's the longest time we can test in uncontrolled exposure - Identify if we can extract data from calibration chamber and prioritise it in the modelling Calibration and modelling is reviewed below. Calibration and model notes Link For the outdoor exposure time, we need to understand how the sensor is exposed in an uncontrolled environment. We need to answer these questions: **Are the readings multicollinear ?**: do several sensor readings could be correlated with others and therefore not prioritised in our model? Are the readings heteroscedastic : does the sensor reading vary in the different measurement conditions? Is it likely that we will overfit data? Is it likely that sensor readings in different conditions would have different variabilities? Are we going to be calibrate with a small amount of observations vs number of variables (T, H, sensor readings mics (CO, NO2), aS (O3 + NO2, NO2, CO))? If so, we should then use reference sensors: Check regularisation techniques: Lasso / Ridge to reduce model complexity Check PCR or PLS for feature extraction: create different principal components that are not multicollinear (but depend on other variables) If dependent variable is continuous and model is suffering from collinearity or there are a lot of independent variables: PCR, PLS, ridge, lasso and elastic net regressions. Then select the final model based on Adjusted R-Square, RMSE, AIC and BIC.","title":"Calibration"},{"location":"Sensor Analysis Framework/Calibration/#introduction-to-low-cost-air-quality-calibration","text":"Section under development The following section is currently a work in progress.","title":"Introduction to Low Cost Air Quality Calibration"},{"location":"Sensor Analysis Framework/Calibration/#testing-methodologies-and-calibration-models","text":"1.1. Field calibration of a cluster of low-cost available sensors for air quality monitoring. Part A: Ozone and nitrogen dioxide - Link Note on evaluation of calibration method The evaluation of sensor performances took into account hourly values. It was carried out using only values predicted by each calibration method. For each one, regression and difference-based analysis were conducted to evaluate their performance. These included the calculation of the coefficient of determination (R2),comparing the slope and intercept of the regression line with objective values of 1 and 0 respectively. The mean bias error (MBE)and the root mean squared error (RMSE) standardized with the standard deviation of the reference measurements were used to draw a target diagram [38].To assess the performance of each calibration method at individual air pollutant levels, we have also calculated the measurement uncertainty using orthogonal regression of the estimated outputs against reference data. This uncertainty was compared to the DQO for indicative method that corresponds to a rela-tive expanded uncertainty of 30% for O3 and 25% for NO2 at the limit value set by the European Directive. The estimation method of the uncertainty, which corresponds to the relative expanded uncertainty Ur, was carried out using Eq. (1) where b0 and b1 are the slope and intercept of the orthogonal regression and RSS the sum of square of residuals is calculated using Eq. (2). Note on correlation : An important aspect of the dataset is the lack of independence between parameters. Usually, O3 is highly correlated with temperature and anti-correlated with relative humidity and CO2 and to alower extent with CO and NO2. As a consequence, it will be difficult to estimate O3 correctly using temperature, relative humidity and CO2 as estimators. Note on field deployment Theses multi-sensors were either calibrated against standard gas mixtures or using artificial neural network under field conditions. The latter method resulted in mixed results either satisfactory for short periods or generally weak for longer data series . Note on drift over time Finally the drift over time of each calibration methods was plot-ted in order to evidence general trends. To ease the detection ofpossible patterns by filtering noise, the daily residuals were plottedbetween reference measurements and sensor predictions ratherthan the hourly ones. Note for number of sensors : One shall remember that implementing the ANN-MLR requires a set of 7 sensors, of which 2 NO2 MOx and 2 NO2 electrochemical sensors, 1 O3 electrochemical sensor, 1 CO electrochemical sensor and absolute humidity(therefore temperature and relative humidity sensor). Moreover,all gas sensors were previously calibrated using correction models (Table 2) including reference measurements for O3. 1.2. Field calibration of a cluster of low-cost commercially availablesensors for air quality monitoring. Part B: NO, CO and CO2 - Link Note on target diagram and stats Better explained below (06) Fig. 3 gives the target diagram for LR, MLR and ANNs calibration methods for NO (green), CO (red) and CO2(black). The target diagram is used for evaluating sensor data against reference measurements. This diagram is an evolution of the Taylor diagram, which was based on the geometrical relation between the Centred Root Mean Square Error (CRMSE) and the standard deviation of both reference (RM) and sensor data (S). The target diagram allows to extend the notion of the Taylor diagram by distinguishing the root Mean Square Error (RMSE) within the contributions from (a) the Mean Bias Error (MBE) and (b) the CRMSE (see Eqs. (1)\u2013(3)).MBE and CRMSE values are gathered in Tables 4 and 5. This plot represents the normalised RMSE as the quadratic sum of the normalised MBE on the Y-axis versus the normalised CRMSE on the x-axis. The distance between each point and the origin represents the normalised RMSE for each platform sensor. Furthermore, target scores are plotted in the left quadrant of the diagram when the standard deviation of the sensor responses is lower than the one of the references measurements and conversely. In the original approach of the target diagram, RMSE, MBE and CRMSE can be normalised using the standard deviation of the reference measurements (RM). Sensors with random error equivalent to the variance of the observations stand in the circle area of radius 1. Target scores inside this circle indicate a variance of the residuals between sensor and reference measurement equal or lower than the variance of the reference measurements. In fact, sensors within the target circle are better predictors for the reference measurements than mean concentrations over the whole sampling period. Note on measurement span For the CO sensors, even though ANNs methods were found by far to be the most efficient methods, all calibration methods produced RMSEs falling outside the target circle. This evidenced a lack of agreement between CO sensor values and reference measurements . Our first guess is that this situation was primarily caused by the limited range of CO level at the test site (50% of data in a range of less than 0.2 umol/mol) which did not allow a correct fit of the calibration function. 2. Sensors 2017, 17, 1653 - Link Notes on baseline resistance spread The consequence of this model is that the sensor\u2019s response is only partially a function of the amount of gas to which the surface is exposed. Instead, the sensor will have a baseline resistance that is related to the bulk and particle boundary resistance. Because of the random geometry of the granular sensor surface, the baseline resistance will vary between individual sensors . Notes on cross-sensitivity Although the deployment of multiple different sensors can compensate for the cross-sensitivity issues in calibration, it cannot eliminate it. MOS sensors can thus be used only in situations where any interfering species can either be measured by other means, or they must be calibrated regularly and used in locations where the background varies in concentration slowly compared with the target gases . Notes on target accuracy The target accuracy at 95% confidence is 20\u03bcg/m3 for both NO_2 NO_2 European directives define target and absolute maximum thresholds for the concentration of both these gases. For NO_2 NO_2 , the maximum average yearly concentration is 40 \u03bcg/m3 and hourly concentrations must not exceed 200 \u03bcg/m3 more than eighteen times a year. For O_3 O_3 , the daily 8-h mean must not exceed 120 \u03bcg/m3 more than 25 times over three years. Urban environments frequently experience NO2 levels that exceed the yearly target. An accuracy of 20\u03bcg/m3 would provide enough resolution to make these sensors a useful supplement to modelling and satellite campaigns, in the context of these targets. Notes on mounting and flow (we have reproduced this issue) An important practical consideration with any in situ air quality sensor design is ensuring adequate flow of sampling air through the device. Stale air inside a casing will produce unrepresentative results , and even sensors mounted outside a casing might not get a properly-mixed sample. Note on calibration time and fit selection Even with the use of these techniques, the phenomenon of sensor drift was not corrected for here, and it truncated trustworthy results to data to within four months from calibration. This is a similar scale as has been reported by Spinelle et al. and Masson et al. and somewhat of an improvement over the results described in the former. An analytical approach to counteracting this drift might be \"merging calibrations\", where a sensor is calibrated at the start and end of a four-month campaign, and the coefficients gradually change from one end of the experiment run to the other. Notes on ageing Further to this, it is clear that there are two major factors in the longevity of a sensor\u2019s calibration. The first is the natural degradation of the heater element, which becomes hotter over prolonged use [15] and causes the sensor\u2019s response profile to vary. The second is the effect of slowly-varying interfering gases, which over the course of months shift the sensor\u2019s baseline. The first problem may have an engineering solution, but the second will involve taking the results of the tests in an artificial atmosphere, identifying the most critical species and either measuring or possibly modelling their likely concentrations during deployments. Note on packaging testing The calibration setup for the sensors is not currently optimal, but the strong correlation of sensor voltages within the same housing suggests a solution in ensuring that the same packet of air reaches the MOS sensors as the reference instrument, in as little time as possible . The rapid rate at which NOx compounds evolve and the sensitivity of the Leighton system to sunlight means that the representativity of the calibration environment is even more critical than it would be for more specific sensors. 3. Christian Kj\u00e6r Jensen - Assessing the applicability of low-cost electrochemical gas sensors for urban air quality monitoring. Master\u2019s thesis. January 2016 4. Practical field calibration of electrochemical NO2 sensors for urban air quality applications Note on influence of T-H O3 on AlphaSense As all electrochemical NO2 sensors, the Alphasense NO2-B4 sensor is not very selective to the target gas. The sensor response can best be explained as a linear combination of NO2, O3, temperature and humidity signals ( R^2\u2248 0.9 R^2\u2248 0.9 ). As a consequence, a linear combination of the Working Electrode and the Auxiliary Electrode alone give poor indication of ambient NO2 concentrations. The accuracy varies greatly between different sensors ( R^2 R^2 between 0.3 and 0.7). For the Urban AirQ campaign, temperature and relative humidity were included in a multilinear regression approach. The results improve significantly with R^2 R^2 values typically around 0.8. This corresponds well with the findings of Jiao et al. (2016), who find an adjusted R^2=0.82 R^2=0.82 for the best performing electrochemical NO2 sensor in their evaluation, when including T and RH. Best results are obtained by also including ozone measurements in the calibration model: R2 increases to 0.9. Spinelle et al. (2015b) used a similar regression and found R^2 R^2 ranging from 0.35 to 0.77 for 4 electrochemical NO2 sensors during a two week calibration period, but dropping to 0.03\u20140.08 when applied to a successive 5-month validation period. Low NO2 values at their semi-rural site partly explains this poor performance, but most likely also unaccounted effects such as changing sensor sensitivity and signal drift. 5. Mobile sensor network noise reduction and recalibration using a Bayesian network The related work can be placed in three categories: colocated sensor calibration, sensor abnormality detection, and Bayesian network based approaches. Colocated : Those techniques require that the co-located sensors are of the same type and thus should have the same response from the physical environment. In contrast to the previous work, our technique can work on mobile sensing devices containing various types of metal oxide sensors. Sensor Abnormality : crap Bayesian Networks : Mola","title":"Testing methodologies and calibration models"},{"location":"Sensor Analysis Framework/Calibration/#other-readings","text":"Masson, N.; Piedrahita, R.; Hannigan, M. Approach for quantification of metal oxide type semiconductor gas sensors used for ambient air quality monitoring. Sens. Actuators B Chem. 2015, 208, 339\u2013345. Piedrahita, R.; Xiang, Y.; Masson, N.; Ortega, J.; Collier, A.; Jiang, Y.; Li, K.; Dick, R.; Lv, Q.; Hannigan, M.; et al. The next generation of low-cost personal air quality sensors for quantitative exposure monitoring. Atmos. Meas. Tech. 2014, 7, 3325\u20133336. Assessment of air quality microsensors versus reference methods: The EuNetAir joint exercise - Link GUIDE TO THE DEMONSTRATION OF EQUIVALENCE OF AMBIENT AIR MONITORING METHODS - Link","title":"Other readings"},{"location":"Sensor Analysis Framework/Calibration/#testing-and-calibration","text":"We can split the sensor testing into this sequence (for both mics and alphasense ): 1. Characterisation : Base testing for assessing general sensor response, stabilisation time or operational modes 2. Calibration : Assess actual concentration functions once we know how to operate the sensor itself. Include other factors such as environmental effects, cross-sensitivity, etc. Note : sensor calibrations from alphasense is all in here .","title":"Testing and calibration"},{"location":"Sensor Analysis Framework/Calibration/#characterisation-testing","text":"","title":"Characterisation Testing"},{"location":"Sensor Analysis Framework/Calibration/#mics","text":"Basic - Sensor response - Sensor limits (baseline and max reading) - Heating time and stabilisation time Advanced - Humidity and temperature (probably not to be donee on the chamber) - Pulse Mode operation","title":"Mics"},{"location":"Sensor Analysis Framework/Calibration/#alphasense","text":"Questions to answer: Is the Sensitivity varying with temperature (YES) - Ask alphasense for data. Is the reading varying with temperature (WDK) - Ask alphasense and calibrate on our own Do we want to input the zero currents measured as offset on our boards? Furthermore - Do they change with time / temperature / humidity? (NO/NO/NO) Basic Measure Zero currents and check if n is the same with what alphasense's giving us Measure convertion factor between nA/mV with Jano's tester board Ask alphasense for: Sensitivity variation over time Sensitvity variation with temperature/humidity Zero currents / offset variation with temperature/humidity Advanced - Long term deployment with colocation in: - Barcelona? - Alphasense? - iScape?","title":"Alphasense"},{"location":"Sensor Analysis Framework/Calibration/#calibration","text":"We could divide it in two stages, depending on how the results turn out to be: 1. chamber testing* for determining f functions and 2. outdoor testing* for checking g and h functions: Concentration = f(SensorParams, T, H) + g(T,H) + h(Others) Concentration = f(SensorParams, T, H) + g(T,H) + h(Others)","title":"Calibration"},{"location":"Sensor Analysis Framework/Calibration/#chamber-testing","text":"Mics We need to characterise several sensor parameters. The sensor response is apparently something like: log_{10}(Concentration) = f(Rs, Ro) = \\beta_1+\\beta_2 log_{10}(Rs/Ro) log_{10}(Concentration) = f(Rs, Ro) = \\beta_1+\\beta_2 log_{10}(Rs/Ro) Where: - Rs is the sensor response - Ro is the baseline resistance, normally at Zero air - \\beta \\beta s are log linear correlation coefficients (from SGX AAN) :::info This is based on SGX datasheet: ::: The f function must be calibrated and the baseline resistance needs to be monitored through the sensor sensitivity. SGX defines the sensitivity as: Sensitivity_{CO} = {Ro_{pure-air} \\over Rs_{60ppm-CO}} Sensitivity_{CO} = {Ro_{pure-air} \\over Rs_{60ppm-CO}} Sensitivity_{NO_2} = {Rs_{0.25ppm-NO_2} \\over Ro_{pure-air}} Sensitivity_{NO_2} = {Rs_{0.25ppm-NO_2} \\over Ro_{pure-air}} With CO measured at 23\u00baC 50%RH and NO2 at 23\u00baC and 5%RH. However, due to hardware and testing limitations, we could monitor our own sensitivity defined as: Sensitivity_{CO} = {Rs_{pure-air} \\over Rs_{50ppm-CO}} Sensitivity_{CO} = {Rs_{pure-air} \\over Rs_{50ppm-CO}} Sensitivity_{NO_2} = {Rs_{10ppm-NO_2} \\over Rs_{pure-air}} Sensitivity_{NO_2} = {Rs_{10ppm-NO_2} \\over Rs_{pure-air}} Both at 23\u00baC and 50%RH. With this, we should be able to monitor the sensor sensitivity in controlled conditions so that we can assess the shape of the f(Rs,Ro) component of the calibration. Define pre and post exposure tests in order to find what the Sensitivity variation is and re-calculate gas concentrations based on Rs readings. Alphasense NA : If alphasense provides us with all this data , we could skip this characterisation: although we should verify some of the data with random batches. After having characterised PCB settings, we need to obtain the factor n in this formula: Concentration = {I_{WE}-n(I_{AE}) \\over Sensitivity(T,H)} + g(T,H) + h(Others) Concentration = {I_{WE}-n(I_{AE}) \\over Sensitivity(T,H)} + g(T,H) + h(Others) For this we need to test for the relationship between working and auxiliary electrodes currents relationship with zero air testing : 20min good flow of zero air for all three sensors. Also, ideally, the sensor current is directly proportional to: I_L = k C_T I_L = k C_T In controlled conditions. Therefore, we need to assess this value and with it the f function.","title":"Chamber testing"},{"location":"Sensor Analysis Framework/Calibration/#combined-testing","text":"For both sensors, it would be desirable to assess the models including sensor reading, T, H and other sensor data for cross-sensitivity and their uncertainty. These are the g and h functions and they should be based on additional sensor data for reference. Reference sensor possibilities: outdoor with other reference sensors iScape sensing campaigns or more indoor testing with more calibrated gas bottles (expensive, not a good approach) We also need to check how the sensor behaves in a temporal manner : Repeteability Short term drift Long term drift Proposal: Inchamber - Outdoor testing sequences Using any of the above references, perform in-chamber with bottles + outdoor exposure with reference , in-chamber with bottles testing. Vary exposure time to uncontrolled pollutants and conditions and recenter data with calibration bottles to understand: - How the sensor drifts in short and long term - What's the longest time we can test in uncontrolled exposure - Identify if we can extract data from calibration chamber and prioritise it in the modelling Calibration and modelling is reviewed below.","title":"Combined testing"},{"location":"Sensor Analysis Framework/Calibration/#calibration-and-model-notes","text":"For the outdoor exposure time, we need to understand how the sensor is exposed in an uncontrolled environment. We need to answer these questions: **Are the readings multicollinear ?**: do several sensor readings could be correlated with others and therefore not prioritised in our model? Are the readings heteroscedastic : does the sensor reading vary in the different measurement conditions? Is it likely that we will overfit data? Is it likely that sensor readings in different conditions would have different variabilities? Are we going to be calibrate with a small amount of observations vs number of variables (T, H, sensor readings mics (CO, NO2), aS (O3 + NO2, NO2, CO))? If so, we should then use reference sensors: Check regularisation techniques: Lasso / Ridge to reduce model complexity Check PCR or PLS for feature extraction: create different principal components that are not multicollinear (but depend on other variables) If dependent variable is continuous and model is suffering from collinearity or there are a lot of independent variables: PCR, PLS, ridge, lasso and elastic net regressions. Then select the final model based on Adjusted R-Square, RMSE, AIC and BIC.","title":"Calibration and model notes"},{"location":"Sensor Analysis Framework/guides/Install the framework/","text":"iSCAPE Sensor Analysis Framework Link Welcome to the first version of the iSCAPE Sensor Analysis tools. The framework is built with the purpose of helping on the calibration process of the sensors on field tests and it aim to be the primary tool for manipulating the sensors data. The framework is built on Jupyter Notebooks and the data analysis tools are based on Pandas and are ready to later support Scikit . The current notebook supports data from the iSCAPE Citizen Sensors we provided you but we will add support to integrate the data from existing equipment. Currently all the data is loaded as CSV files but it is also ready to get live data directly from the Smart Citizen API in the future. The primary goal of the tools is to help us validate the different iSCAPE sensors and calculate their calibration values that later might automatically applied to the data the sensors push online. Notice this is currently a single Notebook that should work as a boilerplate to new Notebooks each with each own specific purpose. Complete Documentation Github Repository How to install the framework Link The following data analysis framework is built on Python 2.7 and Jupyter Notebooks. Here we will show you how to install it: Dowload and Install Anaconda for Python 2.7 https://www.continuum.io/downloads Visit Github to download the project folder or simply use git . Open the Anaconda Navigator app and launch the Jupyter Notebook . Using the Jupyter Notebook website browse your computer to find the project folder. :::success READY? Go and check How to use the notebook ::: :::info LEARN MORE Still wondering what this is? Read this introduction to Jupyter ::: :::warning ADVANCED INSTALLATION If you are already familiar with Python and you like to avoid installing Anaconda and follow the Advanced users installation ::: :::danger WORRIED ABOUT YOUR EXISTING PYTHON? Do you have already a Python environment you use for other work and you are worried about updating some packages? Learn how to load a dedicated environment ::: How to use the notebook Link The MICS Analysis Notebook is designed as fully interactive tool for data. Later on you might like to customize them and make them static for specific purposes. Load the data Link Load the data from your Smart Citizen Kits in CSV format to analyse the data or prepare it for other applications. You can run a single one but to take full advantatge of the functionalities you should load two files. :::info REFERENCE EQUIPMENT We plan to add support to the file format of your calibration equipment in order to analyse and compare the data using the same approach. ::: Plot the data Link This allows you to plot your data over time by sensor and device. On the next iterations you will be able to select the time range you want. Cross sensors interferances Link This module displays a simple correlation table per device that might be helpful to have an overview to possible cross sensors interferances. Sensor Correlations Link This module is the core module towards understanding cross device correlation and determination. This currently allows you to look at the determination across two different devices but in the upcoming days it might support to correlate the data against your reference equipment. Advanced installation features Link How to run the project isolated from your Python environment Link Do you have already a Python environment you use for other work and you are worried about updating some packages? Conda can load a dedicated environment for you to run Python and Jupyter based on the environment.yml configuration file we provide. Open your favourite shell on the directory you have your project. ( cmd.exe on windows) Run the following commands: This will install and load the Python environment we prepared for iSCAPE conda env create -f environment.yml Now activate the environment source activate iscape Ready, run to run Jupyter jupyter notebook Advanced users installation Link If you do not want to install Anaconda you can install all the dependencies manually. Just follow the steps above: Install Python Link Python is the main programming language we will use for Data Analysis. On Windows download and run the installer for Python 2.7 Mac cames directly with python built in. However you can install the latest version using Hombrew and then run $ brew install python On Linux simply use your distribution package manager like $ apt in Debian or Ubuntu. Install Pip Link Pip is the packet manager Python uses and it comes installed by default. If you have any issues you can download pip here . Installl Jupyter Link Jupyter Notebooks allows us to quickly learn, develop and improve our tools by providing a common convenient framework and UI. Simply run pip install jupyter on your terminal to install it. Download the source Link Download from Github or simply use git git clone https://github.com/fablabbcn/smartcitizen-jupyter.git Run the notebook Link On your terminal go to the folder where tou downloaded your files and then run jupyter notebook this will open a new webpage and you will be available to run your code there. The Smart Citizen Team for the iSCAPE Project iSCAPE has received funding from the European Community\u2019s H2020 Programme under Grant Agreement No. 689954.","title":"Install the framework"},{"location":"Sensor Analysis Framework/guides/Install the framework/#iscape-sensor-analysis-framework","text":"Welcome to the first version of the iSCAPE Sensor Analysis tools. The framework is built with the purpose of helping on the calibration process of the sensors on field tests and it aim to be the primary tool for manipulating the sensors data. The framework is built on Jupyter Notebooks and the data analysis tools are based on Pandas and are ready to later support Scikit . The current notebook supports data from the iSCAPE Citizen Sensors we provided you but we will add support to integrate the data from existing equipment. Currently all the data is loaded as CSV files but it is also ready to get live data directly from the Smart Citizen API in the future. The primary goal of the tools is to help us validate the different iSCAPE sensors and calculate their calibration values that later might automatically applied to the data the sensors push online. Notice this is currently a single Notebook that should work as a boilerplate to new Notebooks each with each own specific purpose. Complete Documentation Github Repository","title":"iSCAPE Sensor Analysis Framework"},{"location":"Sensor Analysis Framework/guides/Install the framework/#how-to-install-the-framework","text":"The following data analysis framework is built on Python 2.7 and Jupyter Notebooks. Here we will show you how to install it: Dowload and Install Anaconda for Python 2.7 https://www.continuum.io/downloads Visit Github to download the project folder or simply use git . Open the Anaconda Navigator app and launch the Jupyter Notebook . Using the Jupyter Notebook website browse your computer to find the project folder. :::success READY? Go and check How to use the notebook ::: :::info LEARN MORE Still wondering what this is? Read this introduction to Jupyter ::: :::warning ADVANCED INSTALLATION If you are already familiar with Python and you like to avoid installing Anaconda and follow the Advanced users installation ::: :::danger WORRIED ABOUT YOUR EXISTING PYTHON? Do you have already a Python environment you use for other work and you are worried about updating some packages? Learn how to load a dedicated environment :::","title":"How to install the framework"},{"location":"Sensor Analysis Framework/guides/Install the framework/#how-to-use-the-notebook","text":"The MICS Analysis Notebook is designed as fully interactive tool for data. Later on you might like to customize them and make them static for specific purposes.","title":"How to use the notebook"},{"location":"Sensor Analysis Framework/guides/Install the framework/#load-the-data","text":"Load the data from your Smart Citizen Kits in CSV format to analyse the data or prepare it for other applications. You can run a single one but to take full advantatge of the functionalities you should load two files. :::info REFERENCE EQUIPMENT We plan to add support to the file format of your calibration equipment in order to analyse and compare the data using the same approach. :::","title":"Load the data"},{"location":"Sensor Analysis Framework/guides/Install the framework/#plot-the-data","text":"This allows you to plot your data over time by sensor and device. On the next iterations you will be able to select the time range you want.","title":"Plot the data"},{"location":"Sensor Analysis Framework/guides/Install the framework/#cross-sensors-interferances","text":"This module displays a simple correlation table per device that might be helpful to have an overview to possible cross sensors interferances.","title":"Cross sensors interferances"},{"location":"Sensor Analysis Framework/guides/Install the framework/#sensor-correlations","text":"This module is the core module towards understanding cross device correlation and determination. This currently allows you to look at the determination across two different devices but in the upcoming days it might support to correlate the data against your reference equipment.","title":"Sensor Correlations"},{"location":"Sensor Analysis Framework/guides/Install the framework/#advanced-installation-features","text":"","title":"Advanced installation features"},{"location":"Sensor Analysis Framework/guides/Install the framework/#how-to-run-the-project-isolated-from-your-python-environment","text":"Do you have already a Python environment you use for other work and you are worried about updating some packages? Conda can load a dedicated environment for you to run Python and Jupyter based on the environment.yml configuration file we provide. Open your favourite shell on the directory you have your project. ( cmd.exe on windows) Run the following commands: This will install and load the Python environment we prepared for iSCAPE conda env create -f environment.yml Now activate the environment source activate iscape Ready, run to run Jupyter jupyter notebook","title":"How to run the project isolated from your Python environment"},{"location":"Sensor Analysis Framework/guides/Install the framework/#advanced-users-installation","text":"If you do not want to install Anaconda you can install all the dependencies manually. Just follow the steps above:","title":"Advanced users installation"},{"location":"Sensor Analysis Framework/guides/Install the framework/#install-python","text":"Python is the main programming language we will use for Data Analysis. On Windows download and run the installer for Python 2.7 Mac cames directly with python built in. However you can install the latest version using Hombrew and then run $ brew install python On Linux simply use your distribution package manager like $ apt in Debian or Ubuntu.","title":"Install Python"},{"location":"Sensor Analysis Framework/guides/Install the framework/#install-pip","text":"Pip is the packet manager Python uses and it comes installed by default. If you have any issues you can download pip here .","title":"Install Pip"},{"location":"Sensor Analysis Framework/guides/Install the framework/#installl-jupyter","text":"Jupyter Notebooks allows us to quickly learn, develop and improve our tools by providing a common convenient framework and UI. Simply run pip install jupyter on your terminal to install it.","title":"Installl Jupyter"},{"location":"Sensor Analysis Framework/guides/Install the framework/#download-the-source","text":"Download from Github or simply use git git clone https://github.com/fablabbcn/smartcitizen-jupyter.git","title":"Download the source"},{"location":"Sensor Analysis Framework/guides/Install the framework/#run-the-notebook","text":"On your terminal go to the folder where tou downloaded your files and then run jupyter notebook this will open a new webpage and you will be available to run your code there. The Smart Citizen Team for the iSCAPE Project iSCAPE has received funding from the European Community\u2019s H2020 Programme under Grant Agreement No. 689954.","title":"Run the notebook"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/","text":"Welcome to MkDocs Link For full documentation visit mkdocs.org . Commands Link mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout Link mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Features Link Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf PyMdown Extensions Link PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation Link The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde Usage Link Arithmatex MathJax Link Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Blocks Link Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Inline Link Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} BetterEm Link BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Caret Link Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Critic Link Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Details Link Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes. Emoji Link Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. InlineHilite Link InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js . MagicLink Link MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses. Mark Link Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols Link SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...). SuperFences Link SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs . Tasklist Link Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde Link Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Welcome to MkDocs"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#features","text":"Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf","title":"Features"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#installation","text":"The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Installation"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#usage","text":"","title":"Usage"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#arithmatex-mathjax","text":"Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Arithmatex MathJax"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#blocks","text":"Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Blocks"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#inline","text":"Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Inline"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#caret","text":"Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#details","text":"Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes.","title":"Details"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses.","title":"MagicLink"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#mark","text":"Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...).","title":"SmartSymbols"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs .","title":"SuperFences"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"Sensor Analysis Framework/guides/Stations data post processing/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"},{"location":"Sensor Platform/Sensor Platform/","text":"Sensors Platform Link The Smart Citizen platform supports the core features of the platform. That means this report documents new components, developed specifically for the project, but also existing components that already existed and made possible the platform. We believe building modular and reusable software and using existing platforms is critical towards optimizing the research and development effort. By increasing the technology readiness levels of existing technologies, we can drastically improve the project exploitation strategy. The previous requirements led to the decision of building the core platform on top of the existing Smart Citizen Platform. The platform is a front and backend solution for ingesting, storing and interacting with public data with a particular focus on crowd sensing applications. The platform is the software solution behind the Smart Citizen project as the result of the knowledge acquired after five years of running the Smart Citizen project at IAAC. That means sensor data on ISCAPE is managed by a robust and mature framework but even more important it stay on the platform designed to remain long after the project is over. Smart Citizen Website: The platform provides a visual website where the project environmental sensors can be accessed in near real time to facilitate the exploration of data with other contextual data (maps, keywords) and processed reports. This is especially important towards citizens engaging at each local site having a sense of ownership over a technology intervention has been associated with sustained community engagement (Balestrini et al. 2014) Smart Citizen API: The platform provides a REST interface for all the functionalities available on the Website. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. Some examples of this tools are: Smart Citizen Android App, ISCAPE Data Analysis Framework and the ISCAPE Virtual Living Lab. Smart Citizen Android App: The Android application for mobile phones allows users to locate and browse the latest data of a sensor quickly. This especially important for those citizens hosting one of the Citizen Sensor, engaging users by allowing them to look at their sensors data everywhere. ISCAPE Data Analysis Framework: It is currently being built as part of T3.1 to support the validation and calibration of the data collected by the different sensors. It is built on top of Jupyter Notebooks aimed at the various research departments involved in the project. It can use offline data in CSV format but also retrieve the data from the Smart Citizen API. Virtual Living Lab: It is currently being built as part of T8.1 and will provide an online web platform where each Living Lab can share their advances and contact with their local communities. The tools will feature different modules allowing the data from the sensors deployed by a Living Lab to be visualized on the site. It retrieves the data using the Smart Citizen API. Onboarding app: It aim to facilitate the process of sensor setup to ensure that users, irrespective of technical expertise, can install the sensors. It guides the user through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchange data with the core platform using the Smart Citizen API. Archiving for long term preservation: As described on D3.2 DMP all the sensor data collected during the project will be later on submitted to the Zenodo platform for long term archiving and digital reference. As a European Commission supported initiative and technically supported by CERN, we believe this is the best way to ensure access to the generated data remains long after the project ends.","title":"Sensors Platform"},{"location":"Sensor Platform/Sensor Platform/#sensors-platform","text":"The Smart Citizen platform supports the core features of the platform. That means this report documents new components, developed specifically for the project, but also existing components that already existed and made possible the platform. We believe building modular and reusable software and using existing platforms is critical towards optimizing the research and development effort. By increasing the technology readiness levels of existing technologies, we can drastically improve the project exploitation strategy. The previous requirements led to the decision of building the core platform on top of the existing Smart Citizen Platform. The platform is a front and backend solution for ingesting, storing and interacting with public data with a particular focus on crowd sensing applications. The platform is the software solution behind the Smart Citizen project as the result of the knowledge acquired after five years of running the Smart Citizen project at IAAC. That means sensor data on ISCAPE is managed by a robust and mature framework but even more important it stay on the platform designed to remain long after the project is over. Smart Citizen Website: The platform provides a visual website where the project environmental sensors can be accessed in near real time to facilitate the exploration of data with other contextual data (maps, keywords) and processed reports. This is especially important towards citizens engaging at each local site having a sense of ownership over a technology intervention has been associated with sustained community engagement (Balestrini et al. 2014) Smart Citizen API: The platform provides a REST interface for all the functionalities available on the Website. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. Some examples of this tools are: Smart Citizen Android App, ISCAPE Data Analysis Framework and the ISCAPE Virtual Living Lab. Smart Citizen Android App: The Android application for mobile phones allows users to locate and browse the latest data of a sensor quickly. This especially important for those citizens hosting one of the Citizen Sensor, engaging users by allowing them to look at their sensors data everywhere. ISCAPE Data Analysis Framework: It is currently being built as part of T3.1 to support the validation and calibration of the data collected by the different sensors. It is built on top of Jupyter Notebooks aimed at the various research departments involved in the project. It can use offline data in CSV format but also retrieve the data from the Smart Citizen API. Virtual Living Lab: It is currently being built as part of T8.1 and will provide an online web platform where each Living Lab can share their advances and contact with their local communities. The tools will feature different modules allowing the data from the sensors deployed by a Living Lab to be visualized on the site. It retrieves the data using the Smart Citizen API. Onboarding app: It aim to facilitate the process of sensor setup to ensure that users, irrespective of technical expertise, can install the sensors. It guides the user through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchange data with the core platform using the Smart Citizen API. Archiving for long term preservation: As described on D3.2 DMP all the sensor data collected during the project will be later on submitted to the Zenodo platform for long term archiving and digital reference. As a European Commission supported initiative and technically supported by CERN, we believe this is the best way to ensure access to the generated data remains long after the project ends.","title":"Sensors Platform"},{"location":"Sensor Platform/guides/Onboarding Sensors/","text":"Onboarding Sensors Link","title":"Onboarding Sensors"},{"location":"Sensor Platform/guides/Onboarding Sensors/#onboarding-sensors","text":"","title":"Onboarding Sensors"},{"location":"Sensor Platform/guides/Uploading CSV Data/","text":"Uploading CSV Data Link","title":"Uploading CSV Data"},{"location":"Sensor Platform/guides/Uploading CSV Data/#uploading-csv-data","text":"","title":"Uploading CSV Data"}]}